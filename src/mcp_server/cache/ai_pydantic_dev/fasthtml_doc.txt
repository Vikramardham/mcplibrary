<project title="ai.pydantic.dev Link Analysis" summary='A collection of content from ai.pydantic.dev pages organized by hierarchy.'>

# Table of Contents

- agents
- cli
- common_tools
- contributing
- dependencies
- examples
  - bank-support
  - flight-booking
  - pydantic-model
  - rag
  - sql-gen
  - stream-markdown
  - weather-agent
- graph
- help
- home
- input
- install
- logfire
- message-history
- models
- multi-agent-applications
- results
- testing-evals
- tools
- troubleshooting

## Document Sections

- [agents](#agents)
- [cli](#cli)
- [common_tools](#common_tools)
- [contributing](#contributing)
- [dependencies](#dependencies)
- [examples](#examples)
  - [bank-support](#examples_bank-support)
  - [flight-booking](#examples_flight-booking)
  - [pydantic-model](#examples_pydantic-model)
  - [rag](#examples_rag)
  - [sql-gen](#examples_sql-gen)
  - [stream-markdown](#examples_stream-markdown)
  - [weather-agent](#examples_weather-agent)
- [graph](#graph)
- [help](#help)
- [home](#home)
- [input](#input)
- [install](#install)
- [logfire](#logfire)
- [message-history](#message-history)
- [models](#models)
- [multi-agent-applications](#multi-agent-applications)
- [results](#results)
- [testing-evals](#testing-evals)
- [tools](#tools)
- [troubleshooting](#troubleshooting)

---

<a id="home"></a>

<doc title="PydanticAI" desc="Content from https://ai.pydantic.dev">

---
title: PydanticAI
url: https://ai.pydantic.dev/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Introduction

*Agent Framework / shim to use Pydantic with LLMs*

PydanticAI is a Python agent framework designed to make it less painful to build production grade applications with Generative AI.

FastAPI revolutionized web development by offering an innovative and ergonomic design, built on the foundation of [Pydantic](https://docs.pydantic.dev).

Similarly, virtually every agent framework and LLM library in Python uses Pydantic, yet when we began to use LLMs in [Pydantic Logfire](https://pydantic.dev/logfire), we couldn't find anything that gave us the same feeling.

We built PydanticAI with one simple aim: to bring that FastAPI feeling to GenAI app development.

## Why use PydanticAI

-
**Built by the Pydantic Team**: Built by the team behind[Pydantic](https://docs.pydantic.dev/latest/)(the validation layer of the OpenAI SDK, the Anthropic SDK, LangChain, LlamaIndex, AutoGPT, Transformers, CrewAI, Instructor and many more). -
**Model-agnostic**: Supports OpenAI, Anthropic, Gemini, Deepseek, Ollama, Groq, Cohere, and Mistral, and there is a simple interface to implement support for[other models](https://ai.pydantic.dev/models/). -
**Pydantic Logfire Integration**: Seamlessly[integrates](https://ai.pydantic.dev/logfire/)with[Pydantic Logfire](https://pydantic.dev/logfire)for real-time debugging, performance monitoring, and behavior tracking of your LLM-powered applications. -
**Type-safe**: Designed to make[type checking](https://ai.pydantic.dev/agents/#static-type-checking)as powerful and informative as possible for you. -
**Python-centric Design**: Leverages Python's familiar control flow and agent composition to build your AI-driven projects, making it easy to apply standard Python best practices you'd use in any other (non-AI) project. -
**Structured Responses**: Harnesses the power of[Pydantic](https://docs.pydantic.dev/latest/)to[validate and structure](https://ai.pydantic.dev/results/#structured-result-validation)model outputs, ensuring responses are consistent across runs. -
**Dependency Injection System**: Offers an optional[dependency injection](https://ai.pydantic.dev/dependencies/)system to provide data and services to your agent's[system prompts](https://ai.pydantic.dev/agents/#system-prompts),[tools](https://ai.pydantic.dev/tools/)and[result validators](https://ai.pydantic.dev/results/#result-validators-functions). This is useful for testing and eval-driven iterative development. -
**Streamed Responses**: Provides the ability to[stream](https://ai.pydantic.dev/results/#streamed-results)LLM outputs continuously, with immediate validation, ensuring rapid and accurate results. -
**Graph Support**:[Pydantic Graph](https://ai.pydantic.dev/graph/)provides a powerful way to define graphs using typing hints, this is useful in complex applications where standard control flow can degrade to spaghetti code.

## Hello World Example

Here's a minimal example of PydanticAI:

```
from pydantic_ai import Agent
agent = Agent( # (1)!
'google-gla:gemini-1.5-flash',
system_prompt='Be concise, reply with one sentence.', # (2)!
)
result = agent.run_sync('Where does "hello world" come from?') # (3)!
print(result.data)
"""
The first known use of "hello, world" was in a 1974 textbook about the C programming language.
"""
```


- We configure the agent to use
[Gemini 1.5's Flash](https://ai.pydantic.dev/api/models/gemini/)model, but you can also set the model when running the agent. - Register a static
[system prompt](https://ai.pydantic.dev/agents/#system-prompts)using a keyword argument to the agent. [Run the agent](https://ai.pydantic.dev/agents/#running-agents)synchronously, conducting a conversation with the LLM.

*(This example is complete, it can be run "as is")*

The exchange should be very short: PydanticAI will send the system prompt and the user query to the LLM, the model will return a text response.

Not very interesting yet, but we can easily add "tools", dynamic system prompts, and structured responses to build more powerful agents.

## Tools & Dependency Injection Example

Here is a concise example using PydanticAI to build a support agent for a bank:

```
from dataclasses import dataclass
from pydantic import BaseModel, Field
from pydantic_ai import Agent, RunContext
from bank_database import DatabaseConn
@dataclass
class SupportDependencies: # (3)!
customer_id: int
db: DatabaseConn # (12)!
class SupportResult(BaseModel): # (13)!
support_advice: str = Field(description='Advice returned to the customer')
block_card: bool = Field(description="Whether to block the customer's card")
risk: int = Field(description='Risk level of query', ge=0, le=10)
support_agent = Agent( # (1)!
'openai:gpt-4o', # (2)!
deps_type=SupportDependencies,
result_type=SupportResult, # (9)!
system_prompt=( # (4)!
'You are a support agent in our bank, give the '
'customer support and judge the risk level of their query.'
),
)
@support_agent.system_prompt # (5)!
async def add_customer_name(ctx: RunContext[SupportDependencies]) -> str:
customer_name = await ctx.deps.db.customer_name(id=ctx.deps.customer_id)
return f"The customer's name is {customer_name!r}"
@support_agent.tool # (6)!
async def customer_balance(
ctx: RunContext[SupportDependencies], include_pending: bool
) -> float:
"""Returns the customer's current account balance.""" # (7)!
return await ctx.deps.db.customer_balance(
id=ctx.deps.customer_id,
include_pending=include_pending,
)
... # (11)!
async def main():
deps = SupportDependencies(customer_id=123, db=DatabaseConn())
result = await support_agent.run('What is my balance?', deps=deps) # (8)!
print(result.data) # (10)!
"""
support_advice='Hello John, your current account balance, including pending transactions, is $123.45.' block_card=False risk=1
"""
result = await support_agent.run('I just lost my card!', deps=deps)
print(result.data)
"""
support_advice="I'm sorry to hear that, John. We are temporarily blocking your card to prevent unauthorized transactions." block_card=True risk=8
"""
```


- This
[agent](https://ai.pydantic.dev/agents/)will act as first-tier support in a bank. Agents are generic in the type of dependencies they accept and the type of result they return. In this case, the support agent has type`Agent[SupportDependencies, SupportResult]`

. - Here we configure the agent to use
[OpenAI's GPT-4o model](https://ai.pydantic.dev/api/models/openai/), you can also set the model when running the agent. - The
`SupportDependencies`

dataclass is used to pass data, connections, and logic into the model that will be needed when running[system prompt](https://ai.pydantic.dev/agents/#system-prompts)and[tool](https://ai.pydantic.dev/tools/)functions. PydanticAI's system of dependency injection provides a[type-safe](https://ai.pydantic.dev/agents/#static-type-checking)way to customise the behavior of your agents, and can be especially useful when running[unit tests](https://ai.pydantic.dev/testing-evals/)and evals. - Static
[system prompts](https://ai.pydantic.dev/agents/#system-prompts)can be registered with theto the agent.`system_prompt`

keyword argument - Dynamic
[system prompts](https://ai.pydantic.dev/agents/#system-prompts)can be registered with thedecorator, and can make use of dependency injection. Dependencies are carried via the`@agent.system_prompt`

argument, which is parameterized with the`RunContext`

`deps_type`

from above. If the type annotation here is wrong, static type checkers will catch it. let you register functions which the LLM may call while responding to a user. Again, dependencies are carried via`tool`

, any other arguments become the tool schema passed to the LLM. Pydantic is used to validate these arguments, and errors are passed back to the LLM so it can retry.`RunContext`

- The docstring of a tool is also passed to the LLM as the description of the tool. Parameter descriptions are
[extracted](https://ai.pydantic.dev/tools/#function-tools-and-schema)from the docstring and added to the parameter schema sent to the LLM. [Run the agent](https://ai.pydantic.dev/agents/#running-agents)asynchronously, conducting a conversation with the LLM until a final response is reached. Even in this fairly simple case, the agent will exchange multiple messages with the LLM as tools are called to retrieve a result.- The response from the agent will, be guaranteed to be a
`SupportResult`

, if validation fails[reflection](https://ai.pydantic.dev/agents/#reflection-and-self-correction)will mean the agent is prompted to try again. - The result will be validated with Pydantic to guarantee it is a
`SupportResult`

, since the agent is generic, it'll also be typed as a`SupportResult`

to aid with static type checking. - In a real use case, you'd add more tools and a longer system prompt to the agent to extend the context it's equipped with and support it can provide.
- This is a simple sketch of a database connection, used to keep the example short and readable. In reality, you'd be connecting to an external database (e.g. PostgreSQL) to get information about customers.
- This
[Pydantic](https://docs.pydantic.dev)model is used to constrain the structured data returned by the agent. From this simple definition, Pydantic builds the JSON Schema that tells the LLM how to return the data, and performs validation to guarantee the data is correct at the end of the run.

Complete `bank_support.py`

example

The code included here is incomplete for the sake of brevity (the definition of `DatabaseConn`

is missing); you can find the complete `bank_support.py`

example [here](https://ai.pydantic.dev/examples/bank-support/).

## Instrumentation with Pydantic Logfire

To understand the flow of the above runs, we can watch the agent in action using Pydantic Logfire.

To do this, we need to set up logfire, and add the following to our code:

```
...
from pydantic_ai import Agent, RunContext
from bank_database import DatabaseConn
import logfire
logfire.configure() # (1)!
logfire.instrument_asyncpg() # (2)!
...
support_agent = Agent(
'openai:gpt-4o',
deps_type=SupportDependencies,
result_type=SupportResult,
system_prompt=(
'You are a support agent in our bank, give the '
'customer support and judge the risk level of their query.'
),
instrument=True,
)
```


- Configure logfire, this will fail if project is not set up.
- In our demo,
`DatabaseConn`

usesto connect to a PostgreSQL database, so`asyncpg`

is used to log the database queries.`logfire.instrument_asyncpg()`


That's enough to get the following view of your agent in action:

See [Monitoring and Performance](https://ai.pydantic.dev/logfire/) to learn more.

## Next Steps

To try PydanticAI yourself, follow the instructions [in the examples](https://ai.pydantic.dev/examples/).

Read the [docs](https://ai.pydantic.dev/agents/) to learn more about building applications with PydanticAI.

Read the [API Reference](https://ai.pydantic.dev/api/agent/) to understand PydanticAI's interface.
</doc>

<a id="install"></a>

<doc title="Installation" desc="Content from https://ai.pydantic.dev/install">

---
title: Installation - PydanticAI
url: https://ai.pydantic.dev/install/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Installation

PydanticAI is available on PyPI as [ pydantic-ai](https://pypi.org/project/pydantic-ai/) so installation is as simple as:

```
pip install pydantic-ai
```


```
uv add pydantic-ai
```


(Requires Python 3.9+)

This installs the `pydantic_ai`

package, core dependencies, and libraries required to use all the models
included in PydanticAI. If you want to use a specific model, you can install the ["slim"](https://ai.pydantic.dev#slim-install) version of PydanticAI.

## Use with Pydantic Logfire

PydanticAI has an excellent (but completely optional) integration with [Pydantic Logfire](https://pydantic.dev/logfire) to help you view and understand agent runs.

To use Logfire with PydanticAI, install `pydantic-ai`

or `pydantic-ai-slim`

with the `logfire`

optional group:

```
pip install 'pydantic-ai[logfire]'
```


```
uv add 'pydantic-ai[logfire]'
```


From there, follow the [Logfire setup docs](https://ai.pydantic.dev/logfire/#using-logfire) to configure Logfire.

## Running Examples

We distribute the [ pydantic_ai_examples](https://github.com/pydantic/pydantic-ai/tree/main/examples/pydantic_ai_examples) directory as a separate PyPI package (

[) to make examples extremely easy to customize and run.](https://pypi.org/project/pydantic-ai-examples/)

`pydantic-ai-examples`

To install examples, use the `examples`

optional group:

```
pip install 'pydantic-ai[examples]'
```


```
uv add 'pydantic-ai[examples]'
```


To run the examples, follow instructions in the [examples docs](https://ai.pydantic.dev/examples/).

## Slim Install

If you know which model you're going to use and want to avoid installing superfluous packages, you can use the [ pydantic-ai-slim](https://pypi.org/project/pydantic-ai-slim/) package.
For example, if you're using just

[, you would run:](https://ai.pydantic.dev/api/models/openai/#pydantic_ai.models.openai.OpenAIModel)

`OpenAIModel`

```
pip install 'pydantic-ai-slim[openai]'
```


```
uv add 'pydantic-ai-slim[openai]'
```


`pydantic-ai-slim`

has the following optional groups:

`logfire`

— installs`logfire`

[PyPI ↗](https://pypi.org/project/logfire)`openai`

— installs`openai`

[PyPI ↗](https://pypi.org/project/openai)`vertexai`

— installs`google-auth`

[PyPI ↗](https://pypi.org/project/google-auth)and`requests`

[PyPI ↗](https://pypi.org/project/requests)`anthropic`

— installs`anthropic`

[PyPI ↗](https://pypi.org/project/anthropic)`groq`

— installs`groq`

[PyPI ↗](https://pypi.org/project/groq)`mistral`

— installs`mistralai`

[PyPI ↗](https://pypi.org/project/mistralai)`cohere`

- installs`cohere`

[PyPI ↗](https://pypi.org/project/cohere)`duckduckgo`

- installs`duckduckgo-search`

[PyPI ↗](https://pypi.org/project/duckduckgo-search)`tavily`

- installs`tavily-python`

[PyPI ↗](https://pypi.org/project/tavily-python)

See the [models](https://ai.pydantic.dev/models/) documentation for information on which optional dependencies are required for each model.

You can also install dependencies for multiple models and use cases, for example:

```
pip install 'pydantic-ai-slim[openai,vertexai,logfire]'
```


```
uv add 'pydantic-ai-slim[openai,vertexai,logfire]'
```
</doc>

<a id="help"></a>

<doc title="Getting Help" desc="Content from https://ai.pydantic.dev/help">

---
title: Getting Help - PydanticAI
url: https://ai.pydantic.dev/help/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Getting Help

If you need help getting started with PydanticAI or with advanced usage, the following sources may be useful.

## Slack

Join the `#pydantic-ai`

channel in the [Pydantic Slack](https://logfire.pydantic.dev/docs/join-slack/) to ask questions, get help, and chat about PydanticAI. There's also channels for Pydantic, Logfire, and FastUI.

If you're on a [Logfire](https://pydantic.dev/logfire) Pro plan, you can also get a dedicated private slack collab channel with us.

## GitHub Issues

The [PydanticAI GitHub Issues](https://github.com/pydantic/pydantic-ai/issues) are a great place to ask questions and give us feedback.
</doc>

<a id="contributing"></a>

<doc title="Contributing" desc="Content from https://ai.pydantic.dev/contributing">

---
title: Contributing - PydanticAI
url: https://ai.pydantic.dev/contributing/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Contributing

We'd love you to contribute to PydanticAI!

## Installation and Setup

Clone your fork and cd into the repo directory

```
git clone git@github.com:<your username>/pydantic-ai.git
cd pydantic-ai
```


Install `uv`

(version 0.4.30 or later) and `pre-commit`


We use pipx here, for other options see:

To get `pipx`

itself, see [these docs](https://pypa.github.io/pipx/)

```
pipx install uv pre-commit
```


Install `pydantic-ai`

, all dependencies and pre-commit hooks

```
make install
```


## Running Tests etc.

We use `make`

to manage most commands you'll need to run.

For details on available commands, run:

```
make help
```


To run code formatting, linting, static type checks, and tests with coverage report generation, run:

```
make
```


## Documentation Changes

To run the documentation page locally, run:

```
uv run mkdocs serve
```


## Rules for adding new models to PydanticAI

To avoid an excessive workload for the maintainers of PydanticAI, we can't accept all model contributions, so we're setting the following rules for when we'll accept new models and when we won't. This should hopefully reduce the chances of disappointment and wasted work.

- To add a new model with an extra dependency, that dependency needs > 500k monthly downloads from PyPI consistently over 3 months or more
- To add a new model which uses another models logic internally and has no extra dependencies, that model's GitHub org needs > 20k stars in total
- For any other model that's just a custom URL and API key, we're happy to add a one-paragraph description with a link and instructions on the URL to use
- For any other model that requires more logic, we recommend you release your own Python package
`pydantic-ai-xxx`

, which depends onand implements a model that inherits from our`pydantic-ai-slim`

ABC`Model`


If you're unsure about adding a model, please [create an issue](https://github.com/pydantic/pydantic-ai/issues).
</doc>

<a id="troubleshooting"></a>

<doc title="Troubleshooting" desc="Content from https://ai.pydantic.dev/troubleshooting">

---
title: Troubleshooting - PydanticAI
url: https://ai.pydantic.dev/troubleshooting/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Troubleshooting

Below are suggestions on how to fix some common errors you might encounter while using PydanticAI. If the issue you're experiencing is not listed below or addressed in the documentation, please feel free to ask in the [Pydantic Slack](https://ai.pydantic.dev/help/) or create an issue on [GitHub](https://github.com/pydantic/pydantic-ai/issues).

## Jupyter Notebook Errors

`RuntimeError: This event loop is already running`


This error is caused by conflicts between the event loops in Jupyter notebook and PydanticAI's. One way to manage these conflicts is by using [ nest-asyncio](https://pypi.org/project/nest-asyncio/). Namely, before you execute any agent runs, do the following:

```
import nest_asyncio
nest_asyncio.apply()
```


## API Key Configuration

`UserError: API key must be provided or set in the [MODEL]_API_KEY environment variable`


If you're running into issues with setting the API key for your model, visit the [Models](https://ai.pydantic.dev/models/) page to learn more about how to set an environment variable and/or pass in an `api_key`

argument.

## Monitoring HTTPX Requests

You can use custom `httpx`

clients in your models in order to access specific requests, responses, and headers at runtime.

It's particularly helpful to use `logfire`

's [HTTPX integration](https://ai.pydantic.dev/logfire/#monitoring-httpx-requests) to monitor the above.
</doc>

<a id="agents"></a>

<doc title="Agents" desc="Content from https://ai.pydantic.dev/agents">

---
title: Agents - PydanticAI
url: https://ai.pydantic.dev/agents/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Agents

## Introduction

Agents are PydanticAI's primary interface for interacting with LLMs.

In some use cases a single Agent will control an entire application or component, but multiple agents can also interact to embody more complex workflows.

The [ Agent](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent) class has full API documentation, but conceptually you can think of an agent as a container for:

Component |
Description |
|---|---|
|

[Function tool(s)](https://ai.pydantic.dev/tools/)[Structured result type](https://ai.pydantic.dev/results/)[Dependency type constraint](https://ai.pydantic.dev/dependencies/)[LLM model](https://ai.pydantic.dev/api/models/base/)[Model Settings](https://ai.pydantic.dev#additional-configuration)In typing terms, agents are generic in their dependency and result types, e.g., an agent which required dependencies of type `Foobar`

and returned results of type `list[str]`

would have type `Agent[Foobar, list[str]]`

. In practice, you shouldn't need to care about this, it should just mean your IDE can tell you when you have the right type, and if you choose to use [static type checking](https://ai.pydantic.dev#static-type-checking) it should work well with PydanticAI.

Here's a toy example of an agent that simulates a roulette wheel:

```
from pydantic_ai import Agent, RunContext
roulette_agent = Agent( # (1)!
'openai:gpt-4o',
deps_type=int,
result_type=bool,
system_prompt=(
'Use the `roulette_wheel` function to see if the '
'customer has won based on the number they provide.'
),
)
@roulette_agent.tool
async def roulette_wheel(ctx: RunContext[int], square: int) -> str: # (2)!
"""check if the square is a winner"""
return 'winner' if square == ctx.deps else 'loser'
# Run the agent
success_number = 18 # (3)!
result = roulette_agent.run_sync('Put my money on square eighteen', deps=success_number)
print(result.data) # (4)!
#> True
result = roulette_agent.run_sync('I bet five is the winner', deps=success_number)
print(result.data)
#> False
```


- Create an agent, which expects an integer dependency and returns a boolean result. This agent will have type
`Agent[int, bool]`

. - Define a tool that checks if the square is a winner. Here
is parameterized with the dependency type`RunContext`

`int`

; if you got the dependency type wrong you'd get a typing error. - In reality, you might want to use a random number here e.g.
`random.randint(0, 36)`

. `result.data`

will be a boolean indicating if the square is a winner. Pydantic performs the result validation, it'll be typed as a`bool`

since its type is derived from the`result_type`

generic parameter of the agent.

Agents are designed for reuse, like FastAPI Apps

Agents are intended to be instantiated once (frequently as module globals) and reused throughout your application, similar to a small [FastAPI](https://fastapi.tiangolo.com/reference/fastapi/#fastapi.FastAPI) app or an [APIRouter](https://fastapi.tiangolo.com/reference/apirouter/#fastapi.APIRouter).

## Running Agents

There are four ways to run an agent:

— a coroutine which returns a`agent.run()`

containing a completed response.`RunResult`

— a plain, synchronous function which returns a`agent.run_sync()`

containing a completed response (internally, this just calls`RunResult`

`loop.run_until_complete(self.run())`

).— a coroutine which returns a`agent.run_stream()`

, which contains methods to stream a response as an async iterable.`StreamedRunResult`

— a context manager which returns an`agent.iter()`

, an async-iterable over the nodes of the agent's underlying`AgentRun`

.`Graph`


Here's a simple example demonstrating the first three:

```
from pydantic_ai import Agent
agent = Agent('openai:gpt-4o')
result_sync = agent.run_sync('What is the capital of Italy?')
print(result_sync.data)
#> Rome
async def main():
result = await agent.run('What is the capital of France?')
print(result.data)
#> Paris
async with agent.run_stream('What is the capital of the UK?') as response:
print(await response.get_data())
#> London
```


*(This example is complete, it can be run "as is" — you'll need to add*

`asyncio.run(main())`

to run `main`

)You can also pass messages from previous runs to continue a conversation or provide context, as described in [Messages and Chat History](https://ai.pydantic.dev/message-history/).

### Iterating Over an Agent's Graph

Under the hood, each `Agent`

in PydanticAI uses **pydantic-graph** to manage its execution flow. **pydantic-graph** is a generic, type-centric library for building and running finite state machines in Python. It doesn't actually depend on PydanticAI — you can use it standalone for workflows that have nothing to do with GenAI — but PydanticAI makes use of it to orchestrate the handling of model requests and model responses in an agent's run.

In many scenarios, you don't need to worry about pydantic-graph at all; calling `agent.run(...)`

simply traverses the underlying graph from start to finish. However, if you need deeper insight or control — for example to capture each tool invocation, or to inject your own logic at specific stages — PydanticAI exposes the lower-level iteration process via [ Agent.iter](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.iter). This method returns an

[, which you can async-iterate over, or manually drive node-by-node via the](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.AgentRun)

`AgentRun`

[method. Once the agent's graph returns an](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.AgentRun.next)

`next`

[, you have the final result along with a detailed history of all steps.](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.End)

`End`

`async for`

iteration

Here's an example of using `async for`

with `iter`

to record each node the agent executes:

```
from pydantic_ai import Agent
agent = Agent('openai:gpt-4o')
async def main():
nodes = []
# Begin an AgentRun, which is an async-iterable over the nodes of the agent's graph
async with agent.iter('What is the capital of France?') as agent_run:
async for node in agent_run:
# Each node represents a step in the agent's execution
nodes.append(node)
print(nodes)
"""
[
ModelRequestNode(
request=ModelRequest(
parts=[
UserPromptPart(
content='What is the capital of France?',
timestamp=datetime.datetime(...),
part_kind='user-prompt',
)
],
kind='request',
)
),
CallToolsNode(
model_response=ModelResponse(
parts=[TextPart(content='Paris', part_kind='text')],
model_name='gpt-4o',
timestamp=datetime.datetime(...),
kind='response',
)
),
End(data=FinalResult(data='Paris', tool_name=None, tool_call_id=None)),
]
"""
print(agent_run.result.data)
#> Paris
```


- The
`AgentRun`

is an async iterator that yields each node (`BaseNode`

or`End`

) in the flow. - The run ends when an
`End`

node is returned.

#### Using `.next(...)`

manually

You can also drive the iteration manually by passing the node you want to run next to the `AgentRun.next(...)`

method. This allows you to inspect or modify the node before it executes or skip nodes based on your own logic, and to catch errors in `next()`

more easily:

```
from pydantic_ai import Agent
from pydantic_graph import End
agent = Agent('openai:gpt-4o')
async def main():
async with agent.iter('What is the capital of France?') as agent_run:
node = agent_run.next_node # (1)!
all_nodes = [node]
# Drive the iteration manually:
while not isinstance(node, End): # (2)!
node = await agent_run.next(node) # (3)!
all_nodes.append(node) # (4)!
print(all_nodes)
"""
[
UserPromptNode(
user_prompt='What is the capital of France?',
system_prompts=(),
system_prompt_functions=[],
system_prompt_dynamic_functions={},
),
ModelRequestNode(
request=ModelRequest(
parts=[
UserPromptPart(
content='What is the capital of France?',
timestamp=datetime.datetime(...),
part_kind='user-prompt',
)
],
kind='request',
)
),
CallToolsNode(
model_response=ModelResponse(
parts=[TextPart(content='Paris', part_kind='text')],
model_name='gpt-4o',
timestamp=datetime.datetime(...),
kind='response',
)
),
End(data=FinalResult(data='Paris', tool_name=None, tool_call_id=None)),
]
"""
```


- We start by grabbing the first node that will be run in the agent's graph.
- The agent run is finished once an
`End`

node has been produced; instances of`End`

cannot be passed to`next`

. - When you call
`await agent_run.next(node)`

, it executes that node in the agent's graph, updates the run's history, and returns the*next*node to run. - You could also inspect or mutate the new
`node`

here as needed.

#### Accessing usage and the final result

You can retrieve usage statistics (tokens, requests, etc.) at any time from the [ AgentRun](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.AgentRun) object via

`agent_run.usage()`

. This method returns a [object containing the usage data.](https://ai.pydantic.dev/api/usage/#pydantic_ai.usage.Usage)

`Usage`

Once the run finishes, `agent_run.final_result`

becomes a [ AgentRunResult](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.AgentRunResult) object containing the final output (and related metadata).

### Streaming

Here is an example of streaming an agent run in combination with `async for`

iteration:

```
import asyncio
from dataclasses import dataclass
from datetime import date
from pydantic_ai import Agent
from pydantic_ai.messages import (
FinalResultEvent,
FunctionToolCallEvent,
FunctionToolResultEvent,
PartDeltaEvent,
PartStartEvent,
TextPartDelta,
ToolCallPartDelta,
)
from pydantic_ai.tools import RunContext
@dataclass
class WeatherService:
async def get_forecast(self, location: str, forecast_date: date) -> str:
# In real code: call weather API, DB queries, etc.
return f'The forecast in {location} on {forecast_date} is 24°C and sunny.'
async def get_historic_weather(self, location: str, forecast_date: date) -> str:
# In real code: call a historical weather API or DB
return (
f'The weather in {location} on {forecast_date} was 18°C and partly cloudy.'
)
weather_agent = Agent[WeatherService, str](
'openai:gpt-4o',
deps_type=WeatherService,
result_type=str, # We'll produce a final answer as plain text
system_prompt='Providing a weather forecast at the locations the user provides.',
)
@weather_agent.tool
async def weather_forecast(
ctx: RunContext[WeatherService],
location: str,
forecast_date: date,
) -> str:
if forecast_date >= date.today():
return await ctx.deps.get_forecast(location, forecast_date)
else:
return await ctx.deps.get_historic_weather(location, forecast_date)
output_messages: list[str] = []
async def main():
user_prompt = 'What will the weather be like in Paris on Tuesday?'
# Begin a node-by-node, streaming iteration
async with weather_agent.iter(user_prompt, deps=WeatherService()) as run:
async for node in run:
if Agent.is_user_prompt_node(node):
# A user prompt node => The user has provided input
output_messages.append(f'=== UserPromptNode: {node.user_prompt} ===')
elif Agent.is_model_request_node(node):
# A model request node => We can stream tokens from the model's request
output_messages.append(
'=== ModelRequestNode: streaming partial request tokens ==='
)
async with node.stream(run.ctx) as request_stream:
async for event in request_stream:
if isinstance(event, PartStartEvent):
output_messages.append(
f'[Request] Starting part {event.index}: {event.part!r}'
)
elif isinstance(event, PartDeltaEvent):
if isinstance(event.delta, TextPartDelta):
output_messages.append(
f'[Request] Part {event.index} text delta: {event.delta.content_delta!r}'
)
elif isinstance(event.delta, ToolCallPartDelta):
output_messages.append(
f'[Request] Part {event.index} args_delta={event.delta.args_delta}'
)
elif isinstance(event, FinalResultEvent):
output_messages.append(
f'[Result] The model produced a final result (tool_name={event.tool_name})'
)
elif Agent.is_call_tools_node(node):
# A handle-response node => The model returned some data, potentially calls a tool
output_messages.append(
'=== CallToolsNode: streaming partial response & tool usage ==='
)
async with node.stream(run.ctx) as handle_stream:
async for event in handle_stream:
if isinstance(event, FunctionToolCallEvent):
output_messages.append(
f'[Tools] The LLM calls tool={event.part.tool_name!r} with args={event.part.args} (tool_call_id={event.part.tool_call_id!r})'
)
elif isinstance(event, FunctionToolResultEvent):
output_messages.append(
f'[Tools] Tool call {event.tool_call_id!r} returned => {event.result.content}'
)
elif Agent.is_end_node(node):
assert run.result.data == node.data.data
# Once an End node is reached, the agent run is complete
output_messages.append(f'=== Final Agent Output: {run.result.data} ===')
if __name__ == '__main__':
asyncio.run(main())
print(output_messages)
"""
[
'=== ModelRequestNode: streaming partial request tokens ===',
'[Request] Starting part 0: ToolCallPart(tool_name=\'weather_forecast\', args=\'{"location":"Pa\', tool_call_id=\'0001\', part_kind=\'tool-call\')',
'[Request] Part 0 args_delta=ris","forecast_',
'[Request] Part 0 args_delta=date":"2030-01-',
'[Request] Part 0 args_delta=01"}',
'=== CallToolsNode: streaming partial response & tool usage ===',
'[Tools] The LLM calls tool=\'weather_forecast\' with args={"location":"Paris","forecast_date":"2030-01-01"} (tool_call_id=\'0001\')',
"[Tools] Tool call '0001' returned => The forecast in Paris on 2030-01-01 is 24°C and sunny.",
'=== ModelRequestNode: streaming partial request tokens ===',
"[Request] Starting part 0: TextPart(content='It will be ', part_kind='text')",
'[Result] The model produced a final result (tool_name=None)',
"[Request] Part 0 text delta: 'warm and sunny '",
"[Request] Part 0 text delta: 'in Paris on '",
"[Request] Part 0 text delta: 'Tuesday.'",
'=== CallToolsNode: streaming partial response & tool usage ===',
'=== Final Agent Output: It will be warm and sunny in Paris on Tuesday. ===',
]
"""
```


### Additional Configuration

#### Usage Limits

PydanticAI offers a [ UsageLimits](https://ai.pydantic.dev/api/usage/#pydantic_ai.usage.UsageLimits) structure to help you limit your
usage (tokens and/or requests) on model runs.

You can apply these settings by passing the `usage_limits`

argument to the `run{_sync,_stream}`

functions.

Consider the following example, where we limit the number of response tokens:

```
from pydantic_ai import Agent
from pydantic_ai.exceptions import UsageLimitExceeded
from pydantic_ai.usage import UsageLimits
agent = Agent('anthropic:claude-3-5-sonnet-latest')
result_sync = agent.run_sync(
'What is the capital of Italy? Answer with just the city.',
usage_limits=UsageLimits(response_tokens_limit=10),
)
print(result_sync.data)
#> Rome
print(result_sync.usage())
"""
Usage(requests=1, request_tokens=62, response_tokens=1, total_tokens=63, details=None)
"""
try:
result_sync = agent.run_sync(
'What is the capital of Italy? Answer with a paragraph.',
usage_limits=UsageLimits(response_tokens_limit=10),
)
except UsageLimitExceeded as e:
print(e)
#> Exceeded the response_tokens_limit of 10 (response_tokens=32)
```


Restricting the number of requests can be useful in preventing infinite loops or excessive tool calling:

```
from typing_extensions import TypedDict
from pydantic_ai import Agent, ModelRetry
from pydantic_ai.exceptions import UsageLimitExceeded
from pydantic_ai.usage import UsageLimits
class NeverResultType(TypedDict):
"""
Never ever coerce data to this type.
"""
never_use_this: str
agent = Agent(
'anthropic:claude-3-5-sonnet-latest',
retries=3,
result_type=NeverResultType,
system_prompt='Any time you get a response, call the `infinite_retry_tool` to produce another response.',
)
@agent.tool_plain(retries=5) # (1)!
def infinite_retry_tool() -> int:
raise ModelRetry('Please try again.')
try:
result_sync = agent.run_sync(
'Begin infinite retry loop!', usage_limits=UsageLimits(request_limit=3) # (2)!
)
except UsageLimitExceeded as e:
print(e)
#> The next request would exceed the request_limit of 3
```


- This tool has the ability to retry 5 times before erroring, simulating a tool that might get stuck in a loop.
- This run will error after 3 requests, preventing the infinite tool calling.

Note

This is especially relevant if you've registered many tools. The `request_limit`

can be used to prevent the model from calling them in a loop too many times.

#### Model (Run) Settings

PydanticAI offers a [ settings.ModelSettings](https://ai.pydantic.dev/api/settings/#pydantic_ai.settings.ModelSettings) structure to help you fine tune your requests.
This structure allows you to configure common parameters that influence the model's behavior, such as

`temperature`

, `max_tokens`

,
`timeout`

, and more.There are two ways to apply these settings:
1. Passing to `run{_sync,_stream}`

functions via the `model_settings`

argument. This allows for fine-tuning on a per-request basis.
2. Setting during [ Agent](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent) initialization via the

`model_settings`

argument. These settings will be applied by default to all subsequent run calls using said agent. However, `model_settings`

provided during a specific run call will override the agent's default settings.For example, if you'd like to set the `temperature`

setting to `0.0`

to ensure less random behavior,
you can do the following:

```
from pydantic_ai import Agent
agent = Agent('openai:gpt-4o')
result_sync = agent.run_sync(
'What is the capital of Italy?', model_settings={'temperature': 0.0}
)
print(result_sync.data)
#> Rome
```


### Model specific settings

If you wish to further customize model behavior, you can use a subclass of [ ModelSettings](https://ai.pydantic.dev/api/settings/#pydantic_ai.settings.ModelSettings), like

[, associated with your model of choice.](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModelSettings)

`GeminiModelSettings`

For example:

```
from pydantic_ai import Agent, UnexpectedModelBehavior
from pydantic_ai.models.gemini import GeminiModelSettings
agent = Agent('google-gla:gemini-1.5-flash')
try:
result = agent.run_sync(
'Write a list of 5 very rude things that I might say to the universe after stubbing my toe in the dark:',
model_settings=GeminiModelSettings(
temperature=0.0, # general model settings can also be specified
gemini_safety_settings=[
{
'category': 'HARM_CATEGORY_HARASSMENT',
'threshold': 'BLOCK_LOW_AND_ABOVE',
},
{
'category': 'HARM_CATEGORY_HATE_SPEECH',
'threshold': 'BLOCK_LOW_AND_ABOVE',
},
],
),
)
except UnexpectedModelBehavior as e:
print(e) # (1)!
"""
Safety settings triggered, body:
<safety settings details>
"""
```


- This error is raised because the safety thresholds were exceeded.
Generally,
`result`

would contain a normal`ModelResponse`

.

## Runs vs. Conversations

An agent **run** might represent an entire conversation — there's no limit to how many messages can be exchanged in a single run. However, a **conversation** might also be composed of multiple runs, especially if you need to maintain state between separate interactions or API calls.

Here's an example of a conversation comprised of multiple runs:

```
from pydantic_ai import Agent
agent = Agent('openai:gpt-4o')
# First run
result1 = agent.run_sync('Who was Albert Einstein?')
print(result1.data)
#> Albert Einstein was a German-born theoretical physicist.
# Second run, passing previous messages
result2 = agent.run_sync(
'What was his most famous equation?',
message_history=result1.new_messages(), # (1)!
)
print(result2.data)
#> Albert Einstein's most famous equation is (E = mc^2).
```


- Continue the conversation; without
`message_history`

the model would not know who "his" was referring to.

*(This example is complete, it can be run "as is")*

## Type safe by design

PydanticAI is designed to work well with static type checkers, like mypy and pyright.

Typing is (somewhat) optional

PydanticAI is designed to make type checking as useful as possible for you if you choose to use it, but you don't have to use types everywhere all the time.

That said, because PydanticAI uses Pydantic, and Pydantic uses type hints as the definition for schema and validation, some types (specifically type hints on parameters to tools, and the `result_type`

arguments to [ Agent](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent)) are used at runtime.

We (the library developers) have messed up if type hints are confusing you more than helping you, if you find this, please create an [issue](https://github.com/pydantic/pydantic-ai/issues) explaining what's annoying you!

In particular, agents are generic in both the type of their dependencies and the type of results they return, so you can use the type hints to ensure you're using the right types.

Consider the following script with type mistakes:

```
from dataclasses import dataclass
from pydantic_ai import Agent, RunContext
@dataclass
class User:
name: str
agent = Agent(
'test',
deps_type=User, # (1)!
result_type=bool,
)
@agent.system_prompt
def add_user_name(ctx: RunContext[str]) -> str: # (2)!
return f"The user's name is {ctx.deps}."
def foobar(x: bytes) -> None:
pass
result = agent.run_sync('Does their name start with "A"?', deps=User('Anne'))
foobar(result.data) # (3)!
```


- The agent is defined as expecting an instance of
`User`

as`deps`

. - But here
`add_user_name`

is defined as taking a`str`

as the dependency, not a`User`

. - Since the agent is defined as returning a
`bool`

, this will raise a type error since`foobar`

expects`bytes`

.

Running `mypy`

on this will give the following output:

```
➤ uv run mypy type_mistakes.py
type_mistakes.py:18: error: Argument 1 to "system_prompt" of "Agent" has incompatible type "Callable[[RunContext[str]], str]"; expected "Callable[[RunContext[User]], str]" [arg-type]
type_mistakes.py:28: error: Argument 1 to "foobar" has incompatible type "bool"; expected "bytes" [arg-type]
Found 2 errors in 1 file (checked 1 source file)
```


Running `pyright`

would identify the same issues.

## System Prompts

System prompts might seem simple at first glance since they're just strings (or sequences of strings that are concatenated), but crafting the right system prompt is key to getting the model to behave as you want.

Generally, system prompts fall into two categories:

**Static system prompts**: These are known when writing the code and can be defined via the`system_prompt`

parameter of the.`Agent`

constructor**Dynamic system prompts**: These depend in some way on context that isn't known until runtime, and should be defined via functions decorated with.`@agent.system_prompt`


You can add both to a single agent; they're appended in the order they're defined at runtime.

Here's an example using both types of system prompts:

```
from datetime import date
from pydantic_ai import Agent, RunContext
agent = Agent(
'openai:gpt-4o',
deps_type=str, # (1)!
system_prompt="Use the customer's name while replying to them.", # (2)!
)
@agent.system_prompt # (3)!
def add_the_users_name(ctx: RunContext[str]) -> str:
return f"The user's name is {ctx.deps}."
@agent.system_prompt
def add_the_date() -> str: # (4)!
return f'The date is {date.today()}.'
result = agent.run_sync('What is the date?', deps='Frank')
print(result.data)
#> Hello Frank, the date today is 2032-01-02.
```


- The agent expects a string dependency.
- Static system prompt defined at agent creation time.
- Dynamic system prompt defined via a decorator with
, this is called just after`RunContext`

`run_sync`

, not when the agent is created, so can benefit from runtime information like the dependencies used on that run. - Another dynamic system prompt, system prompts don't have to have the
`RunContext`

parameter.

*(This example is complete, it can be run "as is")*

## Reflection and self-correction

Validation errors from both function tool parameter validation and [structured result validation](https://ai.pydantic.dev/results/#structured-result-validation) can be passed back to the model with a request to retry.

You can also raise [ ModelRetry](https://ai.pydantic.dev/api/exceptions/#pydantic_ai.exceptions.ModelRetry) from within a

[tool](https://ai.pydantic.dev/tools/)or

[result validator function](https://ai.pydantic.dev/results/#result-validators-functions)to tell the model it should retry generating a response.

- The default retry count is
**1**but can be altered for the[entire agent](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.__init__), a[specific tool](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.tool), or a[result validator](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.__init__). - You can access the current retry count from within a tool or result validator via
.`ctx.retry`


Here's an example:

```
from pydantic import BaseModel
from pydantic_ai import Agent, RunContext, ModelRetry
from fake_database import DatabaseConn
class ChatResult(BaseModel):
user_id: int
message: str
agent = Agent(
'openai:gpt-4o',
deps_type=DatabaseConn,
result_type=ChatResult,
)
@agent.tool(retries=2)
def get_user_by_name(ctx: RunContext[DatabaseConn], name: str) -> int:
"""Get a user's ID from their full name."""
print(name)
#> John
#> John Doe
user_id = ctx.deps.users.get(name=name)
if user_id is None:
raise ModelRetry(
f'No user found with name {name!r}, remember to provide their full name'
)
return user_id
result = agent.run_sync(
'Send a message to John Doe asking for coffee next week', deps=DatabaseConn()
)
print(result.data)
"""
user_id=123 message='Hello John, would you be free for coffee sometime next week? Let me know what works for you!'
"""
```


## Model errors

If models behave unexpectedly (e.g., the retry limit is exceeded, or their API returns `503`

), agent runs will raise [ UnexpectedModelBehavior](https://ai.pydantic.dev/api/exceptions/#pydantic_ai.exceptions.UnexpectedModelBehavior).

In these cases, [ capture_run_messages](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.capture_run_messages) can be used to access the messages exchanged during the run to help diagnose the issue.

```
from pydantic_ai import Agent, ModelRetry, UnexpectedModelBehavior, capture_run_messages
agent = Agent('openai:gpt-4o')
@agent.tool_plain
def calc_volume(size: int) -> int: # (1)!
if size == 42:
return size**3
else:
raise ModelRetry('Please try again.')
with capture_run_messages() as messages: # (2)!
try:
result = agent.run_sync('Please get me the volume of a box with size 6.')
except UnexpectedModelBehavior as e:
print('An error occurred:', e)
#> An error occurred: Tool exceeded max retries count of 1
print('cause:', repr(e.__cause__))
#> cause: ModelRetry('Please try again.')
print('messages:', messages)
"""
messages:
[
ModelRequest(
parts=[
UserPromptPart(
content='Please get me the volume of a box with size 6.',
timestamp=datetime.datetime(...),
part_kind='user-prompt',
)
],
kind='request',
),
ModelResponse(
parts=[
ToolCallPart(
tool_name='calc_volume',
args={'size': 6},
tool_call_id=None,
part_kind='tool-call',
)
],
model_name='gpt-4o',
timestamp=datetime.datetime(...),
kind='response',
),
ModelRequest(
parts=[
RetryPromptPart(
content='Please try again.',
tool_name='calc_volume',
tool_call_id=None,
timestamp=datetime.datetime(...),
part_kind='retry-prompt',
)
],
kind='request',
),
ModelResponse(
parts=[
ToolCallPart(
tool_name='calc_volume',
args={'size': 6},
tool_call_id=None,
part_kind='tool-call',
)
],
model_name='gpt-4o',
timestamp=datetime.datetime(...),
kind='response',
),
]
"""
else:
print(result.data)
```


- Define a tool that will raise
`ModelRetry`

repeatedly in this case. is used to capture the messages exchanged during the run.`capture_run_messages`


*(This example is complete, it can be run "as is")*

Note

If you call [ run](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run),

[, or](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_sync)

`run_sync`

[more than once within a single](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_stream)

`run_stream`

`capture_run_messages`

context, `messages`

will represent the messages exchanged during the first call only.
</doc>

<a id="models"></a>

<doc title="Models" desc="Content from https://ai.pydantic.dev/models">

---
title: Models - PydanticAI
url: https://ai.pydantic.dev/models/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-02-29
---
# Models

PydanticAI is Model-agnostic and has built in support for the following model providers:

[OpenAI](https://ai.pydantic.dev#openai)[Anthropic](https://ai.pydantic.dev#anthropic)- Gemini via two different APIs:
[Generative Language API](https://ai.pydantic.dev#gemini)and[VertexAI API](https://ai.pydantic.dev#gemini-via-vertexai) [Ollama](https://ai.pydantic.dev#ollama)[Groq](https://ai.pydantic.dev#groq)[Mistral](https://ai.pydantic.dev#mistral)[Cohere](https://ai.pydantic.dev#cohere)[Bedrock](https://ai.pydantic.dev#bedrock)

See [OpenAI-compatible models](https://ai.pydantic.dev#openai-compatible-models) for more examples on how to use models such as [OpenRouter](https://ai.pydantic.dev#openrouter), and [Grok (xAI)](https://ai.pydantic.dev#grok-xai) that support the OpenAI SDK.

You can also [add support for other models](https://ai.pydantic.dev#implementing-custom-models).

PydanticAI also comes with [ TestModel](https://ai.pydantic.dev/api/models/test/) and

[for testing and development.](https://ai.pydantic.dev/api/models/function/)

`FunctionModel`

To use each model provider, you need to configure your local environment and make sure you have the right packages installed.

## Models, Interfaces, and Providers

PydanticAI uses a few key terms to describe how it interacts with different LLMs:

**Model**: This refers to the specific LLM model you want to handle your requests (e.g.,`gpt-4o`

,`claude-3-5-sonnet-latest`

,`gemini-1.5-flash`

). It's the "brain" that processes your prompts and generates responses. You specify the*Model*as a parameter to the*Interface*.**Interface**: This refers to a PydanticAI class used to make requests following a specific LLM API (generally by wrapping a vendor-provided SDK, like the`openai`

python SDK). These classes implement a vendor-SDK-agnostic API, ensuring a single PydanticAI agent is portable to different LLM vendors without any other code changes just by swapping out the*Interface*it uses. Currently, interface classes are named roughly in the format`<VendorSdk>Model`

, for example, we have`OpenAIModel`

,`AnthropicModel`

,`GeminiModel`

, etc. These`Model`

classes will soon be renamed to`<VendorSdk>Interface`

to reflect this terminology better.**Provider**: This refers to*Interface*-specific classes which handle the authentication and connections to an LLM vendor. Passing a non-default*Provider*as a parameter to an*Interface*is how you can ensure that your agent will make requests to a specific endpoint, or make use of a specific approach to authentication (e.g., you can use Vertex-specific auth with the`GeminiModel`

by way of the`VertexProvider`

). In particular, this is how you can make use of an AI gateway, or an LLM vendor that offers API compatibility with the vendor SDK used by an existing interface (such as`OpenAIModel`

).

In short, you select a *model*, PydanticAI uses the appropriate *interface* class, and the *provider* handles the
connection and authentication to the underlying service.

## OpenAI

### Install

To use OpenAI models, you need to either install [ pydantic-ai](https://ai.pydantic.dev/install/), or install

[with the](https://ai.pydantic.dev/install/#slim-install)

`pydantic-ai-slim`

`openai`

optional group:```
pip install 'pydantic-ai-slim[openai]'
```


```
uv add 'pydantic-ai-slim[openai]'
```


### Configuration

To use [ OpenAIModel](https://ai.pydantic.dev/api/models/openai/#pydantic_ai.models.openai.OpenAIModel) through their main API, go to

[platform.openai.com](https://platform.openai.com/)and follow your nose until you find the place to generate an API key.

### Environment variable

Once you have the API key, you can set it as an environment variable:

```
export OPENAI_API_KEY='your-api-key'
```


You can then use [ OpenAIModel](https://ai.pydantic.dev/api/models/openai/#pydantic_ai.models.openai.OpenAIModel) by name:

```
from pydantic_ai import Agent
agent = Agent('openai:gpt-4o')
...
```


Or initialise the model directly with just the model name:

```
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
model = OpenAIModel('gpt-4o')
agent = Agent(model)
...
```


`OpenAIModel`

uses the [with the](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.openai.OpenAIProvider.__init__)

`OpenAIProvider`

`base_url`

set to `https://api.openai.com/v1`

.
`provider`

argument

You can provide a custom [ Provider](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.Provider) via the

[:](https://ai.pydantic.dev/api/models/openai/#pydantic_ai.models.openai.OpenAIModel.__init__)

`provider`

argument```
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.openai import OpenAIProvider
model = OpenAIModel('gpt-4o', provider=OpenAIProvider(api_key='your-api-key'))
agent = Agent(model)
...
```


### Custom OpenAI Client

`OpenAIProvider`

also accepts a custom `AsyncOpenAI`

client via the
[ openai_client parameter](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.openai.OpenAIProvider.__init__), so you can customise the

`organization`

, `project`

, `base_url`

etc. as defined in the [OpenAI API docs](https://platform.openai.com/docs/api-reference).

You could also use the [ AsyncAzureOpenAI](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/switching-endpoints)
client to use the Azure OpenAI API.

```
from openai import AsyncAzureOpenAI
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.openai import OpenAIProvider
client = AsyncAzureOpenAI(
azure_endpoint='...',
api_version='2024-07-01-preview',
api_key='your-api-key',
)
model = OpenAIModel(
'gpt-4o',
provider=OpenAIProvider(openai_client=client),
)
agent = Agent(model)
...
```


## Anthropic

### Install

To use [ AnthropicModel](https://ai.pydantic.dev/api/models/anthropic/#pydantic_ai.models.anthropic.AnthropicModel) models, you need to either install

[, or install](https://ai.pydantic.dev/install/)

`pydantic-ai`

[with the](https://ai.pydantic.dev/install/#slim-install)

`pydantic-ai-slim`

`anthropic`

optional group:```
pip install 'pydantic-ai-slim[anthropic]'
```


```
uv add 'pydantic-ai-slim[anthropic]'
```


### Configuration

To use [Anthropic](https://anthropic.com) through their API, go to [console.anthropic.com/settings/keys](https://console.anthropic.com/settings/keys) to generate an API key.

[ AnthropicModelName](https://ai.pydantic.dev/api/models/anthropic/#pydantic_ai.models.anthropic.AnthropicModelName) contains a list of available Anthropic models.

### Environment variable

Once you have the API key, you can set it as an environment variable:

```
export ANTHROPIC_API_KEY='your-api-key'
```


You can then use [ AnthropicModel](https://ai.pydantic.dev/api/models/anthropic/#pydantic_ai.models.anthropic.AnthropicModel) by name:

```
from pydantic_ai import Agent
agent = Agent('anthropic:claude-3-5-sonnet-latest')
...
```


Or initialise the model directly with just the model name:

```
from pydantic_ai import Agent
from pydantic_ai.models.anthropic import AnthropicModel
model = AnthropicModel('claude-3-5-sonnet-latest')
agent = Agent(model)
...
```


`api_key`

argument

If you don't want to or can't set the environment variable, you can pass it at runtime via the [ api_key argument](https://ai.pydantic.dev/api/models/anthropic/#pydantic_ai.models.anthropic.AnthropicModel.__init__):

```
from pydantic_ai import Agent
from pydantic_ai.models.anthropic import AnthropicModel
model = AnthropicModel('claude-3-5-sonnet-latest', api_key='your-api-key')
agent = Agent(model)
...
```


## Gemini

### Install

To use [ GeminiModel](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModel) models, you just need to install

[or](https://ai.pydantic.dev/install/)

`pydantic-ai`

[, no extra dependencies are required.](https://ai.pydantic.dev/install/#slim-install)

`pydantic-ai-slim`

### Configuration

[ GeminiModel](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModel) let's you use the Google's Gemini models through their

[Generative Language API](https://ai.google.dev/api/all-methods),

`generativelanguage.googleapis.com`

.[ GeminiModelName](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModelName) contains a list of available Gemini models that can be used through this interface.

To use `GeminiModel`

, go to [aistudio.google.com](https://aistudio.google.com/apikey) and select "Create API key".

### Environment variable

Once you have the API key, you can set it as an environment variable:

```
export GEMINI_API_KEY=your-api-key
```


You can then use [ GeminiModel](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModel) by name:

```
from pydantic_ai import Agent
agent = Agent('google-gla:gemini-2.0-flash')
...
```


Note

The `google-gla`

provider prefix represents the [Google Generative Language API](https://ai.google.dev/api/all-methods) for

`GeminiModel`

s.
`google-vertex`

is used with [Vertex AI](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models).

Or initialise the model directly with just the model name and provider:

```
from pydantic_ai import Agent
from pydantic_ai.models.gemini import GeminiModel
model = GeminiModel('gemini-2.0-flash', provider='google-gla')
agent = Agent(model)
...
```


`provider`

argument

You can provide a custom [ Provider](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.Provider) via the

[:](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModel.__init__)

`provider`

argument```
from pydantic_ai import Agent
from pydantic_ai.models.gemini import GeminiModel
from pydantic_ai.providers.google_gla import GoogleGLAProvider
model = GeminiModel(
'gemini-2.0-flash', provider=GoogleGLAProvider(api_key='your-api-key')
)
agent = Agent(model)
...
```


`GoogleGLAProvider`

with a custom `http_client`

:
```
from httpx import AsyncClient
from pydantic_ai import Agent
from pydantic_ai.models.gemini import GeminiModel
from pydantic_ai.providers.google_gla import GoogleGLAProvider
custom_http_client = AsyncClient(timeout=30)
model = GeminiModel(
'gemini-2.0-flash',
provider=GoogleGLAProvider(api_key='your-api-key', http_client=custom_http_client),
)
agent = Agent(model)
...
```


## Gemini via VertexAI

If you are an enterprise user, you should use the `google-vertex`

provider with [ GeminiModel](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModel) which uses the

`*-aiplatform.googleapis.com`

API.[ GeminiModelName](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModelName) contains a list of available Gemini models that can be used through this interface.

### Install

To use the `google-vertex`

provider with [ GeminiModel](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModel), you need to either install

[, or install](https://ai.pydantic.dev/install/)

`pydantic-ai`

[with the](https://ai.pydantic.dev/install/#slim-install)

`pydantic-ai-slim`

`vertexai`

optional group:```
pip install 'pydantic-ai-slim[vertexai]'
```


```
uv add 'pydantic-ai-slim[vertexai]'
```


### Configuration

This interface has a number of advantages over `generativelanguage.googleapis.com`

documented above:

- The VertexAI API comes with more enterprise readiness guarantees.
- You can
[purchase provisioned throughput](https://cloud.google.com/vertex-ai/generative-ai/docs/provisioned-throughput#purchase-provisioned-throughput)with VertexAI to guarantee capacity. - If you're running PydanticAI inside GCP, you don't need to set up authentication, it should "just work".
- You can decide which region to use, which might be important from a regulatory perspective, and might improve latency.

The big disadvantage is that for local development you may need to create and configure a "service account", which I've found extremely painful to get right in the past.

Whichever way you authenticate, you'll need to have VertexAI enabled in your GCP account.

### Application default credentials

Luckily if you're running PydanticAI inside GCP, or you have the [ gcloud CLI](https://cloud.google.com/sdk/gcloud) installed and configured, you should be able to use

`VertexAIModel`

without any additional setup.To use `VertexAIModel`

, with [application default credentials](https://cloud.google.com/docs/authentication/application-default-credentials) configured (e.g. with `gcloud`

), you can simply use:

```
from pydantic_ai import Agent
from pydantic_ai.models.gemini import GeminiModel
model = GeminiModel('gemini-2.0-flash', provider='google-vertex')
agent = Agent(model)
...
```


Internally this uses [ google.auth.default()](https://google-auth.readthedocs.io/en/master/reference/google.auth.html) from the

`google-auth`

package to obtain credentials.Won't fail until `agent.run()`


Because `google.auth.default()`

requires network requests and can be slow, it's not run until you call `agent.run()`

.

You may also need to pass the [ project_id argument to GoogleVertexProvider](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.google_vertex.GoogleVertexProvider) if application default credentials don't set a project, if you pass


`project_id`

and it conflicts with the project set by application default credentials, an error is raised.### Service account

If instead of application default credentials, you want to authenticate with a service account, you'll need to create a service account, add it to your GCP project (note: AFAIK this step is necessary even if you created the service account within the project), give that service account the "Vertex AI Service Agent" role, and download the service account JSON file.

Once you have the JSON file, you can use it thus:

```
from pydantic_ai import Agent
from pydantic_ai.models.gemini import GeminiModel
from pydantic_ai.providers.google_vertex import GoogleVertexProvider
model = GeminiModel(
'gemini-2.0-flash',
provider=GoogleVertexProvider(service_account_file='path/to/service-account.json'),
)
agent = Agent(model)
...
```


Alternatively, if you already have the service account information in memory, you can pass it as a dictionary:

```
import json
from pydantic_ai import Agent
from pydantic_ai.models.gemini import GeminiModel
from pydantic_ai.providers.google_vertex import GoogleVertexProvider
service_account_info = json.loads(
'{"type": "service_account", "project_id": "my-project-id"}'
)
model = GeminiModel(
'gemini-2.0-flash',
provider=GoogleVertexProvider(service_account_info=service_account_info),
)
agent = Agent(model)
...
```


### Customising region

Whichever way you authenticate, you can specify which region requests will be sent to via the [ region argument](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.google_vertex.GoogleVertexProvider).

Using a region close to your application can improve latency and might be important from a regulatory perspective.

```
from pydantic_ai import Agent
from pydantic_ai.models.gemini import GeminiModel
from pydantic_ai.providers.google_vertex import GoogleVertexProvider
model = GeminiModel(
'gemini-2.0-flash', provider=GoogleVertexProvider(region='asia-east1')
)
agent = Agent(model)
...
```


`GoogleVertexProvider`

with a custom `http_client`

:
```
from httpx import AsyncClient
from pydantic_ai import Agent
from pydantic_ai.models.gemini import GeminiModel
from pydantic_ai.providers.google_vertex import GoogleVertexProvider
custom_http_client = AsyncClient(timeout=30)
model = GeminiModel(
'gemini-2.0-flash',
provider=GoogleVertexProvider(region='asia-east1', http_client=custom_http_client),
)
agent = Agent(model)
...
```


## Groq

### Install

To use [ GroqModel](https://ai.pydantic.dev/api/models/groq/#pydantic_ai.models.groq.GroqModel), you need to either install

[, or install](https://ai.pydantic.dev/install/)

`pydantic-ai`

[with the](https://ai.pydantic.dev/install/#slim-install)

`pydantic-ai-slim`

`groq`

optional group:```
pip install 'pydantic-ai-slim[groq]'
```


```
uv add 'pydantic-ai-slim[groq]'
```


### Configuration

To use [Groq](https://groq.com/) through their API, go to [console.groq.com/keys](https://console.groq.com/keys) and follow your nose until you find the place to generate an API key.

[ GroqModelName](https://ai.pydantic.dev/api/models/groq/#pydantic_ai.models.groq.GroqModelName) contains a list of available Groq models.

### Environment variable

Once you have the API key, you can set it as an environment variable:

```
export GROQ_API_KEY='your-api-key'
```


You can then use [ GroqModel](https://ai.pydantic.dev/api/models/groq/#pydantic_ai.models.groq.GroqModel) by name:

```
from pydantic_ai import Agent
agent = Agent('groq:llama-3.3-70b-versatile')
...
```


Or initialise the model directly with just the model name:

```
from pydantic_ai import Agent
from pydantic_ai.models.groq import GroqModel
model = GroqModel('llama-3.3-70b-versatile')
agent = Agent(model)
...
```


`provider`

argument

You can provide a custom [ Provider](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.Provider) via the

[:](https://ai.pydantic.dev/api/models/groq/#pydantic_ai.models.groq.GroqModel.__init__)

`provider`

argument```
from pydantic_ai import Agent
from pydantic_ai.models.groq import GroqModel
from pydantic_ai.providers.groq import GroqProvider
model = GroqModel(
'llama-3.3-70b-versatile', provider=GroqProvider(api_key='your-api-key')
)
agent = Agent(model)
...
```


You can also customize the [ GroqProvider](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.groq.GroqProvider) with a
custom

`httpx.AsyncHTTPClient`

:```
from httpx import AsyncClient
from pydantic_ai import Agent
from pydantic_ai.models.groq import GroqModel
from pydantic_ai.providers.groq import GroqProvider
custom_http_client = AsyncClient(timeout=30)
model = GroqModel(
'llama-3.3-70b-versatile',
provider=GroqProvider(api_key='your-api-key', http_client=custom_http_client),
)
agent = Agent(model)
...
```


## Mistral

### Install

To use [ MistralModel](https://ai.pydantic.dev/api/models/mistral/#pydantic_ai.models.mistral.MistralModel), you need to either install

[, or install](https://ai.pydantic.dev/install/)

`pydantic-ai`

[with the](https://ai.pydantic.dev/install/#slim-install)

`pydantic-ai-slim`

`mistral`

optional group:```
pip install 'pydantic-ai-slim[mistral]'
```


```
uv add 'pydantic-ai-slim[mistral]'
```


### Configuration

To use [Mistral](https://mistral.ai) through their API, go to [console.mistral.ai/api-keys/](https://console.mistral.ai/api-keys/) and follow your nose until you find the place to generate an API key.

[ MistralModelName](https://ai.pydantic.dev/api/models/mistral/#pydantic_ai.models.mistral.MistralModelName) contains a list of the most popular Mistral models.

### Environment variable

Once you have the API key, you can set it as an environment variable:

```
export MISTRAL_API_KEY='your-api-key'
```


You can then use [ MistralModel](https://ai.pydantic.dev/api/models/mistral/#pydantic_ai.models.mistral.MistralModel) by name:

```
from pydantic_ai import Agent
agent = Agent('mistral:mistral-large-latest')
...
```


Or initialise the model directly with just the model name:

```
from pydantic_ai import Agent
from pydantic_ai.models.mistral import MistralModel
model = MistralModel('mistral-small-latest')
agent = Agent(model)
...
```


`api_key`

argument

If you don't want to or can't set the environment variable, you can pass it at runtime via the [ api_key argument](https://ai.pydantic.dev/api/models/mistral/#pydantic_ai.models.mistral.MistralModel.__init__):

```
from pydantic_ai import Agent
from pydantic_ai.models.mistral import MistralModel
model = MistralModel('mistral-small-latest', api_key='your-api-key')
agent = Agent(model)
...
```


## Cohere

### Install

To use [ CohereModel](https://ai.pydantic.dev/api/models/cohere/#pydantic_ai.models.cohere.CohereModel), you need to either install

[, or install](https://ai.pydantic.dev/install/)

`pydantic-ai`

[with the](https://ai.pydantic.dev/install/#slim-install)

`pydantic-ai-slim`

`cohere`

optional group:```
pip install 'pydantic-ai-slim[cohere]'
```


```
uv add 'pydantic-ai-slim[cohere]'
```


### Configuration

To use [Cohere](https://cohere.com/) through their API, go to [dashboard.cohere.com/api-keys](https://dashboard.cohere.com/api-keys) and follow your nose until you find the place to generate an API key.

[ CohereModelName](https://ai.pydantic.dev/api/models/cohere/#pydantic_ai.models.cohere.CohereModelName) contains a list of the most popular Cohere models.

### Environment variable

Once you have the API key, you can set it as an environment variable:

```
export CO_API_KEY='your-api-key'
```


You can then use [ CohereModel](https://ai.pydantic.dev/api/models/cohere/#pydantic_ai.models.cohere.CohereModel) by name:

```
from pydantic_ai import Agent
agent = Agent('cohere:command')
...
```


Or initialise the model directly with just the model name:

```
from pydantic_ai import Agent
from pydantic_ai.models.cohere import CohereModel
model = CohereModel('command', api_key='your-api-key')
agent = Agent(model)
...
```


`api_key`

argument

If you don't want to or can't set the environment variable, you can pass it at runtime via the [ api_key argument](https://ai.pydantic.dev/api/models/cohere/#pydantic_ai.models.cohere.CohereModel.__init__):

```
from pydantic_ai import Agent
from pydantic_ai.models.cohere import CohereModel
model = CohereModel('command', api_key='your-api-key')
agent = Agent(model)
...
```


## Bedrock

### Install

To use [ BedrockConverseModel](https://ai.pydantic.dev/api/models/bedrock/#pydantic_ai.models.bedrock.BedrockConverseModel), you need to either install

[, or install](https://ai.pydantic.dev/install/)

`pydantic-ai`

[with the](https://ai.pydantic.dev/install/#slim-install)

`pydantic-ai-slim`

`bedrock`

optional group:```
pip install 'pydantic-ai-slim[bedrock]'
```


```
uv add 'pydantic-ai-slim[bedrock]'
```


### Configuration

To use [AWS Bedrock](https://aws.amazon.com/bedrock/), you'll need an AWS account with Bedrock enabled and appropriate credentials. You can use either AWS credentials directly or a pre-configured boto3 client.

[ BedrockModelName](https://ai.pydantic.dev/api/models/bedrock/#pydantic_ai.models.bedrock.BedrockModelName) contains a list of available Bedrock models, including models from Anthropic, Amazon, Cohere, Meta, and Mistral.

### Environment variables

You can set your AWS credentials as environment variables:

```
export AWS_ACCESS_KEY_ID='your-access-key'
export AWS_SECRET_ACCESS_KEY='your-secret-key'
export AWS_REGION='us-east-1' # or your preferred region
```


You can then use [ BedrockConverseModel](https://ai.pydantic.dev/api/models/bedrock/#pydantic_ai.models.bedrock.BedrockConverseModel) by name:

```
from pydantic_ai import Agent
agent = Agent('bedrock:anthropic.claude-3-sonnet-20240229-v1:0')
...
```


Or initialize the model directly with just the model name:

```
from pydantic_ai import Agent
from pydantic_ai.models.bedrock import BedrockConverseModel
model = BedrockConverseModel('anthropic.claude-3-sonnet-20240229-v1:0')
agent = Agent(model)
...
```


`provider`

argument

You can provide a custom [ BedrockProvider](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.bedrock.BedrockProvider) via the

[. This is useful when you want to specify credentials directly or use a custom boto3 client:](https://ai.pydantic.dev/api/models/bedrock/#pydantic_ai.models.bedrock.BedrockConverseModel.__init__)

`provider`

argument```
from pydantic_ai import Agent
from pydantic_ai.models.bedrock import BedrockConverseModel
from pydantic_ai.providers.bedrock import BedrockProvider
# Using AWS credentials directly
model = BedrockConverseModel(
'anthropic.claude-3-sonnet-20240229-v1:0',
provider=BedrockProvider(
region_name='us-east-1',
aws_access_key_id='your-access-key',
aws_secret_access_key='your-secret-key',
),
)
agent = Agent(model)
...
```


You can also pass a pre-configured boto3 client:

```
import boto3
from pydantic_ai import Agent
from pydantic_ai.models.bedrock import BedrockConverseModel
from pydantic_ai.providers.bedrock import BedrockProvider
# Using a pre-configured boto3 client
bedrock_client = boto3.client('bedrock-runtime', region_name='us-east-1')
model = BedrockConverseModel(
'anthropic.claude-3-sonnet-20240229-v1:0',
provider=BedrockProvider(bedrock_client=bedrock_client),
)
agent = Agent(model)
...
```


## OpenAI-compatible Models

Many of the models are compatible with OpenAI API, and thus can be used with [ OpenAIModel](https://ai.pydantic.dev/api/models/openai/#pydantic_ai.models.openai.OpenAIModel) in PydanticAI.
Before getting started, check the

[OpenAI](https://ai.pydantic.dev#openai)section for installation and configuration instructions.

To use another OpenAI-compatible API, you can make use of the [ base_url](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.openai.OpenAIProvider.__init__)
and

[arguments from](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.openai.OpenAIProvider.__init__)

`api_key`

`OpenAIProvider`

:```
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.openai import OpenAIProvider
model = OpenAIModel(
'model_name',
provider=OpenAIProvider(
base_url='https://<openai-compatible-api-endpoint>.com', api_key='your-api-key'
),
)
agent = Agent(model)
...
```


You can also use the `provider`

argument with a custom provider class like the [ DeepSeekProvider](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.deepseek.DeepSeekProvider):

```
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.deepseek import DeepSeekProvider
model = OpenAIModel(
'deepseek-chat',
provider=DeepSeekProvider(api_key='your-deepseek-api-key'),
)
agent = Agent(model)
...
```


`http_client`

:
```
from httpx import AsyncClient
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.deepseek import DeepSeekProvider
custom_http_client = AsyncClient(timeout=30)
model = OpenAIModel(
'deepseek-chat',
provider=DeepSeekProvider(
api_key='your-deepseek-api-key', http_client=custom_http_client
),
)
agent = Agent(model)
...
```


### Ollama

To use [Ollama](https://ollama.com/), you must first download the Ollama client, and then download a model using the [Ollama model library](https://ollama.com/library).

You must also ensure the Ollama server is running when trying to make requests to it. For more information, please see the [Ollama documentation](https://github.com/ollama/ollama/tree/main/docs).

#### Example local usage

With `ollama`

installed, you can run the server with the model you want to use:

```
ollama run llama3.2
```


(this will pull the `llama3.2`

model if you don't already have it downloaded)

Then run your code, here's a minimal example:

```
from pydantic import BaseModel
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.openai import OpenAIProvider
class CityLocation(BaseModel):
city: str
country: str
ollama_model = OpenAIModel(
model_name='llama3.2', provider=OpenAIProvider(base_url='http://localhost:11434/v1')
)
agent = Agent(ollama_model, result_type=CityLocation)
result = agent.run_sync('Where were the olympics held in 2012?')
print(result.data)
#> city='London' country='United Kingdom'
print(result.usage())
"""
Usage(requests=1, request_tokens=57, response_tokens=8, total_tokens=65, details=None)
"""
```


#### Example using a remote server

```
from pydantic import BaseModel
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.openai import OpenAIProvider
ollama_model = OpenAIModel(
model_name='qwen2.5-coder:7b', # (1)!
provider=OpenAIProvider(base_url='http://192.168.1.74:11434/v1'), # (2)!
)
class CityLocation(BaseModel):
city: str
country: str
agent = Agent(model=ollama_model, result_type=CityLocation)
result = agent.run_sync('Where were the olympics held in 2012?')
print(result.data)
#> city='London' country='United Kingdom'
print(result.usage())
"""
Usage(requests=1, request_tokens=57, response_tokens=8, total_tokens=65, details=None)
"""
```


- The name of the model running on the remote server
- The url of the remote server

### Azure AI Foundry

If you want to use [Azure AI Foundry](https://ai.azure.com/) as your provider, you can do so by using the
[ AzureProvider](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.azure.AzureProvider) class.

```
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.azure import AzureProvider
model = OpenAIModel(
'gpt-4o',
provider=AzureProvider(
azure_endpoint='your-azure-endpoint',
api_version='your-api-version',
api_key='your-api-key',
),
)
agent = Agent(model)
...
```


### OpenRouter

To use [OpenRouter](https://openrouter.ai), first create an API key at [openrouter.ai/keys](https://openrouter.ai/keys).

Once you have the API key, you can use it with the [ OpenAIProvider](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.openai.OpenAIProvider):

```
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.openai import OpenAIProvider
model = OpenAIModel(
'anthropic/claude-3.5-sonnet',
provider=OpenAIProvider(
base_url='https://openrouter.ai/api/v1',
api_key='your-openrouter-api-key',
),
)
agent = Agent(model)
...
```


### Grok (xAI)

Go to [xAI API Console](https://console.x.ai/) and create an API key.
Once you have the API key, you can use it with the [ OpenAIProvider](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.openai.OpenAIProvider):

```
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.openai import OpenAIProvider
model = OpenAIModel(
'grok-2-1212',
provider=OpenAIProvider(base_url='https://api.x.ai/v1', api_key='your-xai-api-key'),
)
agent = Agent(model)
...
```


### Perplexity

Follow the Perplexity [getting started](https://docs.perplexity.ai/guides/getting-started)
guide to create an API key. Then, you can query the Perplexity API with the following:

```
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.openai import OpenAIProvider
model = OpenAIModel(
'sonar-pro',
provider=OpenAIProvider(
base_url='https://api.perplexity.ai',
api_key='your-perplexity-api-key',
),
)
agent = Agent(model)
...
```


### Fireworks AI

Go to [Fireworks.AI](https://fireworks.ai/) and create an API key in your account settings.
Once you have the API key, you can use it with the [ OpenAIProvider](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.openai.OpenAIProvider):

```
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.openai import OpenAIProvider
model = OpenAIModel(
'accounts/fireworks/models/qwq-32b', # model library available at https://fireworks.ai/models
provider=OpenAIProvider(
base_url='https://api.fireworks.ai/inference/v1',
api_key='your-fireworks-api-key',
),
)
agent = Agent(model)
...
```


### Together AI

Go to [Together.ai](https://www.together.ai/) and create an API key in your account settings.
Once you have the API key, you can use it with the [ OpenAIProvider](https://ai.pydantic.dev/api/providers/#pydantic_ai.providers.openai.OpenAIProvider):

```
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.openai import OpenAIProvider
model = OpenAIModel(
'meta-llama/Llama-3.3-70B-Instruct-Turbo-Free', # model library available at https://www.together.ai/models
provider=OpenAIProvider(
base_url='https://api.together.xyz/v1',
api_key='your-together-api-key',
),
)
agent = Agent(model)
...
```


## Implementing Custom Models

To implement support for models not already supported, you will need to subclass the [ Model](https://ai.pydantic.dev/api/models/base/#pydantic_ai.models.Model) abstract base class.

For streaming, you'll also need to implement the following abstract base class:

The best place to start is to review the source code for existing implementations, e.g. [ OpenAIModel](https://github.com/pydantic/pydantic-ai/blob/main/pydantic_ai_slim/pydantic_ai/models/openai.py).

For details on when we'll accept contributions adding new models to PydanticAI, see the [contributing guidelines](https://ai.pydantic.dev/contributing/#new-model-rules).

## Fallback

You can use [ FallbackModel](https://ai.pydantic.dev/api/models/fallback/#pydantic_ai.models.fallback.FallbackModel) to attempt multiple models
in sequence until one returns a successful result. Under the hood, PydanticAI automatically switches
from one model to the next if the current model returns a 4xx or 5xx status code.

In the following example, the agent first makes a request to the OpenAI model (which fails due to an invalid API key), and then falls back to the Anthropic model.

```
from pydantic_ai import Agent
from pydantic_ai.models.anthropic import AnthropicModel
from pydantic_ai.models.fallback import FallbackModel
from pydantic_ai.models.openai import OpenAIModel
openai_model = OpenAIModel('gpt-4o', api_key='not-valid')
anthropic_model = AnthropicModel('claude-3-5-sonnet-latest')
fallback_model = FallbackModel(openai_model, anthropic_model)
agent = Agent(fallback_model)
response = agent.run_sync('What is the capital of France?')
print(response.data)
#> Paris
print(response.all_messages())
"""
[
ModelRequest(
parts=[
UserPromptPart(
content='What is the capital of France?',
timestamp=datetime.datetime(...),
part_kind='user-prompt',
)
],
kind='request',
),
ModelResponse(
parts=[TextPart(content='Paris', part_kind='text')],
model_name='claude-3-5-sonnet-latest',
timestamp=datetime.datetime(...),
kind='response',
),
]
"""
```


The `ModelResponse`

message above indicates in the `model_name`

field that the result was returned by the Anthropic model, which is the second model specified in the `FallbackModel`

.

Note

Each model's options should be configured individually. For example, `base_url`

, `api_key`

, and custom clients should be set on each model itself, not on the `FallbackModel`

.

In this next example, we demonstrate the exception-handling capabilities of `FallbackModel`

.
If all models fail, a [ FallbackExceptionGroup](https://ai.pydantic.dev/api/exceptions/#pydantic_ai.exceptions.FallbackExceptionGroup) is raised, which
contains all the exceptions encountered during the

`run`

execution.```
from pydantic_ai import Agent
from pydantic_ai.exceptions import ModelHTTPError
from pydantic_ai.models.anthropic import AnthropicModel
from pydantic_ai.models.fallback import FallbackModel
from pydantic_ai.models.openai import OpenAIModel
openai_model = OpenAIModel('gpt-4o', api_key='not-valid')
anthropic_model = AnthropicModel('claude-3-5-sonnet-latest', api_key='not-valid')
fallback_model = FallbackModel(openai_model, anthropic_model)
agent = Agent(fallback_model)
try:
response = agent.run_sync('What is the capital of France?')
except* ModelHTTPError as exc_group:
for exc in exc_group.exceptions:
print(exc)
```


Since [ except*](https://docs.python.org/3/reference/compound_stmts.html#except-star) is only supported
in Python 3.11+, we use the

[backport package for earlier Python versions:](https://github.com/agronholm/exceptiongroup)

`exceptiongroup`

```
from exceptiongroup import catch
from pydantic_ai import Agent
from pydantic_ai.exceptions import ModelHTTPError
from pydantic_ai.models.anthropic import AnthropicModel
from pydantic_ai.models.fallback import FallbackModel
from pydantic_ai.models.openai import OpenAIModel
def model_status_error_handler(exc_group: BaseExceptionGroup) -> None:
for exc in exc_group.exceptions:
print(exc)
openai_model = OpenAIModel('gpt-4o', api_key='not-valid')
anthropic_model = AnthropicModel('claude-3-5-sonnet-latest', api_key='not-valid')
fallback_model = FallbackModel(openai_model, anthropic_model)
agent = Agent(fallback_model)
with catch({ModelHTTPError: model_status_error_handler}):
response = agent.run_sync('What is the capital of France?')
```


By default, the `FallbackModel`

only moves on to the next model if the current model raises a
[ ModelHTTPError](https://ai.pydantic.dev/api/exceptions/#pydantic_ai.exceptions.ModelHTTPError). You can customize this behavior by
passing a custom

`fallback_on`

argument to the `FallbackModel`

constructor.
</doc>

<a id="dependencies"></a>

<doc title="Dependencies" desc="Content from https://ai.pydantic.dev/dependencies">

---
title: Dependencies - PydanticAI
url: https://ai.pydantic.dev/dependencies/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Dependencies

PydanticAI uses a dependency injection system to provide data and services to your agent's [system prompts](https://ai.pydantic.dev/agents/#system-prompts), [tools](https://ai.pydantic.dev/tools/) and [result validators](https://ai.pydantic.dev/results/#result-validators-functions).

Matching PydanticAI's design philosophy, our dependency system tries to use existing best practice in Python development rather than inventing esoteric "magic", this should make dependencies type-safe, understandable easier to test and ultimately easier to deploy in production.

## Defining Dependencies

Dependencies can be any python type. While in simple cases you might be able to pass a single object as a dependency (e.g. an HTTP connection), [dataclasses](https://docs.python.org/3/library/dataclasses.html#module-dataclasses) are generally a convenient container when your dependencies included multiple objects.

Here's an example of defining an agent that requires dependencies.

(**Note:** dependencies aren't actually used in this example, see [Accessing Dependencies](https://ai.pydantic.dev#accessing-dependencies) below)

```
from dataclasses import dataclass
import httpx
from pydantic_ai import Agent
@dataclass
class MyDeps: # (1)!
api_key: str
http_client: httpx.AsyncClient
agent = Agent(
'openai:gpt-4o',
deps_type=MyDeps, # (2)!
)
async def main():
async with httpx.AsyncClient() as client:
deps = MyDeps('foobar', client)
result = await agent.run(
'Tell me a joke.',
deps=deps, # (3)!
)
print(result.data)
#> Did you hear about the toothpaste scandal? They called it Colgate.
```


- Define a dataclass to hold dependencies.
- Pass the dataclass type to the
`deps_type`

argument of the.`Agent`

constructor**Note**: we're passing the type here, NOT an instance, this parameter is not actually used at runtime, it's here so we can get full type checking of the agent. - When running the agent, pass an instance of the dataclass to the
`deps`

parameter.

*(This example is complete, it can be run "as is" — you'll need to add asyncio.run(main()) to run main)*


## Accessing Dependencies

Dependencies are accessed through the [ RunContext](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext) type, this should be the first parameter of system prompt functions etc.

```
from dataclasses import dataclass
import httpx
from pydantic_ai import Agent, RunContext
@dataclass
class MyDeps:
api_key: str
http_client: httpx.AsyncClient
agent = Agent(
'openai:gpt-4o',
deps_type=MyDeps,
)
@agent.system_prompt # (1)!
async def get_system_prompt(ctx: RunContext[MyDeps]) -> str: # (2)!
response = await ctx.deps.http_client.get( # (3)!
'https://example.com',
headers={'Authorization': f'Bearer {ctx.deps.api_key}'}, # (4)!
)
response.raise_for_status()
return f'Prompt: {response.text}'
async def main():
async with httpx.AsyncClient() as client:
deps = MyDeps('foobar', client)
result = await agent.run('Tell me a joke.', deps=deps)
print(result.data)
#> Did you hear about the toothpaste scandal? They called it Colgate.
```


may optionally be passed to a`RunContext`

function as the only argument.`system_prompt`

is parameterized with the type of the dependencies, if this type is incorrect, static type checkers will raise an error.`RunContext`

- Access dependencies through the
attribute.`.deps`

- Access dependencies through the
attribute.`.deps`


*(This example is complete, it can be run "as is" — you'll need to add asyncio.run(main()) to run main)*


### Asynchronous vs. Synchronous dependencies

[System prompt functions](https://ai.pydantic.dev/agents/#system-prompts), [function tools](https://ai.pydantic.dev/tools/) and [result validators](https://ai.pydantic.dev/results/#result-validators-functions) are all run in the async context of an agent run.

If these functions are not coroutines (e.g. `async def`

) they are called with
[ run_in_executor](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor) in a thread pool, it's therefore marginally preferable
to use

`async`

methods where dependencies perform IO, although synchronous dependencies should work fine too.`run`

vs. `run_sync`

and Asynchronous vs. Synchronous dependencies

Whether you use synchronous or asynchronous dependencies, is completely independent of whether you use `run`

or `run_sync`

— `run_sync`

is just a wrapper around `run`

and agents are always run in an async context.

Here's the same example as above, but with a synchronous dependency:

```
from dataclasses import dataclass
import httpx
from pydantic_ai import Agent, RunContext
@dataclass
class MyDeps:
api_key: str
http_client: httpx.Client # (1)!
agent = Agent(
'openai:gpt-4o',
deps_type=MyDeps,
)
@agent.system_prompt
def get_system_prompt(ctx: RunContext[MyDeps]) -> str: # (2)!
response = ctx.deps.http_client.get(
'https://example.com', headers={'Authorization': f'Bearer {ctx.deps.api_key}'}
)
response.raise_for_status()
return f'Prompt: {response.text}'
async def main():
deps = MyDeps('foobar', httpx.Client())
result = await agent.run(
'Tell me a joke.',
deps=deps,
)
print(result.data)
#> Did you hear about the toothpaste scandal? They called it Colgate.
```


- Here we use a synchronous
`httpx.Client`

instead of an asynchronous`httpx.AsyncClient`

. - To match the synchronous dependency, the system prompt function is now a plain function, not a coroutine.

*(This example is complete, it can be run "as is" — you'll need to add asyncio.run(main()) to run main)*


## Full Example

As well as system prompts, dependencies can be used in [tools](https://ai.pydantic.dev/tools/) and [result validators](https://ai.pydantic.dev/results/#result-validators-functions).

```
from dataclasses import dataclass
import httpx
from pydantic_ai import Agent, ModelRetry, RunContext
@dataclass
class MyDeps:
api_key: str
http_client: httpx.AsyncClient
agent = Agent(
'openai:gpt-4o',
deps_type=MyDeps,
)
@agent.system_prompt
async def get_system_prompt(ctx: RunContext[MyDeps]) -> str:
response = await ctx.deps.http_client.get('https://example.com')
response.raise_for_status()
return f'Prompt: {response.text}'
@agent.tool # (1)!
async def get_joke_material(ctx: RunContext[MyDeps], subject: str) -> str:
response = await ctx.deps.http_client.get(
'https://example.com#jokes',
params={'subject': subject},
headers={'Authorization': f'Bearer {ctx.deps.api_key}'},
)
response.raise_for_status()
return response.text
@agent.result_validator # (2)!
async def validate_result(ctx: RunContext[MyDeps], final_response: str) -> str:
response = await ctx.deps.http_client.post(
'https://example.com#validate',
headers={'Authorization': f'Bearer {ctx.deps.api_key}'},
params={'query': final_response},
)
if response.status_code == 400:
raise ModelRetry(f'invalid response: {response.text}')
response.raise_for_status()
return final_response
async def main():
async with httpx.AsyncClient() as client:
deps = MyDeps('foobar', client)
result = await agent.run('Tell me a joke.', deps=deps)
print(result.data)
#> Did you hear about the toothpaste scandal? They called it Colgate.
```


- To pass
`RunContext`

to a tool, use thedecorator.`tool`

`RunContext`

may optionally be passed to afunction as the first argument.`result_validator`


*(This example is complete, it can be run "as is" — you'll need to add asyncio.run(main()) to run main)*


## Overriding Dependencies

When testing agents, it's useful to be able to customise dependencies.

While this can sometimes be done by calling the agent directly within unit tests, we can also override dependencies while calling application code which in turn calls the agent.

This is done via the [ override](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.override) method on the agent.

```
from dataclasses import dataclass
import httpx
from pydantic_ai import Agent, RunContext
@dataclass
class MyDeps:
api_key: str
http_client: httpx.AsyncClient
async def system_prompt_factory(self) -> str: # (1)!
response = await self.http_client.get('https://example.com')
response.raise_for_status()
return f'Prompt: {response.text}'
joke_agent = Agent('openai:gpt-4o', deps_type=MyDeps)
@joke_agent.system_prompt
async def get_system_prompt(ctx: RunContext[MyDeps]) -> str:
return await ctx.deps.system_prompt_factory() # (2)!
async def application_code(prompt: str) -> str: # (3)!
...
...
# now deep within application code we call our agent
async with httpx.AsyncClient() as client:
app_deps = MyDeps('foobar', client)
result = await joke_agent.run(prompt, deps=app_deps) # (4)!
return result.data
```


- Define a method on the dependency to make the system prompt easier to customise.
- Call the system prompt factory from within the system prompt function.
- Application code that calls the agent, in a real application this might be an API endpoint.
- Call the agent from within the application code, in a real application this call might be deep within a call stack. Note
`app_deps`

here will NOT be used when deps are overridden.

*(This example is complete, it can be run "as is")*

```
from joke_app import MyDeps, application_code, joke_agent
class TestMyDeps(MyDeps): # (1)!
async def system_prompt_factory(self) -> str:
return 'test prompt'
async def test_application_code():
test_deps = TestMyDeps('test_key', None) # (2)!
with joke_agent.override(deps=test_deps): # (3)!
joke = await application_code('Tell me a joke.') # (4)!
assert joke.startswith('Did you hear about the toothpaste scandal?')
```


- Define a subclass of
`MyDeps`

in tests to customise the system prompt factory. - Create an instance of the test dependency, we don't need to pass an
`http_client`

here as it's not used. - Override the dependencies of the agent for the duration of the
`with`

block,`test_deps`

will be used when the agent is run. - Now we can safely call our application code, the agent will use the overridden dependencies.

## Examples

The following examples demonstrate how to use dependencies in PydanticAI:
</doc>

<a id="tools"></a>

<doc title="Function Tools" desc="Content from https://ai.pydantic.dev/tools">

---
title: Function Tools - PydanticAI
url: https://ai.pydantic.dev/tools/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Function Tools

Function tools provide a mechanism for models to retrieve extra information to help them generate a response.

They're useful when it is impractical or impossible to put all the context an agent might need into the system prompt, or when you want to make agents' behavior more deterministic or reliable by deferring some of the logic required to generate a response to another (not necessarily AI-powered) tool.

Function tools vs. RAG

Function tools are basically the "R" of RAG (Retrieval-Augmented Generation) — they augment what the model can do by letting it request extra information.

The main semantic difference between PydanticAI Tools and RAG is RAG is synonymous with vector search, while PydanticAI tools are more general-purpose. (Note: we may add support for vector search functionality in the future, particularly an API for generating embeddings. See [#58](https://github.com/pydantic/pydantic-ai/issues/58))

There are a number of ways to register tools with an agent:

- via the
decorator — for tools that need access to the agent`@agent.tool`

[context](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext) - via the
decorator — for tools that do not need access to the agent`@agent.tool_plain`

[context](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext) - via the
keyword argument to`tools`

`Agent`

which can take either plain functions, or instances of`Tool`


`@agent.tool`

is considered the default decorator since in the majority of cases tools will need access to the agent context.

Here's an example using both:

```
import random
from pydantic_ai import Agent, RunContext
agent = Agent(
'google-gla:gemini-1.5-flash', # (1)!
deps_type=str, # (2)!
system_prompt=(
"You're a dice game, you should roll the die and see if the number "
"you get back matches the user's guess. If so, tell them they're a winner. "
"Use the player's name in the response."
),
)
@agent.tool_plain # (3)!
def roll_die() -> str:
"""Roll a six-sided die and return the result."""
return str(random.randint(1, 6))
@agent.tool # (4)!
def get_player_name(ctx: RunContext[str]) -> str:
"""Get the player's name."""
return ctx.deps
dice_result = agent.run_sync('My guess is 4', deps='Anne') # (5)!
print(dice_result.data)
#> Congratulations Anne, you guessed correctly! You're a winner!
```


- This is a pretty simple task, so we can use the fast and cheap Gemini flash model.
- We pass the user's name as the dependency, to keep things simple we use just the name as a string as the dependency.
- This tool doesn't need any context, it just returns a random number. You could probably use a dynamic system prompt in this case.
- This tool needs the player's name, so it uses
`RunContext`

to access dependencies which are just the player's name in this case. - Run the agent, passing the player's name as the dependency.

*(This example is complete, it can be run "as is")*

Let's print the messages from that game to see what happened:

```
from dice_game import dice_result
print(dice_result.all_messages())
"""
[
ModelRequest(
parts=[
SystemPromptPart(
content="You're a dice game, you should roll the die and see if the number you get back matches the user's guess. If so, tell them they're a winner. Use the player's name in the response.",
dynamic_ref=None,
part_kind='system-prompt',
),
UserPromptPart(
content='My guess is 4',
timestamp=datetime.datetime(...),
part_kind='user-prompt',
),
],
kind='request',
),
ModelResponse(
parts=[
ToolCallPart(
tool_name='roll_die', args={}, tool_call_id=None, part_kind='tool-call'
)
],
model_name='gemini-1.5-flash',
timestamp=datetime.datetime(...),
kind='response',
),
ModelRequest(
parts=[
ToolReturnPart(
tool_name='roll_die',
content='4',
tool_call_id=None,
timestamp=datetime.datetime(...),
part_kind='tool-return',
)
],
kind='request',
),
ModelResponse(
parts=[
ToolCallPart(
tool_name='get_player_name',
args={},
tool_call_id=None,
part_kind='tool-call',
)
],
model_name='gemini-1.5-flash',
timestamp=datetime.datetime(...),
kind='response',
),
ModelRequest(
parts=[
ToolReturnPart(
tool_name='get_player_name',
content='Anne',
tool_call_id=None,
timestamp=datetime.datetime(...),
part_kind='tool-return',
)
],
kind='request',
),
ModelResponse(
parts=[
TextPart(
content="Congratulations Anne, you guessed correctly! You're a winner!",
part_kind='text',
)
],
model_name='gemini-1.5-flash',
timestamp=datetime.datetime(...),
kind='response',
),
]
"""
```


We can represent this with a diagram:

```
sequenceDiagram
participant Agent
participant LLM
Note over Agent: Send prompts
Agent ->> LLM: System: "You're a dice game..."<br>User: "My guess is 4"
activate LLM
Note over LLM: LLM decides to use<br>a tool
LLM ->> Agent: Call tool<br>roll_die()
deactivate LLM
activate Agent
Note over Agent: Rolls a six-sided die
Agent -->> LLM: ToolReturn<br>"4"
deactivate Agent
activate LLM
Note over LLM: LLM decides to use<br>another tool
LLM ->> Agent: Call tool<br>get_player_name()
deactivate LLM
activate Agent
Note over Agent: Retrieves player name
Agent -->> LLM: ToolReturn<br>"Anne"
deactivate Agent
activate LLM
Note over LLM: LLM constructs final response
LLM ->> Agent: ModelResponse<br>"Congratulations Anne, ..."
deactivate LLM
Note over Agent: Game session complete
```


## Registering Function Tools via kwarg

As well as using the decorators, we can register tools via the `tools`

argument to the [ Agent constructor](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.__init__). This is useful when you want to reuse tools, and can also give more fine-grained control over the tools.

```
import random
from pydantic_ai import Agent, RunContext, Tool
def roll_die() -> str:
"""Roll a six-sided die and return the result."""
return str(random.randint(1, 6))
def get_player_name(ctx: RunContext[str]) -> str:
"""Get the player's name."""
return ctx.deps
agent_a = Agent(
'google-gla:gemini-1.5-flash',
deps_type=str,
tools=[roll_die, get_player_name], # (1)!
)
agent_b = Agent(
'google-gla:gemini-1.5-flash',
deps_type=str,
tools=[ # (2)!
Tool(roll_die, takes_ctx=False),
Tool(get_player_name, takes_ctx=True),
],
)
dice_result = agent_b.run_sync('My guess is 4', deps='Anne')
print(dice_result.data)
#> Congratulations Anne, you guessed correctly! You're a winner!
```


- The simplest way to register tools via the
`Agent`

constructor is to pass a list of functions, the function signature is inspected to determine if the tool takes.`RunContext`

`agent_a`

and`agent_b`

are identical — but we can useto reuse tool definitions and give more fine-grained control over how tools are defined, e.g. setting their name or description, or using a custom`Tool`

method.`prepare`


*(This example is complete, it can be run "as is")*

## Function Tools vs. Structured Results

As the name suggests, function tools use the model's "tools" or "functions" API to let the model know what is available to call. Tools or functions are also used to define the schema(s) for structured responses, thus a model might have access to many tools, some of which call function tools while others end the run and return a result.

## Function tools and schema

Function parameters are extracted from the function signature, and all parameters except `RunContext`

are used to build the schema for that tool call.

Even better, PydanticAI extracts the docstring from functions and (thanks to [griffe](https://mkdocstrings.github.io/griffe/)) extracts parameter descriptions from the docstring and adds them to the schema.

[Griffe supports](https://mkdocstrings.github.io/griffe/reference/docstrings/#docstrings) extracting parameter descriptions from `google`

, `numpy`

, and `sphinx`

style docstrings. PydanticAI will infer the format to use based on the docstring, but you can explicitly set it using [ docstring_format](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.DocstringFormat). You can also enforce parameter requirements by setting

`require_parameter_descriptions=True`

. This will raise a [if a parameter description is missing.](https://ai.pydantic.dev/api/exceptions/#pydantic_ai.exceptions.UserError)

`UserError`

To demonstrate a tool's schema, here we use [ FunctionModel](https://ai.pydantic.dev/api/models/function/#pydantic_ai.models.function.FunctionModel) to print the schema a model would receive:

```
from pydantic_ai import Agent
from pydantic_ai.messages import ModelMessage, ModelResponse, TextPart
from pydantic_ai.models.function import AgentInfo, FunctionModel
agent = Agent()
@agent.tool_plain(docstring_format='google', require_parameter_descriptions=True)
def foobar(a: int, b: str, c: dict[str, list[float]]) -> str:
"""Get me foobar.
Args:
a: apple pie
b: banana cake
c: carrot smoothie
"""
return f'{a} {b} {c}'
def print_schema(messages: list[ModelMessage], info: AgentInfo) -> ModelResponse:
tool = info.function_tools[0]
print(tool.description)
#> Get me foobar.
print(tool.parameters_json_schema)
"""
{
'properties': {
'a': {'description': 'apple pie', 'title': 'A', 'type': 'integer'},
'b': {'description': 'banana cake', 'title': 'B', 'type': 'string'},
'c': {
'additionalProperties': {'items': {'type': 'number'}, 'type': 'array'},
'description': 'carrot smoothie',
'title': 'C',
'type': 'object',
},
},
'required': ['a', 'b', 'c'],
'type': 'object',
'additionalProperties': False,
}
"""
return ModelResponse(parts=[TextPart('foobar')])
agent.run_sync('hello', model=FunctionModel(print_schema))
```


*(This example is complete, it can be run "as is")*

The return type of tool can be anything which Pydantic can serialize to JSON as some models (e.g. Gemini) support semi-structured return values, some expect text (OpenAI) but seem to be just as good at extracting meaning from the data. If a Python object is returned and the model expects a string, the value will be serialized to JSON.

If a tool has a single parameter that can be represented as an object in JSON schema (e.g. dataclass, TypedDict, pydantic model), the schema for the tool is simplified to be just that object.

Here's an example where we use [ TestModel.last_model_request_parameters](https://ai.pydantic.dev/api/models/test/#pydantic_ai.models.test.TestModel.last_model_request_parameters) to inspect the tool schema that would be passed to the model.

```
from pydantic import BaseModel
from pydantic_ai import Agent
from pydantic_ai.models.test import TestModel
agent = Agent()
class Foobar(BaseModel):
"""This is a Foobar"""
x: int
y: str
z: float = 3.14
@agent.tool_plain
def foobar(f: Foobar) -> str:
return str(f)
test_model = TestModel()
result = agent.run_sync('hello', model=test_model)
print(result.data)
#> {"foobar":"x=0 y='a' z=3.14"}
print(test_model.last_model_request_parameters.function_tools)
"""
[
ToolDefinition(
name='foobar',
description='This is a Foobar',
parameters_json_schema={
'properties': {
'x': {'title': 'X', 'type': 'integer'},
'y': {'title': 'Y', 'type': 'string'},
'z': {'default': 3.14, 'title': 'Z', 'type': 'number'},
},
'required': ['x', 'y'],
'title': 'Foobar',
'type': 'object',
},
outer_typed_dict_key=None,
)
]
"""
```


*(This example is complete, it can be run "as is")*

## Dynamic Function tools

Tools can optionally be defined with another function: `prepare`

, which is called at each step of a run to
customize the definition of the tool passed to the model, or omit the tool completely from that step.

A `prepare`

method can be registered via the `prepare`

kwarg to any of the tool registration mechanisms:

decorator`@agent.tool`

decorator`@agent.tool_plain`

dataclass`Tool`


The `prepare`

method, should be of type [ ToolPrepareFunc](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.ToolPrepareFunc), a function which takes

[and a pre-built](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext)

`RunContext`

[, and should either return that](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.ToolDefinition)

`ToolDefinition`

`ToolDefinition`

with or without modifying it, return a new `ToolDefinition`

, or return `None`

to indicate this tools should not be registered for that step.Here's a simple `prepare`

method that only includes the tool if the value of the dependency is `42`

.

As with the previous example, we use [ TestModel](https://ai.pydantic.dev/api/models/test/#pydantic_ai.models.test.TestModel) to demonstrate the behavior without calling a real model.

```
from typing import Union
from pydantic_ai import Agent, RunContext
from pydantic_ai.tools import ToolDefinition
agent = Agent('test')
async def only_if_42(
ctx: RunContext[int], tool_def: ToolDefinition
) -> Union[ToolDefinition, None]:
if ctx.deps == 42:
return tool_def
@agent.tool(prepare=only_if_42)
def hitchhiker(ctx: RunContext[int], answer: str) -> str:
return f'{ctx.deps} {answer}'
result = agent.run_sync('testing...', deps=41)
print(result.data)
#> success (no tool calls)
result = agent.run_sync('testing...', deps=42)
print(result.data)
#> {"hitchhiker":"42 a"}
```


*(This example is complete, it can be run "as is")*

Here's a more complex example where we change the description of the `name`

parameter to based on the value of `deps`


For the sake of variation, we create this tool using the [ Tool](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.Tool) dataclass.

```
from __future__ import annotations
from typing import Literal
from pydantic_ai import Agent, RunContext
from pydantic_ai.models.test import TestModel
from pydantic_ai.tools import Tool, ToolDefinition
def greet(name: str) -> str:
return f'hello {name}'
async def prepare_greet(
ctx: RunContext[Literal['human', 'machine']], tool_def: ToolDefinition
) -> ToolDefinition | None:
d = f'Name of the {ctx.deps} to greet.'
tool_def.parameters_json_schema['properties']['name']['description'] = d
return tool_def
greet_tool = Tool(greet, prepare=prepare_greet)
test_model = TestModel()
agent = Agent(test_model, tools=[greet_tool], deps_type=Literal['human', 'machine'])
result = agent.run_sync('testing...', deps='human')
print(result.data)
#> {"greet":"hello a"}
print(test_model.last_model_request_parameters.function_tools)
"""
[
ToolDefinition(
name='greet',
description='',
parameters_json_schema={
'properties': {
'name': {
'title': 'Name',
'type': 'string',
'description': 'Name of the human to greet.',
}
},
'required': ['name'],
'type': 'object',
'additionalProperties': False,
},
outer_typed_dict_key=None,
)
]
"""
```


*(This example is complete, it can be run "as is")*
</doc>

<a id="common_tools"></a>

<doc title="Common Tools" desc="Content from https://ai.pydantic.dev/common_tools">

---
title: Common Tools - PydanticAI
url: https://ai.pydantic.dev/common_tools/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2025-02-26
---
# Common Tools

PydanticAI ships with native tools that can be used to enhance your agent's capabilities.

## DuckDuckGo Search Tool

The DuckDuckGo search tool allows you to search the web for information. It is built on top of the
[DuckDuckGo API](https://github.com/deedy5/duckduckgo_search).

### Installation

To use [ duckduckgo_search_tool](https://ai.pydantic.dev/api/common_tools/#pydantic_ai.common_tools.duckduckgo.duckduckgo_search_tool), you need to install

[with the](https://ai.pydantic.dev/install/#slim-install)

`pydantic-ai-slim`

`duckduckgo`

optional group:```
pip install 'pydantic-ai-slim[duckduckgo]'
```


```
uv add 'pydantic-ai-slim[duckduckgo]'
```


### Usage

Here's an example of how you can use the DuckDuckGo search tool with an agent:

```
from pydantic_ai import Agent
from pydantic_ai.common_tools.duckduckgo import duckduckgo_search_tool
agent = Agent(
'openai:o3-mini',
tools=[duckduckgo_search_tool()],
system_prompt='Search DuckDuckGo for the given query and return the results.',
)
result = agent.run_sync(
'Can you list the top five highest-grossing animated films of 2025?'
)
print(result.data)
"""
I looked into several sources on animated box‐office performance in 2025, and while detailed
rankings can shift as more money is tallied, multiple independent reports have already
highlighted a couple of record‐breaking shows. For example:
• Ne Zha 2 – News outlets (Variety, Wikipedia's "List of animated feature films of 2025", and others)
have reported that this Chinese title not only became the highest‑grossing animated film of 2025
but also broke records as the highest‑grossing non‑English animated film ever. One article noted
its run exceeded US$1.7 billion.
• Inside Out 2 – According to data shared on Statista and in industry news, this Pixar sequel has been
on pace to set new records (with some sources even noting it as the highest‑grossing animated film
ever, as of January 2025).
Beyond those two, some entertainment trade sites (for example, a Just Jared article titled
"Top 10 Highest-Earning Animated Films at the Box Office Revealed") have begun listing a broader
top‑10. Although full consolidated figures can sometimes differ by source and are updated daily during
a box‑office run, many of the industry trackers have begun to single out five films as the biggest
earners so far in 2025.
Unfortunately, although multiple articles discuss the "top animated films" of 2025, there isn't yet a
single, universally accepted list with final numbers that names the complete top five. (Box‑office
rankings, especially mid‑year, can be fluid as films continue to add to their totals.)
Based on what several sources note so far, the two undisputed leaders are:
1. Ne Zha 2
2. Inside Out 2
The remaining top spots (3–5) are reported by some outlets in their "Top‑10 Animated Films"
lists for 2025 but the titles and order can vary depending on the source and the exact cut‑off
date of the data. For the most up‑to‑date and detailed ranking (including the 3rd, 4th, and 5th
highest‑grossing films), I recommend checking resources like:
• Wikipedia's "List of animated feature films of 2025" page
• Box‑office tracking sites (such as Box Office Mojo or The Numbers)
• Trade articles like the one on Just Jared
To summarize with what is clear from the current reporting:
1. Ne Zha 2
2. Inside Out 2
3–5. Other animated films (yet to be definitively finalized across all reporting outlets)
If you're looking for a final, consensus list of the top five, it may be best to wait until
the 2025 year‑end box‑office tallies are in or to consult a regularly updated entertainment industry source.
Would you like help finding a current source or additional details on where to look for the complete updated list?
"""
```


## Tavily Search Tool

Info

Tavily is a paid service, but they have free credits to explore their product.

You need to [sign up for an account](https://app.tavily.com/home) and get an API key to use the Tavily search tool.

The Tavily search tool allows you to search the web for information. It is built on top of the [Tavily API](https://tavily.com/).

### Installation

To use [ tavily_search_tool](https://ai.pydantic.dev/api/common_tools/#pydantic_ai.common_tools.tavily.tavily_search_tool), you need to install

[with the](https://ai.pydantic.dev/install/#slim-install)

`pydantic-ai-slim`

`tavily`

optional group:```
pip install 'pydantic-ai-slim[tavily]'
```


```
uv add 'pydantic-ai-slim[tavily]'
```


### Usage

Here's an example of how you can use the Tavily search tool with an agent:

```
import os
from pydantic_ai.agent import Agent
from pydantic_ai.common_tools.tavily import tavily_search_tool
api_key = os.getenv('TAVILY_API_KEY')
assert api_key is not None
agent = Agent(
'openai:o3-mini',
tools=[tavily_search_tool(api_key)],
system_prompt='Search Tavily for the given query and return the results.',
)
result = agent.run_sync('Tell me the top news in the GenAI world, give me links.')
print(result.data)
"""
Here are some of the top recent news articles related to GenAI:
1. How CLEAR users can improve risk analysis with GenAI – Thomson Reuters
Read more: https://legal.thomsonreuters.com/blog/how-clear-users-can-improve-risk-analysis-with-genai/
(This article discusses how CLEAR's new GenAI-powered tool streamlines risk analysis by quickly summarizing key information from various public data sources.)
2. TELUS Digital Survey Reveals Enterprise Employees Are Entering Sensitive Data Into AI Assistants More Than You Think – FT.com
Read more: https://markets.ft.com/data/announce/detail?dockey=600-202502260645BIZWIRE_USPRX____20250226_BW490609-1
(This news piece highlights findings from a TELUS Digital survey showing that many enterprise employees use public GenAI tools and sometimes even enter sensitive data.)
3. The Essential Guide to Generative AI – Virtualization Review
Read more: https://virtualizationreview.com/Whitepapers/2025/02/SNOWFLAKE-The-Essential-Guide-to-Generative-AI.aspx
(This guide provides insights into how GenAI is revolutionizing enterprise strategies and productivity, with input from industry leaders.)
Feel free to click on the links to dive deeper into each story!
"""
```
</doc>

<a id="results"></a>

<doc title="Results" desc="Content from https://ai.pydantic.dev/results">

---
title: Results - PydanticAI
url: https://ai.pydantic.dev/results/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Results

Results are the final values returned from [running an agent](https://ai.pydantic.dev/agents/#running-agents).
The result values are wrapped in [ AgentRunResult](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.AgentRunResult) and

[so you can access other data like](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult)

`StreamedRunResult`

[usage](https://ai.pydantic.dev/api/usage/#pydantic_ai.usage.Usage)of the run and

[message history](https://ai.pydantic.dev/message-history/#accessing-messages-from-results)

Both `RunResult`

and `StreamedRunResult`

are generic in the data they wrap, so typing information about the data returned by the agent is preserved.

```
from pydantic import BaseModel
from pydantic_ai import Agent
class CityLocation(BaseModel):
city: str
country: str
agent = Agent('google-gla:gemini-1.5-flash', result_type=CityLocation)
result = agent.run_sync('Where were the olympics held in 2012?')
print(result.data)
#> city='London' country='United Kingdom'
print(result.usage())
"""
Usage(requests=1, request_tokens=57, response_tokens=8, total_tokens=65, details=None)
"""
```


*(This example is complete, it can be run "as is")*

Runs end when either a plain text response is received or the model calls a tool associated with one of the structured result types. We will add limits to make sure a run doesn't go on indefinitely, see [#70](https://github.com/pydantic/pydantic-ai/issues/70).

## Result data

When the result type is `str`

, or a union including `str`

, plain text responses are enabled on the model, and the raw text response from the model is used as the response data.

If the result type is a union with multiple members (after remove `str`

from the members), each member is registered as a separate tool with the model in order to reduce the complexity of the tool schemas and maximise the chances a model will respond correctly.

If the result type schema is not of type `"object"`

, the result type is wrapped in a single element object, so the schema of all tools registered with the model are object schemas.

Structured results (like tools) use Pydantic to build the JSON schema used for the tool, and to validate the data returned by the model.

Bring on PEP-747

Until [PEP-747](https://peps.python.org/pep-0747/) "Annotating Type Forms" lands, unions are not valid as `type`

s in Python.

When creating the agent we need to `# type: ignore`

the `result_type`

argument, and add a type hint to tell type checkers about the type of the agent.

Here's an example of returning either text or a structured value

```
from typing import Union
from pydantic import BaseModel
from pydantic_ai import Agent
class Box(BaseModel):
width: int
height: int
depth: int
units: str
agent: Agent[None, Union[Box, str]] = Agent(
'openai:gpt-4o-mini',
result_type=Union[Box, str], # type: ignore
system_prompt=(
"Extract me the dimensions of a box, "
"if you can't extract all data, ask the user to try again."
),
)
result = agent.run_sync('The box is 10x20x30')
print(result.data)
#> Please provide the units for the dimensions (e.g., cm, in, m).
result = agent.run_sync('The box is 10x20x30 cm')
print(result.data)
#> width=10 height=20 depth=30 units='cm'
```


*(This example is complete, it can be run "as is")*

Here's an example of using a union return type which registered multiple tools, and wraps non-object schemas in an object:

```
from typing import Union
from pydantic_ai import Agent
agent: Agent[None, Union[list[str], list[int]]] = Agent(
'openai:gpt-4o-mini',
result_type=Union[list[str], list[int]], # type: ignore
system_prompt='Extract either colors or sizes from the shapes provided.',
)
result = agent.run_sync('red square, blue circle, green triangle')
print(result.data)
#> ['red', 'blue', 'green']
result = agent.run_sync('square size 10, circle size 20, triangle size 30')
print(result.data)
#> [10, 20, 30]
```


*(This example is complete, it can be run "as is")*

### Result validators functions

Some validation is inconvenient or impossible to do in Pydantic validators, in particular when the validation requires IO and is asynchronous. PydanticAI provides a way to add validation functions via the [ agent.result_validator](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.result_validator) decorator.

Here's a simplified variant of the [SQL Generation example](https://ai.pydantic.dev/examples/sql-gen/):

```
from typing import Union
from fake_database import DatabaseConn, QueryError
from pydantic import BaseModel
from pydantic_ai import Agent, RunContext, ModelRetry
class Success(BaseModel):
sql_query: str
class InvalidRequest(BaseModel):
error_message: str
Response = Union[Success, InvalidRequest]
agent: Agent[DatabaseConn, Response] = Agent(
'google-gla:gemini-1.5-flash',
result_type=Response, # type: ignore
deps_type=DatabaseConn,
system_prompt='Generate PostgreSQL flavored SQL queries based on user input.',
)
@agent.result_validator
async def validate_result(ctx: RunContext[DatabaseConn], result: Response) -> Response:
if isinstance(result, InvalidRequest):
return result
try:
await ctx.deps.execute(f'EXPLAIN {result.sql_query}')
except QueryError as e:
raise ModelRetry(f'Invalid query: {e}') from e
else:
return result
result = agent.run_sync(
'get me users who were last active yesterday.', deps=DatabaseConn()
)
print(result.data)
#> sql_query='SELECT * FROM users WHERE last_active::date = today() - interval 1 day'
```


*(This example is complete, it can be run "as is")*

## Streamed Results

There two main challenges with streamed results:

- Validating structured responses before they're complete, this is achieved by "partial validation" which was recently added to Pydantic in
[pydantic/pydantic#10748](https://github.com/pydantic/pydantic/pull/10748). - When receiving a response, we don't know if it's the final response without starting to stream it and peeking at the content. PydanticAI streams just enough of the response to sniff out if it's a tool call or a result, then streams the whole thing and calls tools, or returns the stream as a
.`StreamedRunResult`


### Streaming Text

Example of streamed text result:

```
from pydantic_ai import Agent
agent = Agent('google-gla:gemini-1.5-flash') # (1)!
async def main():
async with agent.run_stream('Where does "hello world" come from?') as result: # (2)!
async for message in result.stream_text(): # (3)!
print(message)
#> The first known
#> The first known use of "hello,
#> The first known use of "hello, world" was in
#> The first known use of "hello, world" was in a 1974 textbook
#> The first known use of "hello, world" was in a 1974 textbook about the C
#> The first known use of "hello, world" was in a 1974 textbook about the C programming language.
```


- Streaming works with the standard
class, and doesn't require any special setup, just a model that supports streaming (currently all models support streaming).`Agent`

- The
method is used to start a streamed run, this method returns a context manager so the connection can be closed when the stream completes.`Agent.run_stream()`

- Each item yield by
is the complete text response, extended as new data is received.`StreamedRunResult.stream_text()`


*(This example is complete, it can be run "as is" — you'll need to add asyncio.run(main()) to run main)*


We can also stream text as deltas rather than the entire text in each item:

```
from pydantic_ai import Agent
agent = Agent('google-gla:gemini-1.5-flash')
async def main():
async with agent.run_stream('Where does "hello world" come from?') as result:
async for message in result.stream_text(delta=True): # (1)!
print(message)
#> The first known
#> use of "hello,
#> world" was in
#> a 1974 textbook
#> about the C
#> programming language.
```


will error if the response is not text`stream_text`


*(This example is complete, it can be run "as is" — you'll need to add asyncio.run(main()) to run main)*


Result message not included in `messages`


The final result message will **NOT** be added to result messages if you use `.stream_text(delta=True)`

,
see [Messages and chat history](https://ai.pydantic.dev/message-history/) for more information.

### Streaming Structured Responses

Not all types are supported with partial validation in Pydantic, see [pydantic/pydantic#10748](https://github.com/pydantic/pydantic/pull/10748), generally for model-like structures it's currently best to use `TypeDict`

.

Here's an example of streaming a use profile as it's built:

```
from datetime import date
from typing_extensions import TypedDict
from pydantic_ai import Agent
class UserProfile(TypedDict, total=False):
name: str
dob: date
bio: str
agent = Agent(
'openai:gpt-4o',
result_type=UserProfile,
system_prompt='Extract a user profile from the input',
)
async def main():
user_input = 'My name is Ben, I was born on January 28th 1990, I like the chain the dog and the pyramid.'
async with agent.run_stream(user_input) as result:
async for profile in result.stream():
print(profile)
#> {'name': 'Ben'}
#> {'name': 'Ben'}
#> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes'}
#> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the '}
#> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyr'}
#> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyramid'}
#> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyramid'}
```


*(This example is complete, it can be run "as is" — you'll need to add asyncio.run(main()) to run main)*


If you want fine-grained control of validation, particularly catching validation errors, you can use the following pattern:

```
from datetime import date
from pydantic import ValidationError
from typing_extensions import TypedDict
from pydantic_ai import Agent
class UserProfile(TypedDict, total=False):
name: str
dob: date
bio: str
agent = Agent('openai:gpt-4o', result_type=UserProfile)
async def main():
user_input = 'My name is Ben, I was born on January 28th 1990, I like the chain the dog and the pyramid.'
async with agent.run_stream(user_input) as result:
async for message, last in result.stream_structured(debounce_by=0.01): # (1)!
try:
profile = await result.validate_structured_result( # (2)!
message,
allow_partial=not last,
)
except ValidationError:
continue
print(profile)
#> {'name': 'Ben'}
#> {'name': 'Ben'}
#> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes'}
#> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the '}
#> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyr'}
#> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyramid'}
#> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyramid'}
```


streams the data as`stream_structured`

objects, thus iteration can't fail with a`ModelResponse`

`ValidationError`

.validates the data,`validate_structured_result`

`allow_partial=True`

enables pydantic's.`experimental_allow_partial`

flag on`TypeAdapter`


*(This example is complete, it can be run "as is" — you'll need to add asyncio.run(main()) to run main)*


## Examples

The following examples demonstrate how to use streamed responses in PydanticAI:
</doc>

<a id="message-history"></a>

<doc title="Messages and chat history" desc="Content from https://ai.pydantic.dev/message-history">

---
title: Messages and chat history - PydanticAI
url: https://ai.pydantic.dev/message-history/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Messages and chat history

PydanticAI provides access to messages exchanged during an agent run. These messages can be used both to continue a coherent conversation, and to understand how an agent performed.

### Accessing Messages from Results

After running an agent, you can access the messages exchanged during that run from the `result`

object.

Both [ RunResult](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.AgentRunResult)
(returned by

[,](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run)

`Agent.run`

[) and](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_sync)

`Agent.run_sync`

[(returned by](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult)

`StreamedRunResult`

[) have the following methods:](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_stream)

`Agent.run_stream`

: returns all messages, including messages from prior runs. There's also a variant that returns JSON bytes,`all_messages()`

.`all_messages_json()`

: returns only the messages from the current run. There's also a variant that returns JSON bytes,`new_messages()`

.`new_messages_json()`


StreamedRunResult and complete messages

On [ StreamedRunResult](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult), the messages returned from these methods will only include the final result message once the stream has finished.

E.g. you've awaited one of the following coroutines:

`StreamedRunResult.stream()`

`StreamedRunResult.stream_text()`

`StreamedRunResult.stream_structured()`

`StreamedRunResult.get_data()`


**Note:** The final result message will NOT be added to result messages if you use [ .stream_text(delta=True)](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult.stream_text) since in this case the result content is never built as one string.

Example of accessing methods on a [ RunResult](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.AgentRunResult) :

```
from pydantic_ai import Agent
agent = Agent('openai:gpt-4o', system_prompt='Be a helpful assistant.')
result = agent.run_sync('Tell me a joke.')
print(result.data)
#> Did you hear about the toothpaste scandal? They called it Colgate.
# all messages from the run
print(result.all_messages())
"""
[
ModelRequest(
parts=[
SystemPromptPart(
content='Be a helpful assistant.',
dynamic_ref=None,
part_kind='system-prompt',
),
UserPromptPart(
content='Tell me a joke.',
timestamp=datetime.datetime(...),
part_kind='user-prompt',
),
],
kind='request',
),
ModelResponse(
parts=[
TextPart(
content='Did you hear about the toothpaste scandal? They called it Colgate.',
part_kind='text',
)
],
model_name='gpt-4o',
timestamp=datetime.datetime(...),
kind='response',
),
]
"""
```


*(This example is complete, it can be run "as is")*

Example of accessing methods on a [ StreamedRunResult](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult) :

```
from pydantic_ai import Agent
agent = Agent('openai:gpt-4o', system_prompt='Be a helpful assistant.')
async def main():
async with agent.run_stream('Tell me a joke.') as result:
# incomplete messages before the stream finishes
print(result.all_messages())
"""
[
ModelRequest(
parts=[
SystemPromptPart(
content='Be a helpful assistant.',
dynamic_ref=None,
part_kind='system-prompt',
),
UserPromptPart(
content='Tell me a joke.',
timestamp=datetime.datetime(...),
part_kind='user-prompt',
),
],
kind='request',
)
]
"""
async for text in result.stream_text():
print(text)
#> Did you hear
#> Did you hear about the toothpaste
#> Did you hear about the toothpaste scandal? They called
#> Did you hear about the toothpaste scandal? They called it Colgate.
# complete messages once the stream finishes
print(result.all_messages())
"""
[
ModelRequest(
parts=[
SystemPromptPart(
content='Be a helpful assistant.',
dynamic_ref=None,
part_kind='system-prompt',
),
UserPromptPart(
content='Tell me a joke.',
timestamp=datetime.datetime(...),
part_kind='user-prompt',
),
],
kind='request',
),
ModelResponse(
parts=[
TextPart(
content='Did you hear about the toothpaste scandal? They called it Colgate.',
part_kind='text',
)
],
model_name='gpt-4o',
timestamp=datetime.datetime(...),
kind='response',
),
]
"""
```


*(This example is complete, it can be run "as is" — you'll need to add*

`asyncio.run(main())`

to run `main`

)### Using Messages as Input for Further Agent Runs

The primary use of message histories in PydanticAI is to maintain context across multiple agent runs.

To use existing messages in a run, pass them to the `message_history`

parameter of
[ Agent.run](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run),

[or](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_sync)

`Agent.run_sync`

[.](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_stream)

`Agent.run_stream`

If `message_history`

is set and not empty, a new system prompt is not generated — we assume the existing message history includes a system prompt.

```
from pydantic_ai import Agent
agent = Agent('openai:gpt-4o', system_prompt='Be a helpful assistant.')
result1 = agent.run_sync('Tell me a joke.')
print(result1.data)
#> Did you hear about the toothpaste scandal? They called it Colgate.
result2 = agent.run_sync('Explain?', message_history=result1.new_messages())
print(result2.data)
#> This is an excellent joke invented by Samuel Colvin, it needs no explanation.
print(result2.all_messages())
"""
[
ModelRequest(
parts=[
SystemPromptPart(
content='Be a helpful assistant.',
dynamic_ref=None,
part_kind='system-prompt',
),
UserPromptPart(
content='Tell me a joke.',
timestamp=datetime.datetime(...),
part_kind='user-prompt',
),
],
kind='request',
),
ModelResponse(
parts=[
TextPart(
content='Did you hear about the toothpaste scandal? They called it Colgate.',
part_kind='text',
)
],
model_name='gpt-4o',
timestamp=datetime.datetime(...),
kind='response',
),
ModelRequest(
parts=[
UserPromptPart(
content='Explain?',
timestamp=datetime.datetime(...),
part_kind='user-prompt',
)
],
kind='request',
),
ModelResponse(
parts=[
TextPart(
content='This is an excellent joke invented by Samuel Colvin, it needs no explanation.',
part_kind='text',
)
],
model_name='gpt-4o',
timestamp=datetime.datetime(...),
kind='response',
),
]
"""
```


*(This example is complete, it can be run "as is")*

## Storing and loading messages (to JSON)

While maintaining conversation state in memory is enough for many applications, often times you may want to store the messages history of an agent run on disk or in a database. This might be for evals, for sharing data between Python and JavaScript/TypeScript, or any number of other use cases.

The intended way to do this is using a `TypeAdapter`

.

We export [ ModelMessagesTypeAdapter](https://ai.pydantic.dev/api/messages/#pydantic_ai.messages.ModelMessagesTypeAdapter) that can be used for this, or you can create your own.

Here's an example showing how:

```
from pydantic_core import to_jsonable_python
from pydantic_ai import Agent
from pydantic_ai.messages import ModelMessagesTypeAdapter # (1)!
agent = Agent('openai:gpt-4o', system_prompt='Be a helpful assistant.')
result1 = agent.run_sync('Tell me a joke.')
history_step_1 = result1.all_messages()
as_python_objects = to_jsonable_python(history_step_1) # (2)!
same_history_as_step_1 = ModelMessagesTypeAdapter.validate_python(as_python_objects)
result2 = agent.run_sync( # (3)!
'Tell me a different joke.', message_history=same_history_as_step_1
)
```


- Alternatively, you can create a
`TypeAdapter`

from scratch:`from pydantic import TypeAdapter from pydantic_ai.messages import ModelMessage ModelMessagesTypeAdapter = TypeAdapter(list[ModelMessage])`

- Alternatively you can serialize to/from JSON directly:
`from pydantic_core import to_json ... as_json_objects = to_json(history_step_1) same_history_as_step_1 = ModelMessagesTypeAdapter.validate_json(as_json_objects)`

- You can now continue the conversation with history
`same_history_as_step_1`

despite creating a new agent run.

*(This example is complete, it can be run "as is")*

## Other ways of using messages

Since messages are defined by simple dataclasses, you can manually create and manipulate, e.g. for testing.

The message format is independent of the model used, so you can use messages in different agents, or the same agent with different models.

In the example below, we reuse the message from the first agent run, which uses the `openai:gpt-4o`

model, in a second agent run using the `google-gla:gemini-1.5-pro`

model.

```
from pydantic_ai import Agent
agent = Agent('openai:gpt-4o', system_prompt='Be a helpful assistant.')
result1 = agent.run_sync('Tell me a joke.')
print(result1.data)
#> Did you hear about the toothpaste scandal? They called it Colgate.
result2 = agent.run_sync(
'Explain?',
model='google-gla:gemini-1.5-pro',
message_history=result1.new_messages(),
)
print(result2.data)
#> This is an excellent joke invented by Samuel Colvin, it needs no explanation.
print(result2.all_messages())
"""
[
ModelRequest(
parts=[
SystemPromptPart(
content='Be a helpful assistant.',
dynamic_ref=None,
part_kind='system-prompt',
),
UserPromptPart(
content='Tell me a joke.',
timestamp=datetime.datetime(...),
part_kind='user-prompt',
),
],
kind='request',
),
ModelResponse(
parts=[
TextPart(
content='Did you hear about the toothpaste scandal? They called it Colgate.',
part_kind='text',
)
],
model_name='gpt-4o',
timestamp=datetime.datetime(...),
kind='response',
),
ModelRequest(
parts=[
UserPromptPart(
content='Explain?',
timestamp=datetime.datetime(...),
part_kind='user-prompt',
)
],
kind='request',
),
ModelResponse(
parts=[
TextPart(
content='This is an excellent joke invented by Samuel Colvin, it needs no explanation.',
part_kind='text',
)
],
model_name='gemini-1.5-pro',
timestamp=datetime.datetime(...),
kind='response',
),
]
"""
```


## Examples

For a more complete example of using messages in conversations, see the [chat app](https://ai.pydantic.dev/examples/chat-app/) example.
</doc>

<a id="testing-evals"></a>

<doc title="Testing and Evals" desc="Content from https://ai.pydantic.dev/testing-evals">

---
title: Testing and Evals - PydanticAI
url: https://ai.pydantic.dev/testing-evals/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Testing and Evals

With PydanticAI and LLM integrations in general, there are two distinct kinds of test:

**Unit tests**— tests of your application code, and whether it's behaving correctly**Evals**— tests of the LLM, and how good or bad its responses are

For the most part, these two kinds of tests have pretty separate goals and considerations.

## Unit tests

Unit tests for PydanticAI code are just like unit tests for any other Python code.

Because for the most part they're nothing new, we have pretty well established tools and patterns for writing and running these kinds of tests.

Unless you're really sure you know better, you'll probably want to follow roughly this strategy:

- Use
as your test harness`pytest`

- If you find yourself typing out long assertions, use
[inline-snapshot](https://15r10nk.github.io/inline-snapshot/latest/) - Similarly,
[dirty-equals](https://dirty-equals.helpmanual.io/latest/)can be useful for comparing large data structures - Use
or`TestModel`

in place of your actual model to avoid the usage, latency and variability of real LLM calls`FunctionModel`

- Use
to replace your model inside your application logic`Agent.override`

- Set
globally to block any requests from being made to non-test models accidentally`ALLOW_MODEL_REQUESTS=False`


### Unit testing with `TestModel`


The simplest and fastest way to exercise most of your application code is using [ TestModel](https://ai.pydantic.dev/api/models/test/#pydantic_ai.models.test.TestModel), this will (by default) call all tools in the agent, then return either plain text or a structured response depending on the return type of the agent.

`TestModel`

is not magic

The "clever" (but not too clever) part of `TestModel`

is that it will attempt to generate valid structured data for [function tools](https://ai.pydantic.dev/tools/) and [result types](https://ai.pydantic.dev/results/#structured-result-validation) based on the schema of the registered tools.

There's no ML or AI in `TestModel`

, it's just plain old procedural Python code that tries to generate data that satisfies the JSON schema of a tool.

The resulting data won't look pretty or relevant, but it should pass Pydantic's validation in most cases.
If you want something more sophisticated, use [ FunctionModel](https://ai.pydantic.dev/api/models/function/#pydantic_ai.models.function.FunctionModel) and write your own data generation logic.

Let's write unit tests for the following application code:

```
import asyncio
from datetime import date
from pydantic_ai import Agent, RunContext
from fake_database import DatabaseConn # (1)!
from weather_service import WeatherService # (2)!
weather_agent = Agent(
'openai:gpt-4o',
deps_type=WeatherService,
system_prompt='Providing a weather forecast at the locations the user provides.',
)
@weather_agent.tool
def weather_forecast(
ctx: RunContext[WeatherService], location: str, forecast_date: date
) -> str:
if forecast_date < date.today(): # (3)!
return ctx.deps.get_historic_weather(location, forecast_date)
else:
return ctx.deps.get_forecast(location, forecast_date)
async def run_weather_forecast( # (4)!
user_prompts: list[tuple[str, int]], conn: DatabaseConn
):
"""Run weather forecast for a list of user prompts and save."""
async with WeatherService() as weather_service:
async def run_forecast(prompt: str, user_id: int):
result = await weather_agent.run(prompt, deps=weather_service)
await conn.store_forecast(user_id, result.data)
# run all prompts in parallel
await asyncio.gather(
*(run_forecast(prompt, user_id) for (prompt, user_id) in user_prompts)
)
```


`DatabaseConn`

is a class that holds a database connection`WeatherService`

has methods to get weather forecasts and historic data about the weather- We need to call a different endpoint depending on whether the date is in the past or the future, you'll see why this nuance is important below
- This function is the code we want to test, together with the agent it uses

Here we have a function that takes a list of `(user_prompt, user_id)`

tuples, gets a weather forecast for each prompt, and stores the result in the database.

**We want to test this code without having to mock certain objects or modify our code so we can pass test objects in.**

Here's how we would write tests using [ TestModel](https://ai.pydantic.dev/api/models/test/#pydantic_ai.models.test.TestModel):

```
from datetime import timezone
import pytest
from dirty_equals import IsNow
from pydantic_ai import models, capture_run_messages
from pydantic_ai.models.test import TestModel
from pydantic_ai.messages import (
ModelResponse,
SystemPromptPart,
TextPart,
ToolCallPart,
ToolReturnPart,
UserPromptPart,
ModelRequest,
)
from fake_database import DatabaseConn
from weather_app import run_weather_forecast, weather_agent
pytestmark = pytest.mark.anyio # (1)!
models.ALLOW_MODEL_REQUESTS = False # (2)!
async def test_forecast():
conn = DatabaseConn()
user_id = 1
with capture_run_messages() as messages:
with weather_agent.override(model=TestModel()): # (3)!
prompt = 'What will the weather be like in London on 2024-11-28?'
await run_weather_forecast([(prompt, user_id)], conn) # (4)!
forecast = await conn.get_forecast(user_id)
assert forecast == '{"weather_forecast":"Sunny with a chance of rain"}' # (5)!
assert messages == [ # (6)!
ModelRequest(
parts=[
SystemPromptPart(
content='Providing a weather forecast at the locations the user provides.',
),
UserPromptPart(
content='What will the weather be like in London on 2024-11-28?',
timestamp=IsNow(tz=timezone.utc), # (7)!
),
]
),
ModelResponse(
parts=[
ToolCallPart(
tool_name='weather_forecast',
args={
'location': 'a',
'forecast_date': '2024-01-01', # (8)!
},
tool_call_id=None,
)
],
model_name='test',
timestamp=IsNow(tz=timezone.utc),
),
ModelRequest(
parts=[
ToolReturnPart(
tool_name='weather_forecast',
content='Sunny with a chance of rain',
tool_call_id=None,
timestamp=IsNow(tz=timezone.utc),
),
],
),
ModelResponse(
parts=[
TextPart(
content='{"weather_forecast":"Sunny with a chance of rain"}',
)
],
model_name='test',
timestamp=IsNow(tz=timezone.utc),
),
]
```


- We're using
[anyio](https://anyio.readthedocs.io/en/stable/)to run async tests. - This is a safety measure to make sure we don't accidentally make real requests to the LLM while testing, see
for more details.`ALLOW_MODEL_REQUESTS`

- We're using
to replace the agent's model with`Agent.override`

, the nice thing about`TestModel`

`override`

is that we can replace the model inside agent without needing access to the agent`run*`

methods call site. - Now we call the function we want to test inside the
`override`

context manager. - But default,
`TestModel`

will return a JSON string summarising the tools calls made, and what was returned. If you wanted to customise the response to something more closely aligned with the domain, you could addwhen defining`custom_result_text='Sunny'`

`TestModel`

. - So far we don't actually know which tools were called and with which values, we can use
to inspect messages from the most recent run and assert the exchange between the agent and the model occurred as expected.`capture_run_messages`

- The
helper allows us to use declarative asserts even with data which will contain timestamps that change over time.`IsNow`

`TestModel`

isn't doing anything clever to extract values from the prompt, so these values are hardcoded.

### Unit testing with `FunctionModel`


The above tests are a great start, but careful readers will notice that the `WeatherService.get_forecast`

is never called since `TestModel`

calls `weather_forecast`

with a date in the past.

To fully exercise `weather_forecast`

, we need to use [ FunctionModel](https://ai.pydantic.dev/api/models/function/#pydantic_ai.models.function.FunctionModel) to customise how the tools is called.

Here's an example of using `FunctionModel`

to test the `weather_forecast`

tool with custom inputs

```
import re
import pytest
from pydantic_ai import models
from pydantic_ai.messages import (
ModelMessage,
ModelResponse,
TextPart,
ToolCallPart,
)
from pydantic_ai.models.function import AgentInfo, FunctionModel
from fake_database import DatabaseConn
from weather_app import run_weather_forecast, weather_agent
pytestmark = pytest.mark.anyio
models.ALLOW_MODEL_REQUESTS = False
def call_weather_forecast( # (1)!
messages: list[ModelMessage], info: AgentInfo
) -> ModelResponse:
if len(messages) == 1:
# first call, call the weather forecast tool
user_prompt = messages[0].parts[-1]
m = re.search(r'\d{4}-\d{2}-\d{2}', user_prompt.content)
assert m is not None
args = {'location': 'London', 'forecast_date': m.group()} # (2)!
return ModelResponse(parts=[ToolCallPart('weather_forecast', args)])
else:
# second call, return the forecast
msg = messages[-1].parts[0]
assert msg.part_kind == 'tool-return'
return ModelResponse(parts=[TextPart(f'The forecast is: {msg.content}')])
async def test_forecast_future():
conn = DatabaseConn()
user_id = 1
with weather_agent.override(model=FunctionModel(call_weather_forecast)): # (3)!
prompt = 'What will the weather be like in London on 2032-01-01?'
await run_weather_forecast([(prompt, user_id)], conn)
forecast = await conn.get_forecast(user_id)
assert forecast == 'The forecast is: Rainy with a chance of sun'
```


- We define a function
`call_weather_forecast`

that will be called by`FunctionModel`

in place of the LLM, this function has access to the list ofs that make up the run, and`ModelMessage`

which contains information about the agent and the function tools and return tools.`AgentInfo`

- Our function is slightly intelligent in that it tries to extract a date from the prompt, but just hard codes the location.
- We use
to replace the agent's model with our custom function.`FunctionModel`


### Overriding model via pytest fixtures

If you're writing lots of tests that all require model to be overridden, you can use [pytest fixtures](https://docs.pytest.org/en/6.2.x/fixture.html) to override the model with [ TestModel](https://ai.pydantic.dev/api/models/test/#pydantic_ai.models.test.TestModel) or

[in a reusable way.](https://ai.pydantic.dev/api/models/function/#pydantic_ai.models.function.FunctionModel)

`FunctionModel`

Here's an example of a fixture that overrides the model with `TestModel`

:

```
import pytest
from weather_app import weather_agent
from pydantic_ai.models.test import TestModel
@pytest.fixture
def override_weather_agent():
with weather_agent.override(model=TestModel()):
yield
async def test_forecast(override_weather_agent: None):
...
# test code here
```


## Evals

"Evals" refers to evaluating a models performance for a specific application.

Warning

Unlike unit tests, evals are an emerging art/science; anyone who claims to know for sure exactly how your evals should be defined can safely be ignored.

Evals are generally more like benchmarks than unit tests, they never "pass" although they do "fail"; you care mostly about how they change over time.

Since evals need to be run against the real model, then can be slow and expensive to run, you generally won't want to run them in CI for every commit.

### Measuring performance

The hardest part of evals is measuring how well the model has performed.

In some cases (e.g. an agent to generate SQL) there are simple, easy to run tests that can be used to measure performance (e.g. is the SQL valid? Does it return the right results? Does it return just the right results?).

In other cases (e.g. an agent that gives advice on quitting smoking) it can be very hard or impossible to make quantitative measures of performance — in the smoking case you'd really need to run a double-blind trial over months, then wait 40 years and observe health outcomes to know if changes to your prompt were an improvement.

There are a few different strategies you can use to measure performance:

**End to end, self-contained tests**— like the SQL example, we can test the final result of the agent near-instantly**Synthetic self-contained tests**— writing unit test style checks that the output is as expected, checks like`'chewing gum' in response`

, while these checks might seem simplistic they can be helpful, one nice characteristic is that it's easy to tell what's wrong when they fail**LLMs evaluating LLMs**— using another models, or even the same model with a different prompt to evaluate the performance of the agent (like when the class marks each other's homework because the teacher has a hangover), while the downsides and complexities of this approach are obvious, some think it can be a useful tool in the right circumstances**Evals in prod**— measuring the end results of the agent in production, then creating a quantitative measure of performance, so you can easily measure changes over time as you change the prompt or model used,[logfire](https://ai.pydantic.dev/logfire/)can be extremely useful in this case since you can write a custom query to measure the performance of your agent

### System prompt customization

The system prompt is the developer's primary tool in controlling an agent's behavior, so it's often useful to be able to customise the system prompt and see how performance changes. This is particularly relevant when the system prompt contains a list of examples and you want to understand how changing that list affects the model's performance.

Let's assume we have the following app for running SQL generated from a user prompt (this examples omits a lot of details for brevity, see the [SQL gen](https://ai.pydantic.dev/examples/sql-gen/) example for a more complete code):

```
import json
from pathlib import Path
from typing import Union
from pydantic_ai import Agent, RunContext
from fake_database import DatabaseConn
class SqlSystemPrompt: # (1)!
def __init__(
self, examples: Union[list[dict[str, str]], None] = None, db: str = 'PostgreSQL'
):
if examples is None:
# if examples aren't provided, load them from file, this is the default
with Path('examples.json').open('rb') as f:
self.examples = json.load(f)
else:
self.examples = examples
self.db = db
def build_prompt(self) -> str: # (2)!
return f"""\
Given the following {self.db} table of records, your job is to
write a SQL query that suits the user's request.
Database schema:
CREATE TABLE records (
...
);
{''.join(self.format_example(example) for example in self.examples)}
"""
@staticmethod
def format_example(example: dict[str, str]) -> str: # (3)!
return f"""\
<example>
<request>{example['request']}</request>
<sql>{example['sql']}</sql>
</example>
"""
sql_agent = Agent(
'google-gla:gemini-1.5-flash',
deps_type=SqlSystemPrompt,
)
@sql_agent.system_prompt
async def system_prompt(ctx: RunContext[SqlSystemPrompt]) -> str:
return ctx.deps.build_prompt()
async def user_search(user_prompt: str) -> list[dict[str, str]]:
"""Search the database based on the user's prompts."""
... # (4)!
result = await sql_agent.run(user_prompt, deps=SqlSystemPrompt())
conn = DatabaseConn()
return await conn.execute(result.data)
```


- The
`SqlSystemPrompt`

class is used to build the system prompt, it can be customised with a list of examples and a database type. We implement this as a separate class passed as a dep to the agent so we can override both the inputs and the logic during evals via dependency injection. - The
`build_prompt`

method constructs the system prompt from the examples and the database type. - Some people think that LLMs are more likely to generate good responses if examples are formatted as XML as it's to identify the end of a string, see
[#93](https://github.com/pydantic/pydantic-ai/issues/93). - In reality, you would have more logic here, making it impractical to run the agent independently of the wider application.

`examples.json`

looks something like this:

```
request: show me error records with the tag "foobar"
response: SELECT * FROM records WHERE level = 'error' and 'foobar' = ANY(tags)
```


```
{
"examples": [
{
"request": "Show me all records",
"sql": "SELECT * FROM records;"
},
{
"request": "Show me all records from 2021",
"sql": "SELECT * FROM records WHERE date_trunc('year', date) = '2021-01-01';"
},
{
"request": "show me error records with the tag 'foobar'",
"sql": "SELECT * FROM records WHERE level = 'error' and 'foobar' = ANY(tags);"
},
...
]
}
```


Now we want a way to quantify the success of the SQL generation so we can judge how changes to the agent affect its performance.

We can use [ Agent.override](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.override) to replace the system prompt with a custom one that uses a subset of examples, and then run the application code (in this case

`user_search`

). We also run the actual SQL from the examples and compare the "correct" result from the example SQL to the SQL generated by the agent. (We compare the results of running the SQL rather than the SQL itself since the SQL might be semantically equivalent but written in a different way).To get a quantitative measure of performance, we assign points to each run as follows:

**-100**points if the generated SQL is invalid**-1**point for each row returned by the agent (so returning lots of results is discouraged)**+5**points for each row returned by the agent that matches the expected result

We use 5-fold cross-validation to judge the performance of the agent using our existing set of examples.

```
import json
import statistics
from pathlib import Path
from itertools import chain
from fake_database import DatabaseConn, QueryError
from sql_app import sql_agent, SqlSystemPrompt, user_search
async def main():
with Path('examples.json').open('rb') as f:
examples = json.load(f)
# split examples into 5 folds
fold_size = len(examples) // 5
folds = [examples[i : i + fold_size] for i in range(0, len(examples), fold_size)]
conn = DatabaseConn()
scores = []
for i, fold in enumerate(folds):
fold_score = 0
# build all other folds into a list of examples
other_folds = list(chain(*(f for j, f in enumerate(folds) if j != i)))
# create a new system prompt with the other fold examples
system_prompt = SqlSystemPrompt(examples=other_folds)
# override the system prompt with the new one
with sql_agent.override(deps=system_prompt):
for case in fold:
try:
agent_results = await user_search(case['request'])
except QueryError as e:
print(f'Fold {i} {case}: {e}')
fold_score -= 100
else:
# get the expected results using the SQL from this case
expected_results = await conn.execute(case['sql'])
agent_ids = [r['id'] for r in agent_results]
# each returned value has a score of -1
fold_score -= len(agent_ids)
expected_ids = {r['id'] for r in expected_results}
# each return value that matches the expected value has a score of 3
fold_score += 5 * len(set(agent_ids) & expected_ids)
scores.append(fold_score)
overall_score = statistics.mean(scores)
print(f'Overall score: {overall_score:0.2f}')
#> Overall score: 12.00
```


We can then change the prompt, the model, or the examples and see how the score changes over time.
</doc>

<a id="logfire"></a>

<doc title="Debugging and Monitoring" desc="Content from https://ai.pydantic.dev/logfire">

---
title: Debugging and Monitoring - PydanticAI
url: https://ai.pydantic.dev/logfire/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Debugging and Monitoring

Applications that use LLMs have some challenges that are well known and understood: LLMs are **slow**, **unreliable** and **expensive**.

These applications also have some challenges that most developers have encountered much less often: LLMs are **fickle** and **non-deterministic**. Subtle changes in a prompt can completely change a model's performance, and there's no `EXPLAIN`

query you can run to understand why.

Warning

From a software engineers point of view, you can think of LLMs as the worst database you've ever heard of, but worse.

If LLMs weren't so bloody useful, we'd never touch them.

To build successful applications with LLMs, we need new tools to understand both model performance, and the behavior of applications that rely on them.

LLM Observability tools that just let you understand how your model is performing are useless: making API calls to an LLM is easy, it's building that into an application that's hard.

## Pydantic Logfire

[Pydantic Logfire](https://pydantic.dev/logfire) is an observability platform developed by the team who created and maintain Pydantic and PydanticAI. Logfire aims to let you understand your entire application: Gen AI, classic predictive AI, HTTP traffic, database queries and everything else a modern application needs.

Pydantic Logfire is a commercial product

Logfire is a commercially supported, hosted platform with an extremely generous and perpetual [free tier](https://pydantic.dev/pricing/).
You can sign up and start using Logfire in a couple of minutes.

PydanticAI has built-in (but optional) support for Logfire. That means if the `logfire`

package is installed and configured and agent instrumentation is enabled then detailed information about agent runs is sent to Logfire. Otherwise there's virtually no overhead and nothing is sent.

Here's an example showing details of running the [Weather Agent](https://ai.pydantic.dev/examples/weather-agent/) in Logfire:

## Using Logfire

To use logfire, you'll need a logfire [account](https://logfire.pydantic.dev), and logfire installed:

```
pip install 'pydantic-ai[logfire]'
```


```
uv add 'pydantic-ai[logfire]'
```


Then authenticate your local environment with logfire:

```
logfire auth
```


```
uv run logfire auth
```


And configure a project to send data to:

```
logfire projects new
```


```
uv run logfire projects new
```


(Or use an existing project with `logfire projects use`

)

Then add logfire to your code:

```
import logfire
logfire.configure()
```


and enable instrumentation in your agent:

```
from pydantic_ai import Agent
agent = Agent('openai:gpt-4o', instrument=True)
# or instrument all agents to avoid needing to add `instrument=True` to each agent:
Agent.instrument_all()
```


The [logfire documentation](https://logfire.pydantic.dev/docs/) has more details on how to use logfire,
including how to instrument other libraries like [Pydantic](https://logfire.pydantic.dev/docs/integrations/pydantic/),
[HTTPX](https://logfire.pydantic.dev/docs/integrations/http-clients/httpx/) and [FastAPI](https://logfire.pydantic.dev/docs/integrations/web-frameworks/fastapi/).

Since Logfire is built on [OpenTelemetry](https://opentelemetry.io/), you can use the Logfire Python SDK to send data to any OpenTelemetry collector.

Once you have logfire set up, there are two primary ways it can help you understand your application:

**Debugging**— Using the live view to see what's happening in your application in real-time.**Monitoring**— Using SQL and dashboards to observe the behavior of your application, Logfire is effectively a SQL database that stores information about how your application is running.

### Debugging

To demonstrate how Logfire can let you visualise the flow of a PydanticAI run, here's the view you get from Logfire while running the [chat app examples](https://ai.pydantic.dev/examples/chat-app/):

### Monitoring Performance

We can also query data with SQL in Logfire to monitor the performance of an application. Here's a real world example of using Logfire to monitor PydanticAI runs inside Logfire itself:

### Monitoring HTTPX Requests

In order to monitor HTTPX requests made by models, you can use `logfire`

's [HTTPX](https://logfire.pydantic.dev/docs/integrations/http-clients/httpx/) integration.

Instrumentation is as easy as adding the following three lines to your application:

```
import logfire
logfire.configure()
logfire.instrument_httpx(capture_all=True) # (1)!
```


- See the
[logfire docs](https://logfire.pydantic.dev/docs/integrations/http-clients/httpx/)for more`httpx`

instrumentation details.

In particular, this can help you to trace specific requests, responses, and headers:

```
import logfire
from pydantic_ai import Agent
logfire.configure()
logfire.instrument_httpx(capture_all=True) # (1)!
agent = Agent('openai:gpt-4o', instrument=True)
result = agent.run_sync('What is the capital of France?')
print(result.data)
# > The capital of France is Paris.
```


- Capture all of headers, request body, and response body.

Tip

`httpx`

instrumentation might be of particular utility if you're using a custom `httpx`

client in your model in order to get insights into your custom requests.

## Using OpenTelemetry

PydanticAI's instrumentation uses [OpenTelemetry](https://opentelemetry.io/), which Logfire is based on. You can use the Logfire SDK completely freely and follow the [Alternative backends](https://logfire.pydantic.dev/docs/how-to-guides/alternative-backends/) guide to send the data to any OpenTelemetry collector, such as a self-hosted Jaeger instance. Or you can skip Logfire entirely and use the OpenTelemetry Python SDK directly.

## Data format

PydanticAI follows the [OpenTelemetry Semantic Conventions for Generative AI systems](https://opentelemetry.io/docs/specs/semconv/gen-ai/), with one caveat. The semantic conventions specify that messages should be captured as individual events (logs) that are children of the request span. By default, PydanticAI instead collects these events into a JSON array which is set as a single large attribute called `events`

on the request span. To change this, use [ InstrumentationSettings(event_mode='logs')](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.InstrumentationSettings).

```
from pydantic_ai import Agent
from pydantic_ai.agent import InstrumentationSettings
instrumentation_settings = InstrumentationSettings(event_mode='logs')
agent = Agent('openai:gpt-4o', instrument=instrumentation_settings)
# or instrument all agents:
Agent.instrument_all(instrumentation_settings)
```


For now, this won't look as good in the Logfire UI, but we're working on it. **Once the UI supports it, event_mode='logs' will become the default.**

If you have very long conversations, the `events`

span attribute may be truncated. Using `event_mode='logs'`

will help avoid this issue.

Note that the OpenTelemetry Semantic Conventions are still experimental and are likely to change.

## Setting OpenTelemetry SDK providers

By default, the global `TracerProvider`

and `EventLoggerProvider`

are used. These are set automatically by `logfire.configure()`

. They can also be set by the `set_tracer_provider`

and `set_event_logger_provider`

functions in the OpenTelemetry Python SDK. You can set custom providers with `InstrumentationSettings`

:

```
from opentelemetry.sdk._events import EventLoggerProvider
from opentelemetry.sdk.trace import TracerProvider
from pydantic_ai.agent import InstrumentationSettings
instrumentation_settings = InstrumentationSettings(
tracer_provider=TracerProvider(),
event_logger_provider=EventLoggerProvider(),
)
```
</doc>

<a id="multi-agent-applications"></a>

<doc title="Multi-agent Applications" desc="Content from https://ai.pydantic.dev/multi-agent-applications">

---
title: Multi-agent Applications - PydanticAI
url: https://ai.pydantic.dev/multi-agent-applications/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Multi-agent Applications

There are roughly four levels of complexity when building applications with PydanticAI:

- Single agent workflows — what most of the
`pydantic_ai`

documentation covers [Agent delegation](https://ai.pydantic.dev#agent-delegation)— agents using another agent via tools[Programmatic agent hand-off](https://ai.pydantic.dev#programmatic-agent-hand-off)— one agent runs, then application code calls another agent[Graph based control flow](https://ai.pydantic.dev/graph/)— for the most complex cases, a graph-based state machine can be used to control the execution of multiple agents

Of course, you can combine multiple strategies in a single application.

## Agent delegation

"Agent delegation" refers to the scenario where an agent delegates work to another agent, then takes back control when the delegate agent (the agent called from within a tool) finishes.

Since agents are stateless and designed to be global, you do not need to include the agent itself in agent [dependencies](https://ai.pydantic.dev/dependencies/).

You'll generally want to pass [ ctx.usage](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext.usage) to the

[keyword argument of the delegate agent run so usage within that run counts towards the total usage of the parent agent run.](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run)

`usage`

Multiple models

Agent delegation doesn't need to use the same model for each agent. If you choose to use different models within a run, calculating the monetary cost from the final [ result.usage()](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.AgentRunResult.usage) of the run will not be possible, but you can still use

[to avoid unexpected costs.](https://ai.pydantic.dev/api/usage/#pydantic_ai.usage.UsageLimits)

`UsageLimits`

```
from pydantic_ai import Agent, RunContext
from pydantic_ai.usage import UsageLimits
joke_selection_agent = Agent( # (1)!
'openai:gpt-4o',
system_prompt=(
'Use the `joke_factory` to generate some jokes, then choose the best. '
'You must return just a single joke.'
),
)
joke_generation_agent = Agent( # (2)!
'google-gla:gemini-1.5-flash', result_type=list[str]
)
@joke_selection_agent.tool
async def joke_factory(ctx: RunContext[None], count: int) -> list[str]:
r = await joke_generation_agent.run( # (3)!
f'Please generate {count} jokes.',
usage=ctx.usage, # (4)!
)
return r.data # (5)!
result = joke_selection_agent.run_sync(
'Tell me a joke.',
usage_limits=UsageLimits(request_limit=5, total_tokens_limit=300),
)
print(result.data)
#> Did you hear about the toothpaste scandal? They called it Colgate.
print(result.usage())
"""
Usage(
requests=3, request_tokens=204, response_tokens=24, total_tokens=228, details=None
)
"""
```


- The "parent" or controlling agent.
- The "delegate" agent, which is called from within a tool of the parent agent.
- Call the delegate agent from within a tool of the parent agent.
- Pass the usage from the parent agent to the delegate agent so the final
includes the usage from both agents.`result.usage()`

- Since the function returns
`list[str]`

, and the`result_type`

of`joke_generation_agent`

is also`list[str]`

, we can simply return`r.data`

from the tool.

*(This example is complete, it can be run "as is")*

The control flow for this example is pretty simple and can be summarised as follows:

```
graph TD
START --> joke_selection_agent
joke_selection_agent --> joke_factory["joke_factory (tool)"]
joke_factory --> joke_generation_agent
joke_generation_agent --> joke_factory
joke_factory --> joke_selection_agent
joke_selection_agent --> END
```


### Agent delegation and dependencies

Generally the delegate agent needs to either have the same [dependencies](https://ai.pydantic.dev/dependencies/) as the calling agent, or dependencies which are a subset of the calling agent's dependencies.

Initializing dependencies

We say "generally" above since there's nothing to stop you initializing dependencies within a tool call and therefore using interdependencies in a delegate agent that are not available on the parent, this should often be avoided since it can be significantly slower than reusing connections etc. from the parent agent.

```
from dataclasses import dataclass
import httpx
from pydantic_ai import Agent, RunContext
@dataclass
class ClientAndKey: # (1)!
http_client: httpx.AsyncClient
api_key: str
joke_selection_agent = Agent(
'openai:gpt-4o',
deps_type=ClientAndKey, # (2)!
system_prompt=(
'Use the `joke_factory` tool to generate some jokes on the given subject, '
'then choose the best. You must return just a single joke.'
),
)
joke_generation_agent = Agent(
'gemini-1.5-flash',
deps_type=ClientAndKey, # (4)!
result_type=list[str],
system_prompt=(
'Use the "get_jokes" tool to get some jokes on the given subject, '
'then extract each joke into a list.'
),
)
@joke_selection_agent.tool
async def joke_factory(ctx: RunContext[ClientAndKey], count: int) -> list[str]:
r = await joke_generation_agent.run(
f'Please generate {count} jokes.',
deps=ctx.deps, # (3)!
usage=ctx.usage,
)
return r.data
@joke_generation_agent.tool # (5)!
async def get_jokes(ctx: RunContext[ClientAndKey], count: int) -> str:
response = await ctx.deps.http_client.get(
'https://example.com',
params={'count': count},
headers={'Authorization': f'Bearer {ctx.deps.api_key}'},
)
response.raise_for_status()
return response.text
async def main():
async with httpx.AsyncClient() as client:
deps = ClientAndKey(client, 'foobar')
result = await joke_selection_agent.run('Tell me a joke.', deps=deps)
print(result.data)
#> Did you hear about the toothpaste scandal? They called it Colgate.
print(result.usage()) # (6)!
"""
Usage(
requests=4,
request_tokens=309,
response_tokens=32,
total_tokens=341,
details=None,
)
"""
```


- Define a dataclass to hold the client and API key dependencies.
- Set the
`deps_type`

of the calling agent —`joke_selection_agent`

here. - Pass the dependencies to the delegate agent's run method within the tool call.
- Also set the
`deps_type`

of the delegate agent —`joke_generation_agent`

here. - Define a tool on the delegate agent that uses the dependencies to make an HTTP request.
- Usage now includes 4 requests — 2 from the calling agent and 2 from the delegate agent.

*(This example is complete, it can be run "as is" — you'll need to add asyncio.run(main()) to run main)*


This example shows how even a fairly simple agent delegation can lead to a complex control flow:

```
graph TD
START --> joke_selection_agent
joke_selection_agent --> joke_factory["joke_factory (tool)"]
joke_factory --> joke_generation_agent
joke_generation_agent --> get_jokes["get_jokes (tool)"]
get_jokes --> http_request["HTTP request"]
http_request --> get_jokes
get_jokes --> joke_generation_agent
joke_generation_agent --> joke_factory
joke_factory --> joke_selection_agent
joke_selection_agent --> END
```


## Programmatic agent hand-off

"Programmatic agent hand-off" refers to the scenario where multiple agents are called in succession, with application code and/or a human in the loop responsible for deciding which agent to call next.

Here agents don't need to use the same deps.

Here we show two agents used in succession, the first to find a flight and the second to extract the user's seat preference.

```
from typing import Literal, Union
from pydantic import BaseModel, Field
from rich.prompt import Prompt
from pydantic_ai import Agent, RunContext
from pydantic_ai.messages import ModelMessage
from pydantic_ai.usage import Usage, UsageLimits
class FlightDetails(BaseModel):
flight_number: str
class Failed(BaseModel):
"""Unable to find a satisfactory choice."""
flight_search_agent = Agent[None, Union[FlightDetails, Failed]]( # (1)!
'openai:gpt-4o',
result_type=Union[FlightDetails, Failed], # type: ignore
system_prompt=(
'Use the "flight_search" tool to find a flight '
'from the given origin to the given destination.'
),
)
@flight_search_agent.tool # (2)!
async def flight_search(
ctx: RunContext[None], origin: str, destination: str
) -> Union[FlightDetails, None]:
# in reality, this would call a flight search API or
# use a browser to scrape a flight search website
return FlightDetails(flight_number='AK456')
usage_limits = UsageLimits(request_limit=15) # (3)!
async def find_flight(usage: Usage) -> Union[FlightDetails, None]: # (4)!
message_history: Union[list[ModelMessage], None] = None
for _ in range(3):
prompt = Prompt.ask(
'Where would you like to fly from and to?',
)
result = await flight_search_agent.run(
prompt,
message_history=message_history,
usage=usage,
usage_limits=usage_limits,
)
if isinstance(result.data, FlightDetails):
return result.data
else:
message_history = result.all_messages(
result_tool_return_content='Please try again.'
)
class SeatPreference(BaseModel):
row: int = Field(ge=1, le=30)
seat: Literal['A', 'B', 'C', 'D', 'E', 'F']
# This agent is responsible for extracting the user's seat selection
seat_preference_agent = Agent[None, Union[SeatPreference, Failed]]( # (5)!
'openai:gpt-4o',
result_type=Union[SeatPreference, Failed], # type: ignore
system_prompt=(
"Extract the user's seat preference. "
'Seats A and F are window seats. '
'Row 1 is the front row and has extra leg room. '
'Rows 14, and 20 also have extra leg room. '
),
)
async def find_seat(usage: Usage) -> SeatPreference: # (6)!
message_history: Union[list[ModelMessage], None] = None
while True:
answer = Prompt.ask('What seat would you like?')
result = await seat_preference_agent.run(
answer,
message_history=message_history,
usage=usage,
usage_limits=usage_limits,
)
if isinstance(result.data, SeatPreference):
return result.data
else:
print('Could not understand seat preference. Please try again.')
message_history = result.all_messages()
async def main(): # (7)!
usage: Usage = Usage()
opt_flight_details = await find_flight(usage)
if opt_flight_details is not None:
print(f'Flight found: {opt_flight_details.flight_number}')
#> Flight found: AK456
seat_preference = await find_seat(usage)
print(f'Seat preference: {seat_preference}')
#> Seat preference: row=1 seat='A'
```


- Define the first agent, which finds a flight. We use an explicit type annotation until
[PEP-747](https://peps.python.org/pep-0747/)lands, see[structured results](https://ai.pydantic.dev/results/#structured-result-validation). We use a union as the result type so the model can communicate if it's unable to find a satisfactory choice; internally, each member of the union will be registered as a separate tool. - Define a tool on the agent to find a flight. In this simple case we could dispense with the tool and just define the agent to return structured data, then search for a flight, but in more complex scenarios the tool would be necessary.
- Define usage limits for the entire app.
- Define a function to find a flight, which asks the user for their preferences and then calls the agent to find a flight.
- As with
`flight_search_agent`

above, we use an explicit type annotation to define the agent. - Define a function to find the user's seat preference, which asks the user for their seat preference and then calls the agent to extract the seat preference.
- Now that we've put our logic for running each agent into separate functions, our main app becomes very simple.

*(This example is complete, it can be run "as is" — you'll need to add asyncio.run(main()) to run main)*


The control flow for this example can be summarised as follows:

```
graph TB
START --> ask_user_flight["ask user for flight"]
subgraph find_flight
flight_search_agent --> ask_user_flight
ask_user_flight --> flight_search_agent
end
flight_search_agent --> ask_user_seat["ask user for seat"]
flight_search_agent --> END
subgraph find_seat
seat_preference_agent --> ask_user_seat
ask_user_seat --> seat_preference_agent
end
seat_preference_agent --> END
```


## Pydantic Graphs

See the [graph](https://ai.pydantic.dev/graph/) documentation on when and how to use graphs.

## Examples

The following examples demonstrate how to use dependencies in PydanticAI:
</doc>

<a id="graph"></a>

<doc title="Graphs" desc="Content from https://ai.pydantic.dev/graph">

---
title: Graphs - PydanticAI
url: https://ai.pydantic.dev/graph/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Graphs

Don't use a nail gun unless you need a nail gun

If PydanticAI [agents](https://ai.pydantic.dev/agents/) are a hammer, and [multi-agent workflows](https://ai.pydantic.dev/multi-agent-applications/) are a sledgehammer, then graphs are a nail gun:

- sure, nail guns look cooler than hammers
- but nail guns take a lot more setup than hammers
- and nail guns don't make you a better builder, they make you a builder with a nail gun
- Lastly, (and at the risk of torturing this metaphor), if you're a fan of medieval tools like mallets and untyped Python, you probably won't like nail guns or our approach to graphs. (But then again, if you're not a fan of type hints in Python, you've probably already bounced off PydanticAI to use one of the toy agent frameworks — good luck, and feel free to borrow my sledgehammer when you realize you need it)

In short, graphs are a powerful tool, but they're not the right tool for every job. Please consider other [multi-agent approaches](https://ai.pydantic.dev/multi-agent-applications/) before proceeding.

If you're not confident a graph-based approach is a good idea, it might be unnecessary.

Graphs and finite state machines (FSMs) are a powerful abstraction to model, execute, control and visualize complex workflows.

Alongside PydanticAI, we've developed `pydantic-graph`

— an async graph and state machine library for Python where nodes and edges are defined using type hints.

While this library is developed as part of PydanticAI; it has no dependency on `pydantic-ai`

and can be considered as a pure graph-based state machine library. You may find it useful whether or not you're using PydanticAI or even building with GenAI.

`pydantic-graph`

is designed for advanced users and makes heavy use of Python generics and type hints. It is not designed to be as beginner-friendly as PydanticAI.

## Installation

`pydantic-graph`

is a required dependency of `pydantic-ai`

, and an optional dependency of `pydantic-ai-slim`

, see [installation instructions](https://ai.pydantic.dev/install/#slim-install) for more information. You can also install it directly:

```
pip install pydantic-graph
```


```
uv add pydantic-graph
```


## Graph Types

`pydantic-graph`

is made up of a few key components:

### GraphRunContext

[ GraphRunContext](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.GraphRunContext) — The context for the graph run, similar to PydanticAI's

[. This holds the state of the graph and dependencies and is passed to nodes when they're run.](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext)

`RunContext`

`GraphRunContext`

is generic in the state type of the graph it's used in, [ StateT](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.StateT).

### End

[ End](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.End) — return value to indicate the graph run should end.

`End`

is generic in the graph return type of the graph it's used in, [ RunEndT](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.RunEndT).

### Nodes

Subclasses of [ BaseNode](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.BaseNode) define nodes for execution in the graph.

Nodes, which are generally [ dataclasses](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass), generally consist of:

- fields containing any parameters required/optional when calling the node
- the business logic to execute the node, in the
method`run`

- return annotations of the
method, which are read by`run`

`pydantic-graph`

to determine the outgoing edges of the node

Nodes are generic in:

**state**, which must have the same type as the state of graphs they're included in,has a default of`StateT`

`None`

, so if you're not using state you can omit this generic parameter, see[stateful graphs](https://ai.pydantic.dev#stateful-graphs)for more information**deps**, which must have the same type as the deps of the graph they're included in,has a default of`DepsT`

`None`

, so if you're not using deps you can omit this generic parameter, see[dependency injection](https://ai.pydantic.dev#dependency-injection)for more information**graph return type**— this only applies if the node returns.`End`

has a default of`RunEndT`

[Never](https://docs.python.org/3/library/typing.html#typing.Never)so this generic parameter can be omitted if the node doesn't return`End`

, but must be included if it does.

Here's an example of a start or intermediate node in a graph — it can't end the run as it doesn't return [ End](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.End):

```
from dataclasses import dataclass
from pydantic_graph import BaseNode, GraphRunContext
@dataclass
class MyNode(BaseNode[MyState]): # (1)!
foo: int # (2)!
async def run(
self,
ctx: GraphRunContext[MyState], # (3)!
) -> AnotherNode: # (4)!
...
return AnotherNode()
```


- State in this example is
`MyState`

(not shown), hence`BaseNode`

is parameterized with`MyState`

. This node can't end the run, so the`RunEndT`

generic parameter is omitted and defaults to`Never`

. `MyNode`

is a dataclass and has a single field`foo`

, an`int`

.- The
`run`

method takes a`GraphRunContext`

parameter, again parameterized with state`MyState`

. - The return type of the
`run`

method is`AnotherNode`

(not shown), this is used to determine the outgoing edges of the node.

We could extend `MyNode`

to optionally end the run if `foo`

is divisible by 5:

```
from dataclasses import dataclass
from pydantic_graph import BaseNode, End, GraphRunContext
@dataclass
class MyNode(BaseNode[MyState, None, int]): # (1)!
foo: int
async def run(
self,
ctx: GraphRunContext[MyState],
) -> AnotherNode | End[int]: # (2)!
if self.foo % 5 == 0:
return End(self.foo)
else:
return AnotherNode()
```


- We parameterize the node with the return type (
`int`

in this case) as well as state. Because generic parameters are positional-only, we have to include`None`

as the second parameter representing deps. - The return type of the
`run`

method is now a union of`AnotherNode`

and`End[int]`

, this allows the node to end the run if`foo`

is divisible by 5.

### Graph

[ Graph](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph) — this is the execution graph itself, made up of a set of

[node classes](https://ai.pydantic.dev#nodes)(i.e.,

`BaseNode`

subclasses).`Graph`

is generic in:

**state**the state type of the graph,`StateT`

**deps**the deps type of the graph,`DepsT`

**graph return type**the return type of the graph run,`RunEndT`


Here's an example of a simple graph:

```
from __future__ import annotations
from dataclasses import dataclass
from pydantic_graph import BaseNode, End, Graph, GraphRunContext
@dataclass
class DivisibleBy5(BaseNode[None, None, int]): # (1)!
foo: int
async def run(
self,
ctx: GraphRunContext,
) -> Increment | End[int]:
if self.foo % 5 == 0:
return End(self.foo)
else:
return Increment(self.foo)
@dataclass
class Increment(BaseNode): # (2)!
foo: int
async def run(self, ctx: GraphRunContext) -> DivisibleBy5:
return DivisibleBy5(self.foo + 1)
fives_graph = Graph(nodes=[DivisibleBy5, Increment]) # (3)!
result = fives_graph.run_sync(DivisibleBy5(4)) # (4)!
print(result.output)
#> 5
```


- The
`DivisibleBy5`

node is parameterized with`None`

for the state param and`None`

for the deps param as this graph doesn't use state or deps, and`int`

as it can end the run. - The
`Increment`

node doesn't return`End`

, so the`RunEndT`

generic parameter is omitted, state can also be omitted as the graph doesn't use state. - The graph is created with a sequence of nodes.
- The graph is run synchronously with
. The initial node is`run_sync`

`DivisibleBy5(4)`

. Because the graph doesn't use external state or deps, we don't pass`state`

or`deps`

.

*(This example is complete, it can be run "as is" with Python 3.10+)*

A [mermaid diagram](https://ai.pydantic.dev#mermaid-diagrams) for this graph can be generated with the following code:

```
from graph_example import DivisibleBy5, fives_graph
fives_graph.mermaid_code(start_node=DivisibleBy5)
```


```
---
title: fives_graph
---
stateDiagram-v2
[*] --> DivisibleBy5
DivisibleBy5 --> Increment
DivisibleBy5 --> [*]
Increment --> DivisibleBy5
```


In order to visualize a graph within a `jupyter-notebook`

, `IPython.display`

needs to be used:

```
from graph_example import DivisibleBy5, fives_graph
from IPython.display import Image, display
display(Image(fives_graph.mermaid_image(start_node=DivisibleBy5)))
```


## Stateful Graphs

The "state" concept in `pydantic-graph`

provides an optional way to access and mutate an object (often a `dataclass`

or Pydantic model) as nodes run in a graph. If you think of Graphs as a production line, then your state is the engine being passed along the line and built up by each node as the graph is run.

In the future, we intend to extend `pydantic-graph`

to provide state persistence with the state recorded after each node is run, see [#695](https://github.com/pydantic/pydantic-ai/issues/695).

Here's an example of a graph which represents a vending machine where the user may insert coins and select a product to purchase.

```
from __future__ import annotations
from dataclasses import dataclass
from rich.prompt import Prompt
from pydantic_graph import BaseNode, End, Graph, GraphRunContext
@dataclass
class MachineState: # (1)!
user_balance: float = 0.0
product: str | None = None
@dataclass
class InsertCoin(BaseNode[MachineState]): # (3)!
async def run(self, ctx: GraphRunContext[MachineState]) -> CoinsInserted: # (16)!
return CoinsInserted(float(Prompt.ask('Insert coins'))) # (4)!
@dataclass
class CoinsInserted(BaseNode[MachineState]):
amount: float # (5)!
async def run(
self, ctx: GraphRunContext[MachineState]
) -> SelectProduct | Purchase: # (17)!
ctx.state.user_balance += self.amount # (6)!
if ctx.state.product is not None: # (7)!
return Purchase(ctx.state.product)
else:
return SelectProduct()
@dataclass
class SelectProduct(BaseNode[MachineState]):
async def run(self, ctx: GraphRunContext[MachineState]) -> Purchase:
return Purchase(Prompt.ask('Select product'))
PRODUCT_PRICES = { # (2)!
'water': 1.25,
'soda': 1.50,
'crisps': 1.75,
'chocolate': 2.00,
}
@dataclass
class Purchase(BaseNode[MachineState, None, None]): # (18)!
product: str
async def run(
self, ctx: GraphRunContext[MachineState]
) -> End | InsertCoin | SelectProduct:
if price := PRODUCT_PRICES.get(self.product): # (8)!
ctx.state.product = self.product # (9)!
if ctx.state.user_balance >= price: # (10)!
ctx.state.user_balance -= price
return End(None)
else:
diff = price - ctx.state.user_balance
print(f'Not enough money for {self.product}, need {diff:0.2f} more')
#> Not enough money for crisps, need 0.75 more
return InsertCoin() # (11)!
else:
print(f'No such product: {self.product}, try again')
return SelectProduct() # (12)!
vending_machine_graph = Graph( # (13)!
nodes=[InsertCoin, CoinsInserted, SelectProduct, Purchase]
)
async def main():
state = MachineState() # (14)!
await vending_machine_graph.run(InsertCoin(), state=state) # (15)!
print(f'purchase successful item={state.product} change={state.user_balance:0.2f}')
#> purchase successful item=crisps change=0.25
```


- The state of the vending machine is defined as a dataclass with the user's balance and the product they've selected, if any.
- A dictionary of products mapped to prices.
- The
`InsertCoin`

node,is parameterized with`BaseNode`

`MachineState`

as that's the state used in this graph. - The
`InsertCoin`

node prompts the user to insert coins. We keep things simple by just entering a monetary amount as a float. Before you start thinking this is a toy too since it's using[rich's](https://rich.readthedocs.io/en/stable/reference/prompt.html#rich.prompt.PromptBase.ask)within nodes, see`Prompt.ask`

[below](https://ai.pydantic.dev#example-human-in-the-loop)for how control flow can be managed when nodes require external input. - The
`CoinsInserted`

node; again this is awith one field`dataclass`

`amount`

. - Update the user's balance with the amount inserted.
- If the user has already selected a product, go to
`Purchase`

, otherwise go to`SelectProduct`

. - In the
`Purchase`

node, look up the price of the product if the user entered a valid product. - If the user did enter a valid product, set the product in the state so we don't revisit
`SelectProduct`

. - If the balance is enough to purchase the product, adjust the balance to reflect the purchase and return
to end the graph. We're not using the run return type, so we call`End`

`End`

with`None`

. - If the balance is insufficient, go to
`InsertCoin`

to prompt the user to insert more coins. - If the product is invalid, go to
`SelectProduct`

to prompt the user to select a product again. - The graph is created by passing a list of nodes to
. Order of nodes is not important, but it can affect how`Graph`

[diagrams](https://ai.pydantic.dev#mermaid-diagrams)are displayed. - Initialize the state. This will be passed to the graph run and mutated as the graph runs.
- Run the graph with the initial state. Since the graph can be run from any node, we must pass the start node — in this case,
`InsertCoin`

.returns a`Graph.run`

that provides the final data and a history of the run.`GraphRunResult`

- The return type of the node's
method is important as it is used to determine the outgoing edges of the node. This information in turn is used to render`run`

[mermaid diagrams](https://ai.pydantic.dev#mermaid-diagrams)and is enforced at runtime to detect misbehavior as soon as possible. - The return type of
`CoinsInserted`

'smethod is a union, meaning multiple outgoing edges are possible.`run`

- Unlike other nodes,
`Purchase`

can end the run, so thegeneric parameter must be set. In this case it's`RunEndT`

`None`

since the graph run return type is`None`

.

*(This example is complete, it can be run "as is" with Python 3.10+ — you'll need to add asyncio.run(main()) to run main)*


A [mermaid diagram](https://ai.pydantic.dev#mermaid-diagrams) for this graph can be generated with the following code:

```
from vending_machine import InsertCoin, vending_machine_graph
vending_machine_graph.mermaid_code(start_node=InsertCoin)
```


The diagram generated by the above code is:

```
---
title: vending_machine_graph
---
stateDiagram-v2
[*] --> InsertCoin
InsertCoin --> CoinsInserted
CoinsInserted --> SelectProduct
CoinsInserted --> Purchase
SelectProduct --> Purchase
Purchase --> InsertCoin
Purchase --> SelectProduct
Purchase --> [*]
```


See [below](https://ai.pydantic.dev#mermaid-diagrams) for more information on generating diagrams.

## GenAI Example

So far we haven't shown an example of a Graph that actually uses PydanticAI or GenAI at all.

In this example, one agent generates a welcome email to a user and the other agent provides feedback on the email.

This graph has a very simple structure:

```
---
title: feedback_graph
---
stateDiagram-v2
[*] --> WriteEmail
WriteEmail --> Feedback
Feedback --> WriteEmail
Feedback --> [*]
```


```
from __future__ import annotations as _annotations
from dataclasses import dataclass, field
from pydantic import BaseModel, EmailStr
from pydantic_ai import Agent
from pydantic_ai.format_as_xml import format_as_xml
from pydantic_ai.messages import ModelMessage
from pydantic_graph import BaseNode, End, Graph, GraphRunContext
@dataclass
class User:
name: str
email: EmailStr
interests: list[str]
@dataclass
class Email:
subject: str
body: str
@dataclass
class State:
user: User
write_agent_messages: list[ModelMessage] = field(default_factory=list)
email_writer_agent = Agent(
'google-vertex:gemini-1.5-pro',
result_type=Email,
system_prompt='Write a welcome email to our tech blog.',
)
@dataclass
class WriteEmail(BaseNode[State]):
email_feedback: str | None = None
async def run(self, ctx: GraphRunContext[State]) -> Feedback:
if self.email_feedback:
prompt = (
f'Rewrite the email for the user:\n'
f'{format_as_xml(ctx.state.user)}\n'
f'Feedback: {self.email_feedback}'
)
else:
prompt = (
f'Write a welcome email for the user:\n'
f'{format_as_xml(ctx.state.user)}'
)
result = await email_writer_agent.run(
prompt,
message_history=ctx.state.write_agent_messages,
)
ctx.state.write_agent_messages += result.all_messages()
return Feedback(result.data)
class EmailRequiresWrite(BaseModel):
feedback: str
class EmailOk(BaseModel):
pass
feedback_agent = Agent[None, EmailRequiresWrite | EmailOk](
'openai:gpt-4o',
result_type=EmailRequiresWrite | EmailOk, # type: ignore
system_prompt=(
'Review the email and provide feedback, email must reference the users specific interests.'
),
)
@dataclass
class Feedback(BaseNode[State, None, Email]):
email: Email
async def run(
self,
ctx: GraphRunContext[State],
) -> WriteEmail | End[Email]:
prompt = format_as_xml({'user': ctx.state.user, 'email': self.email})
result = await feedback_agent.run(prompt)
if isinstance(result.data, EmailRequiresWrite):
return WriteEmail(email_feedback=result.data.feedback)
else:
return End(self.email)
async def main():
user = User(
name='John Doe',
email='john.joe@example.com',
interests=['Haskel', 'Lisp', 'Fortran'],
)
state = State(user)
feedback_graph = Graph(nodes=(WriteEmail, Feedback))
result = await feedback_graph.run(WriteEmail(), state=state)
print(result.output)
"""
Email(
subject='Welcome to our tech blog!',
body='Hello John, Welcome to our tech blog! ...',
)
"""
```


*(This example is complete, it can be run "as is" with Python 3.10+ — you'll need to add asyncio.run(main()) to run main)*


## Iterating Over a Graph

### Using `Graph.iter`

for `async for`

iteration

Sometimes you want direct control or insight into each node as the graph executes. The easiest way to do that is with the [ Graph.iter](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph.iter) method, which returns a

**context manager**that yields a

[object. The](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.GraphRun)

`GraphRun`

`GraphRun`

is an async-iterable over the nodes of your graph, allowing you to record or modify them as they execute.Here's an example:

```
from __future__ import annotations as _annotations
from dataclasses import dataclass
from pydantic_graph import Graph, BaseNode, End, GraphRunContext
@dataclass
class CountDownState:
counter: int
@dataclass
class CountDown(BaseNode[CountDownState, None, int]):
async def run(self, ctx: GraphRunContext[CountDownState]) -> CountDown | End[int]:
if ctx.state.counter <= 0:
return End(ctx.state.counter)
ctx.state.counter -= 1
return CountDown()
count_down_graph = Graph(nodes=[CountDown])
async def main():
state = CountDownState(counter=3)
async with count_down_graph.iter(CountDown(), state=state) as run: # (1)!
async for node in run: # (2)!
print('Node:', node)
#> Node: CountDown()
#> Node: CountDown()
#> Node: CountDown()
#> Node: End(data=0)
print('Final result:', run.result.output) # (3)!
#> Final result: 0
```


`Graph.iter(...)`

returns a.`GraphRun`

- Here, we step through each node as it is executed.
- Once the graph returns an
, the loop ends, and`End`

`run.final_result`

becomes acontaining the final outcome (`GraphRunResult`

`0`

here).

### Using `GraphRun.next(node)`

manually

Alternatively, you can drive iteration manually with the [ GraphRun.next](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.GraphRun.next) method, which allows you to pass in whichever node you want to run next. You can modify or selectively skip nodes this way.

Below is a contrived example that stops whenever the counter is at 2, ignoring any node runs beyond that:

```
from pydantic_graph import End, FullStatePersistence
from count_down import CountDown, CountDownState, count_down_graph
async def main():
state = CountDownState(counter=5)
persistence = FullStatePersistence() # (7)!
async with count_down_graph.iter(
CountDown(), state=state, persistence=persistence
) as run:
node = run.next_node # (1)!
while not isinstance(node, End): # (2)!
print('Node:', node)
#> Node: CountDown()
#> Node: CountDown()
#> Node: CountDown()
#> Node: CountDown()
if state.counter == 2:
break # (3)!
node = await run.next(node) # (4)!
print(run.result) # (5)!
#> None
for step in persistence.history: # (6)!
print('History Step:', step.state, step.state)
#> History Step: CountDownState(counter=5) CountDownState(counter=5)
#> History Step: CountDownState(counter=4) CountDownState(counter=4)
#> History Step: CountDownState(counter=3) CountDownState(counter=3)
#> History Step: CountDownState(counter=2) CountDownState(counter=2)
```


- We start by grabbing the first node that will be run in the agent's graph.
- The agent run is finished once an
`End`

node has been produced; instances of`End`

cannot be passed to`next`

. - If the user decides to stop early, we break out of the loop. The graph run won't have a real final result in that case (
`run.final_result`

remains`None`

). - At each step, we call
`await run.next(node)`

to run it and get the next node (or an`End`

). - Because we did not continue the run until it finished, the
`result`

is not set. - The run's history is still populated with the steps we executed so far.
- Use
so we can show the history of the run, see`FullStatePersistence`

[State Persistence](https://ai.pydantic.dev#state-persistence)below for more information.

## State Persistence

One of the biggest benefits of finite state machine (FSM) graphs is how they simplify the handling of interrupted execution. This might happen for a variety of reasons:

- the state machine logic might fundamentally need to be paused — e.g. the returns workflow for an e-commerce order needs to wait for the item to be posted to the returns center or because execution of the next node needs input from a user so needs to wait for a new http request,
- the execution takes so long that the entire graph can't reliably be executed in a single continuous run — e.g. a deep research agent that might take hours to run,
- you want to run multiple graph nodes in parallel in different processes / hardware instances (note: parallel node execution is not yet supported in
`pydantic-graph`

, see[#704](https://github.com/pydantic/pydantic-ai/issues/704)).

Trying to make a conventional control flow (i.e., boolean logic and nested function calls) implementation compatible with these usage scenarios generally results in brittle and over-complicated spaghetti code, with the logic required to interrupt and resume execution dominating the implementation.

To allow graph runs to be interrupted and resumed, `pydantic-graph`

provides state persistence — a system for snapshotting the state of a graph run before and after each node is run, allowing a graph run to be resumed from any point in the graph.

`pydantic-graph`

includes three state persistence implementations:

— Simple in memory state persistence that just hold the latest snapshot. If no state persistence implementation is provided when running a graph, this is used by default.`SimpleStatePersistence`

— In memory state persistence that hold a list of snapshots.`FullStatePersistence`

— File-based state persistence that saves snapshots to a JSON file.`FileStatePersistence`


In production applications, developers should implement their own state persistence by subclassing [ BaseStatePersistence](https://ai.pydantic.dev/api/pydantic_graph/persistence/#pydantic_graph.persistence.BaseStatePersistence) abstract base class, which might persist runs in a relational database like PostgresQL.

At a high level the role of `StatePersistence`

implementations is to store and retrieve [ NodeSnapshot](https://ai.pydantic.dev/api/pydantic_graph/persistence/#pydantic_graph.persistence.NodeSnapshot) and

[objects.](https://ai.pydantic.dev/api/pydantic_graph/persistence/#pydantic_graph.persistence.EndSnapshot)

`EndSnapshot`

[ graph.iter_from_persistence()](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph.iter_from_persistence) may be used to run the graph based on the state stored in persistence.

We can run the `count_down_graph`

from [above](https://ai.pydantic.dev#iterating-over-a-graph), using [ graph.iter_from_persistence()](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph.iter_from_persistence) and

[.](https://ai.pydantic.dev/api/pydantic_graph/persistence/#pydantic_graph.persistence.file.FileStatePersistence)

`FileStatePersistence`

As you can see in this code, `run_node`

requires no external application state (apart from state persistence) to be run, meaning graphs can easily be executed by distributed execution and queueing systems.

```
from pathlib import Path
from pydantic_graph import End
from pydantic_graph.persistence.file import FileStatePersistence
from count_down import CountDown, CountDownState, count_down_graph
async def main():
run_id = 'run_abc123'
persistence = FileStatePersistence(Path(f'count_down_{run_id}.json')) # (1)!
state = CountDownState(counter=5)
await count_down_graph.initialize( # (2)!
CountDown(), state=state, persistence=persistence
)
done = False
while not done:
done = await run_node(run_id)
async def run_node(run_id: str) -> bool: # (3)!
persistence = FileStatePersistence(Path(f'count_down_{run_id}.json'))
async with count_down_graph.iter_from_persistence(persistence) as run: # (4)!
node_or_end = await run.next() # (5)!
print('Node:', node_or_end)
#> Node: CountDown()
#> Node: CountDown()
#> Node: CountDown()
#> Node: CountDown()
#> Node: CountDown()
#> Node: End(data=0)
return isinstance(node_or_end, End) # (6)!
```


- Create a
to use to start the graph.`FileStatePersistence`

- Call
to set the initial graph state in the persistence object.`graph.initialize()`

`run_node`

is a pure function that doesn't need access to any other process state to run the next node of the graph, except the ID of the run.- Call
create a`graph.iter_from_persistence()`

object that will run the next node of the graph from the state stored in persistence. This will return either a node or an`GraphRun`

`End`

object. will return either a`graph.run()`

[node](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.BaseNode)or anobject.`End`

- Check if the node is an
object, if it is, the graph run is complete.`End`


*(This example is complete, it can be run "as is" with Python 3.10+ — you'll need to add asyncio.run(main()) to run main)*


### Example: Human in the loop.

As noted above, state persistence allows graphs to be interrupted and resumed. One use case of this is to allow user input to continue.

In this example, an AI asks the user a question, the user provides an answer, the AI evaluates the answer and ends if the user got it right or asks another question if they got it wrong.

Instead of running the entire graph in a single process invocation, we run the graph by running the process repeatedly, optionally providing an answer to the question as a command line argument.

`ai_q_and_a_graph.py`

— `question_graph`

definition

```
from __future__ import annotations as _annotations
from dataclasses import dataclass, field
from groq import BaseModel
from pydantic_graph import (
BaseNode,
End,
Graph,
GraphRunContext,
)
from pydantic_ai import Agent
from pydantic_ai.format_as_xml import format_as_xml
from pydantic_ai.messages import ModelMessage
ask_agent = Agent('openai:gpt-4o', result_type=str, instrument=True)
@dataclass
class QuestionState:
question: str | None = None
ask_agent_messages: list[ModelMessage] = field(default_factory=list)
evaluate_agent_messages: list[ModelMessage] = field(default_factory=list)
@dataclass
class Ask(BaseNode[QuestionState]):
async def run(self, ctx: GraphRunContext[QuestionState]) -> Answer:
result = await ask_agent.run(
'Ask a simple question with a single correct answer.',
message_history=ctx.state.ask_agent_messages,
)
ctx.state.ask_agent_messages += result.all_messages()
ctx.state.question = result.data
return Answer(result.data)
@dataclass
class Answer(BaseNode[QuestionState]):
question: str
async def run(self, ctx: GraphRunContext[QuestionState]) -> Evaluate:
answer = input(f'{self.question}: ')
return Evaluate(answer)
class EvaluationResult(BaseModel, use_attribute_docstrings=True):
correct: bool
"""Whether the answer is correct."""
comment: str
"""Comment on the answer, reprimand the user if the answer is wrong."""
evaluate_agent = Agent(
'openai:gpt-4o',
result_type=EvaluationResult,
system_prompt='Given a question and answer, evaluate if the answer is correct.',
)
@dataclass
class Evaluate(BaseNode[QuestionState, None, str]):
answer: str
async def run(
self,
ctx: GraphRunContext[QuestionState],
) -> End[str] | Reprimand:
assert ctx.state.question is not None
result = await evaluate_agent.run(
format_as_xml({'question': ctx.state.question, 'answer': self.answer}),
message_history=ctx.state.evaluate_agent_messages,
)
ctx.state.evaluate_agent_messages += result.all_messages()
if result.data.correct:
return End(result.data.comment)
else:
return Reprimand(result.data.comment)
@dataclass
class Reprimand(BaseNode[QuestionState]):
comment: str
async def run(self, ctx: GraphRunContext[QuestionState]) -> Ask:
print(f'Comment: {self.comment}')
ctx.state.question = None
return Ask()
question_graph = Graph(
nodes=(Ask, Answer, Evaluate, Reprimand), state_type=QuestionState
)
```


*(This example is complete, it can be run "as is" with Python 3.10+)*

```
import sys
from pathlib import Path
from pydantic_graph import End
from pydantic_graph.persistence.file import FileStatePersistence
from pydantic_ai.messages import ModelMessage # noqa: F401
from ai_q_and_a_graph import Ask, question_graph, Evaluate, QuestionState, Answer
async def main():
answer: str | None = sys.argv[2] if len(sys.argv) > 2 else None # (1)!
persistence = FileStatePersistence(Path('question_graph.json')) # (2)!
persistence.set_graph_types(question_graph) # (3)!
if snapshot := await persistence.load_next(): # (4)!
state = snapshot.state
assert answer is not None
node = Evaluate(answer)
else:
state = QuestionState()
node = Ask() # (5)!
async with question_graph.iter(node, state=state, persistence=persistence) as run:
while True:
node = await run.next() # (6)!
if isinstance(node, End): # (7)!
print('END:', node.data)
history = await persistence.load_all() # (8)!
print([e.node for e in history])
break
elif isinstance(node, Answer): # (9)!
print(node.question)
#> What is the capital of France?
break
# otherwise just continue
```


- Get the user's answer from the command line, if provided. See
[question graph example](https://ai.pydantic.dev/examples/question-graph/)for a complete example. - Create a state persistence instance the
`'question_graph.json'`

file may or may not already exist. - Since we're using the
[persistence interface](https://ai.pydantic.dev/api/pydantic_graph/persistence/#pydantic_graph.persistence.BaseStatePersistence)outside a graph, we need to callto set the graph generic types`set_graph_types`

`StateT`

and`RunEndT`

for the persistence instance. This is necessary to allow the persistence instance to know how to serialize and deserialize graph nodes. - If we're run the graph before,
will return a snapshot of the next node to run, here we use`load_next`

`state`

from that snapshot, and create a new`Evaluate`

node with the answer provided on the command line. - If the graph hasn't been run before, we create a new
`QuestionState`

and start with the`Ask`

node. - Call
to run the node. This will return either a node or an`GraphRun.next()`

`End`

object. - If the node is an
`End`

object, the graph run is complete. The`data`

field of the`End`

object contains the comment returned by the`evaluate_agent`

about the correct answer. - To demonstrate the state persistence, we call
to get all the snapshots from the persistence instance. This will return a list of`load_all`

objects.`Snapshot`

- If the node is an
`Answer`

object, we print the question and break out of the loop to end the process and wait for user input.

*(This example is complete, it can be run "as is" with Python 3.10+ — you'll need to add asyncio.run(main(answer)) to run main)*


For a complete example of this graph, see the [question graph example](https://ai.pydantic.dev/examples/question-graph/).

## Dependency Injection

As with PydanticAI, `pydantic-graph`

supports dependency injection via a generic parameter on [ Graph](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph) and

[, and the](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.BaseNode)

`BaseNode`

[field.](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.GraphRunContext.deps)

`GraphRunContext.deps`

As an example of dependency injection, let's modify the `DivisibleBy5`

example [above](https://ai.pydantic.dev#graph) to use a [ ProcessPoolExecutor](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor) to run the compute load in a separate process (this is a contrived example,

`ProcessPoolExecutor`

wouldn't actually improve performance in this example):```
from __future__ import annotations
import asyncio
from concurrent.futures import ProcessPoolExecutor
from dataclasses import dataclass
from pydantic_graph import BaseNode, End, Graph, GraphRunContext
@dataclass
class GraphDeps:
executor: ProcessPoolExecutor
@dataclass
class DivisibleBy5(BaseNode[None, GraphDeps, int]):
foo: int
async def run(
self,
ctx: GraphRunContext[None, GraphDeps],
) -> Increment | End[int]:
if self.foo % 5 == 0:
return End(self.foo)
else:
return Increment(self.foo)
@dataclass
class Increment(BaseNode[None, GraphDeps]):
foo: int
async def run(self, ctx: GraphRunContext[None, GraphDeps]) -> DivisibleBy5:
loop = asyncio.get_running_loop()
compute_result = await loop.run_in_executor(
ctx.deps.executor,
self.compute,
)
return DivisibleBy5(compute_result)
def compute(self) -> int:
return self.foo + 1
fives_graph = Graph(nodes=[DivisibleBy5, Increment])
async def main():
with ProcessPoolExecutor() as executor:
deps = GraphDeps(executor)
result = await fives_graph.run(DivisibleBy5(3), deps=deps)
print(result.output)
#> 5
# the full history is quite verbose (see below), so we'll just print the summary
print([item.data_snapshot() for item in result.history])
"""
[
DivisibleBy5(foo=3),
Increment(foo=3),
DivisibleBy5(foo=4),
Increment(foo=4),
DivisibleBy5(foo=5),
End(data=5),
]
"""
```


*(This example is complete, it can be run "as is" with Python 3.10+ — you'll need to add asyncio.run(main()) to run main)*


## Mermaid Diagrams

Pydantic Graph can generate [mermaid](https://mermaid.js.org/) [ stateDiagram-v2](https://mermaid.js.org/syntax/stateDiagram.html) diagrams for graphs, as shown above.

These diagrams can be generated with:

to generate the mermaid code for a graph`Graph.mermaid_code`

to generate an image of the graph using`Graph.mermaid_image`

[mermaid.ink](https://mermaid.ink/)to generate an image of the graph using`Graph.mermaid_save`

[mermaid.ink](https://mermaid.ink/)and save it to a file

Beyond the diagrams shown above, you can also customize mermaid diagrams with the following options:

allows you to apply a label to an edge`Edge`

and`BaseNode.docstring_notes`

allows you to add notes to nodes`BaseNode.get_note`

- The
parameter allows you to highlight specific node(s) in the diagram`highlighted_nodes`


Putting that together, we can edit the last [ ai_q_and_a_graph.py](https://ai.pydantic.dev#example-human-in-the-loop) example to:

- add labels to some edges
- add a note to the
`Ask`

node - highlight the
`Answer`

node - save the diagram as a
`PNG`

image to file

```
...
from typing import Annotated
from pydantic_graph import BaseNode, End, Graph, GraphRunContext, Edge
...
@dataclass
class Ask(BaseNode[QuestionState]):
"""Generate question using GPT-4o."""
docstring_notes = True
async def run(
self, ctx: GraphRunContext[QuestionState]
) -> Annotated[Answer, Edge(label='Ask the question')]:
...
...
@dataclass
class Evaluate(BaseNode[QuestionState]):
answer: str
async def run(
self,
ctx: GraphRunContext[QuestionState],
) -> Annotated[End[str], Edge(label='success')] | Reprimand:
...
...
question_graph.mermaid_save('image.png', highlighted_nodes=[Answer])
```


*(This example is not complete and cannot be run directly)*

This would generate an image that looks like this:

```
---
title: question_graph
---
stateDiagram-v2
Ask --> Answer: Ask the question
note right of Ask
Judge the answer.
Decide on next step.
end note
Answer --> Evaluate
Evaluate --> Reprimand
Evaluate --> [*]: success
Reprimand --> Ask
classDef highlighted fill:#fdff32
class Answer highlighted
```


### Setting Direction of the State Diagram

You can specify the direction of the state diagram using one of the following values:

`'TB'`

: Top to bottom, the diagram flows vertically from top to bottom.`'LR'`

: Left to right, the diagram flows horizontally from left to right.`'RL'`

: Right to left, the diagram flows horizontally from right to left.`'BT'`

: Bottom to top, the diagram flows vertically from bottom to top.

Here is an example of how to do this using 'Left to Right' (LR) instead of the default 'Top to Bottom' (TB):

```
from vending_machine import InsertCoin, vending_machine_graph
vending_machine_graph.mermaid_code(start_node=InsertCoin, direction='LR')
```


```
---
title: vending_machine_graph
---
stateDiagram-v2
direction LR
[*] --> InsertCoin
InsertCoin --> CoinsInserted
CoinsInserted --> SelectProduct
CoinsInserted --> Purchase
SelectProduct --> Purchase
Purchase --> InsertCoin
Purchase --> SelectProduct
Purchase --> [*]
```
</doc>

<a id="input"></a>

<doc title="Image, Audio &amp; Document Input" desc="Content from https://ai.pydantic.dev/input">

---
title: Image, Audio & Document Input - PydanticAI
url: https://ai.pydantic.dev/input/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Image, Audio & Document Input

Some LLMs are now capable of understanding both audio, image and document content.

## Image Input

Info

Some models do not support image input. Please check the model's documentation to confirm whether it supports image input.

If you have a direct URL for the image, you can use [ ImageUrl](https://ai.pydantic.dev/api/messages/#pydantic_ai.messages.ImageUrl):

```
from pydantic_ai import Agent, ImageUrl
agent = Agent(model='openai:gpt-4o')
result = agent.run_sync(
[
'What company is this logo from?',
ImageUrl(url='https://iili.io/3Hs4FMg.png'),
]
)
print(result.data)
#> This is the logo for Pydantic, a data validation and settings management library in Python.
```


If you have the image locally, you can also use [ BinaryContent](https://ai.pydantic.dev/api/messages/#pydantic_ai.messages.BinaryContent):

```
import httpx
from pydantic_ai import Agent, BinaryContent
image_response = httpx.get('https://iili.io/3Hs4FMg.png') # Pydantic logo
agent = Agent(model='openai:gpt-4o')
result = agent.run_sync(
[
'What company is this logo from?',
BinaryContent(data=image_response.content, media_type='image/png'), # (1)!
]
)
print(result.data)
#> This is the logo for Pydantic, a data validation and settings management library in Python.
```


- To ensure the example is runnable we download this image from the web, but you can also use
`Path().read_bytes()`

to read a local file's contents.

## Audio Input

Info

Some models do not support audio input. Please check the model's documentation to confirm whether it supports audio input.

You can provide audio input using either [ AudioUrl](https://ai.pydantic.dev/api/messages/#pydantic_ai.messages.AudioUrl) or

[. The process is analogous to the examples above.](https://ai.pydantic.dev/api/messages/#pydantic_ai.messages.BinaryContent)

`BinaryContent`

## Document Input

Info

Some models do not support document input. Please check the model's documentation to confirm whether it supports document input.

Warning

When using Gemini models, the document content will always be sent as binary data, regardless of whether you use `DocumentUrl`

or `BinaryContent`

. This is due to differences in how Vertex AI and Google AI handle document inputs.

For more details, see [this discussion](https://discuss.ai.google.dev/t/i-am-using-google-generative-ai-model-gemini-1-5-pro-for-image-analysis-but-getting-error/34866/4).

If you are unsatisfied with this behavior, please let us know by opening an issue on
[GitHub](https://github.com/pydantic/pydantic-ai/issues).

You can provide document input using either [ DocumentUrl](https://ai.pydantic.dev/api/messages/#pydantic_ai.messages.DocumentUrl) or

[. The process is similar to the examples above.](https://ai.pydantic.dev/api/messages/#pydantic_ai.messages.BinaryContent)

`BinaryContent`

If you have a direct URL for the document, you can use [ DocumentUrl](https://ai.pydantic.dev/api/messages/#pydantic_ai.messages.DocumentUrl):

```
from pydantic_ai import Agent, DocumentUrl
agent = Agent(model='anthropic:claude-3-sonnet')
result = agent.run_sync(
[
'What is the main content of this document?',
DocumentUrl(url='https://storage.googleapis.com/cloud-samples-data/generative-ai/pdf/2403.05530.pdf'),
]
)
print(result.data)
#> This document is the technical report introducing Gemini 1.5, Google's latest large language model...
```


The supported document formats vary by model.

You can also use [ BinaryContent](https://ai.pydantic.dev/api/messages/#pydantic_ai.messages.BinaryContent) to pass document data directly:

```
from pathlib import Path
from pydantic_ai import Agent, BinaryContent
pdf_path = Path('document.pdf')
agent = Agent(model='anthropic:claude-3-sonnet')
result = agent.run_sync(
[
'What is the main content of this document?',
BinaryContent(data=pdf_path.read_bytes(), media_type='application/pdf'),
]
)
print(result.data)
#> The document discusses...
```
</doc>

<a id="cli"></a>

<doc title="Command Line Interface (CLI)" desc="Content from https://ai.pydantic.dev/cli">

---
title: Command Line Interface (CLI) - PydanticAI
url: https://ai.pydantic.dev/cli/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Command Line Interface (CLI)

**PydanticAI** comes with a simple reference CLI application which you can use to interact with various LLMs directly from the command line.
It provides a convenient way to chat with language models and quickly get answers right in the terminal.

We originally developed this CLI for our own use, but found ourselves using it so frequently that we decided to share it as part of the PydanticAI package.

We plan to continue adding new features, such as interaction with MCP servers, access to tools, and more.

## Installation

To use the CLI, you need to either install [ pydantic-ai](https://ai.pydantic.dev/install/), or install

[with the](https://ai.pydantic.dev/install/#slim-install)

`pydantic-ai-slim`

`cli`

optional group:```
pip install 'pydantic-ai[cli]'
```


```
uv add 'pydantic-ai[cli]'
```


To enable command-line argument autocompletion, run:

```
register-python-argcomplete pai >> ~/.bashrc # for bash
register-python-argcomplete pai >> ~/.zshrc # for zsh
```


## Usage

You'll need to set an environment variable depending on the provider you intend to use.

If using OpenAI, set the `OPENAI_API_KEY`

environment variable:

```
export OPENAI_API_KEY='your-api-key-here'
```


Then simply run:

```
$ pai
```


This will start an interactive session where you can chat with the AI model. Special commands available in interactive mode:

`/exit`

: Exit the session`/markdown`

: Show the last response in markdown format`/multiline`

: Toggle multiline input mode (use Ctrl+D to submit)

### Choose a model

You can specify which model to use with the `--model`

flag:

```
$ pai --model=openai:gpt-4 "What's the capital of France?"
```
</doc>

<a id="examples"></a>

<doc title="Examples" desc="Content from https://ai.pydantic.dev/examples">

---
title: Examples - PydanticAI
url: https://ai.pydantic.dev/examples/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Examples

Examples of how to use PydanticAI and what it can do.

## Usage

These examples are distributed with `pydantic-ai`

so you can run them either by cloning the [pydantic-ai repo](https://github.com/pydantic/pydantic-ai) or by simply installing `pydantic-ai`

from PyPI with `pip`

or `uv`

.

### Installing required dependencies

Either way you'll need to install extra dependencies to run some examples, you just need to install the `examples`

optional dependency group.

If you've installed `pydantic-ai`

via pip/uv, you can install the extra dependencies with:

```
pip install 'pydantic-ai[examples]'
```


```
uv add 'pydantic-ai[examples]'
```


If you clone the repo, you should instead use `uv sync --extra examples`

to install extra dependencies.

### Setting model environment variables

These examples will need you to set up authentication with one or more of the LLMs, see the [model configuration](https://ai.pydantic.dev/models/) docs for details on how to do this.

TL;DR: in most cases you'll need to set one of the following environment variables:

```
export OPENAI_API_KEY=your-api-key
```


```
export GEMINI_API_KEY=your-api-key
```


### Running Examples

To run the examples (this will work whether you installed `pydantic_ai`

, or cloned the repo), run:

```
python -m pydantic_ai_examples.<example_module_name>
```


```
uv run -m pydantic_ai_examples.<example_module_name>
```


For examples, to run the very simple [ pydantic_model](https://ai.pydantic.dev/pydantic-model/) example:

```
python -m pydantic_ai_examples.pydantic_model
```


```
uv run -m pydantic_ai_examples.pydantic_model
```


If you like one-liners and you're using uv, you can run a pydantic-ai example with zero setup:

```
OPENAI_API_KEY='your-api-key' \
uv run --with 'pydantic-ai[examples]' \
-m pydantic_ai_examples.pydantic_model
```


You'll probably want to edit examples in addition to just running them. You can copy the examples to a new directory with:

```
python -m pydantic_ai_examples --copy-to examples/
```


```
uv run -m pydantic_ai_examples --copy-to examples/
```
</doc>

<a id="examples_pydantic-model"></a>

<doc title="Pydantic Model" desc="Content from https://ai.pydantic.dev/examples/pydantic-model">

---
title: Pydantic Model - PydanticAI
url: https://ai.pydantic.dev/examples/pydantic-model/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Pydantic Model

Simple example of using PydanticAI to construct a Pydantic model from a text input.

Demonstrates:

## Running the Example

With [dependencies installed and environment variables set](https://ai.pydantic.dev/#usage), run:

```
python -m pydantic_ai_examples.pydantic_model
```


```
uv run -m pydantic_ai_examples.pydantic_model
```


This examples uses `openai:gpt-4o`

by default, but it works well with other models, e.g. you can run it
with Gemini using:

```
PYDANTIC_AI_MODEL=gemini-1.5-pro python -m pydantic_ai_examples.pydantic_model
```


```
PYDANTIC_AI_MODEL=gemini-1.5-pro uv run -m pydantic_ai_examples.pydantic_model
```


(or `PYDANTIC_AI_MODEL=gemini-1.5-flash ...`

)

## Example Code

pydantic_model.py

```
import os
from typing import cast
import logfire
from pydantic import BaseModel
from pydantic_ai import Agent
from pydantic_ai.models import KnownModelName
# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured
logfire.configure(send_to_logfire='if-token-present')
class MyModel(BaseModel):
city: str
country: str
model = cast(KnownModelName, os.getenv('PYDANTIC_AI_MODEL', 'openai:gpt-4o'))
print(f'Using model: {model}')
agent = Agent(model, result_type=MyModel, instrument=True)
if __name__ == '__main__':
result = agent.run_sync('The windy city in the US of A.')
print(result.data)
print(result.usage())
```
</doc>

<a id="examples_weather-agent"></a>

<doc title="Weather agent" desc="Content from https://ai.pydantic.dev/examples/weather-agent">

---
title: Weather agent - PydanticAI
url: https://ai.pydantic.dev/examples/weather-agent/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Weather agent

Example of PydanticAI with multiple tools which the LLM needs to call in turn to answer a question.

Demonstrates:

[tools](https://ai.pydantic.dev/tools/)[agent dependencies](https://ai.pydantic.dev/dependencies/)[streaming text responses](https://ai.pydantic.dev/results/#streaming-text)- Building a
[Gradio](https://www.gradio.app/)UI for the agent

In this case the idea is a "weather" agent — the user can ask for the weather in multiple locations,
the agent will use the `get_lat_lng`

tool to get the latitude and longitude of the locations, then use
the `get_weather`

tool to get the weather for those locations.

## Running the Example

To run this example properly, you might want to add two extra API keys **(Note if either key is missing, the code will fall back to dummy data, so they're not required)**:

- A weather API key from
[tomorrow.io](https://www.tomorrow.io/weather-api/)set via`WEATHER_API_KEY`

- A geocoding API key from
[geocode.maps.co](https://geocode.maps.co/)set via`GEO_API_KEY`


With [dependencies installed and environment variables set](https://ai.pydantic.dev/#usage), run:

```
python -m pydantic_ai_examples.weather_agent
```


```
uv run -m pydantic_ai_examples.weather_agent
```


## Example Code

```
from __future__ import annotations as _annotations
import asyncio
import os
from dataclasses import dataclass
from typing import Any
import logfire
from devtools import debug
from httpx import AsyncClient
from pydantic_ai import Agent, ModelRetry, RunContext
# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured
logfire.configure(send_to_logfire='if-token-present')
@dataclass
class Deps:
client: AsyncClient
weather_api_key: str | None
geo_api_key: str | None
weather_agent = Agent(
'openai:gpt-4o',
# 'Be concise, reply with one sentence.' is enough for some models (like openai) to use
# the below tools appropriately, but others like anthropic and gemini require a bit more direction.
system_prompt=(
'Be concise, reply with one sentence.'
'Use the `get_lat_lng` tool to get the latitude and longitude of the locations, '
'then use the `get_weather` tool to get the weather.'
),
deps_type=Deps,
retries=2,
instrument=True,
)
@weather_agent.tool
async def get_lat_lng(
ctx: RunContext[Deps], location_description: str
) -> dict[str, float]:
"""Get the latitude and longitude of a location.
Args:
ctx: The context.
location_description: A description of a location.
"""
if ctx.deps.geo_api_key is None:
# if no API key is provided, return a dummy response (London)
return {'lat': 51.1, 'lng': -0.1}
params = {
'q': location_description,
'api_key': ctx.deps.geo_api_key,
}
with logfire.span('calling geocode API', params=params) as span:
r = await ctx.deps.client.get('https://geocode.maps.co/search', params=params)
r.raise_for_status()
data = r.json()
span.set_attribute('response', data)
if data:
return {'lat': data[0]['lat'], 'lng': data[0]['lon']}
else:
raise ModelRetry('Could not find the location')
@weather_agent.tool
async def get_weather(ctx: RunContext[Deps], lat: float, lng: float) -> dict[str, Any]:
"""Get the weather at a location.
Args:
ctx: The context.
lat: Latitude of the location.
lng: Longitude of the location.
"""
if ctx.deps.weather_api_key is None:
# if no API key is provided, return a dummy response
return {'temperature': '21 °C', 'description': 'Sunny'}
params = {
'apikey': ctx.deps.weather_api_key,
'location': f'{lat},{lng}',
'units': 'metric',
}
with logfire.span('calling weather API', params=params) as span:
r = await ctx.deps.client.get(
'https://api.tomorrow.io/v4/weather/realtime', params=params
)
r.raise_for_status()
data = r.json()
span.set_attribute('response', data)
values = data['data']['values']
# https://docs.tomorrow.io/reference/data-layers-weather-codes
code_lookup = {
1000: 'Clear, Sunny',
1100: 'Mostly Clear',
1101: 'Partly Cloudy',
1102: 'Mostly Cloudy',
1001: 'Cloudy',
2000: 'Fog',
2100: 'Light Fog',
4000: 'Drizzle',
4001: 'Rain',
4200: 'Light Rain',
4201: 'Heavy Rain',
5000: 'Snow',
5001: 'Flurries',
5100: 'Light Snow',
5101: 'Heavy Snow',
6000: 'Freezing Drizzle',
6001: 'Freezing Rain',
6200: 'Light Freezing Rain',
6201: 'Heavy Freezing Rain',
7000: 'Ice Pellets',
7101: 'Heavy Ice Pellets',
7102: 'Light Ice Pellets',
8000: 'Thunderstorm',
}
return {
'temperature': f'{values["temperatureApparent"]:0.0f}°C',
'description': code_lookup.get(values['weatherCode'], 'Unknown'),
}
async def main():
async with AsyncClient() as client:
# create a free API key at https://www.tomorrow.io/weather-api/
weather_api_key = os.getenv('WEATHER_API_KEY')
# create a free API key at https://geocode.maps.co/
geo_api_key = os.getenv('GEO_API_KEY')
deps = Deps(
client=client, weather_api_key=weather_api_key, geo_api_key=geo_api_key
)
result = await weather_agent.run(
'What is the weather like in London and in Wiltshire?', deps=deps
)
debug(result)
print('Response:', result.data)
if __name__ == '__main__':
asyncio.run(main())
```


## Running the UI

You can build multi-turn chat applications for your agent with [Gradio](https://www.gradio.app/), a framework for building AI web applications entirely in python. Gradio comes with built-in chat components and agent support so the entire UI will be implemented in a single python file!

Here's what the UI looks like for the weather agent:

Note, to run the UI, you'll need Python 3.10+.

```
pip install gradio>=5.9.0
python/uv-run -m pydantic_ai_examples.weather_agent_gradio
```


## UI Code

```
from __future__ import annotations as _annotations
import json
import os
from httpx import AsyncClient
from pydantic_ai.messages import ToolCallPart, ToolReturnPart
from pydantic_ai_examples.weather_agent import Deps, weather_agent
try:
import gradio as gr
except ImportError as e:
raise ImportError(
'Please install gradio with `pip install gradio`. You must use python>=3.10.'
) from e
TOOL_TO_DISPLAY_NAME = {'get_lat_lng': 'Geocoding API', 'get_weather': 'Weather API'}
client = AsyncClient()
weather_api_key = os.getenv('WEATHER_API_KEY')
# create a free API key at https://geocode.maps.co/
geo_api_key = os.getenv('GEO_API_KEY')
deps = Deps(client=client, weather_api_key=weather_api_key, geo_api_key=geo_api_key)
async def stream_from_agent(prompt: str, chatbot: list[dict], past_messages: list):
chatbot.append({'role': 'user', 'content': prompt})
yield gr.Textbox(interactive=False, value=''), chatbot, gr.skip()
async with weather_agent.run_stream(
prompt, deps=deps, message_history=past_messages
) as result:
for message in result.new_messages():
for call in message.parts:
if isinstance(call, ToolCallPart):
call_args = (
call.args.args_json
if hasattr(call.args, 'args_json')
else json.dumps(call.args.args_dict)
)
metadata = {
'title': f'🛠️ Using {TOOL_TO_DISPLAY_NAME[call.tool_name]}',
}
if call.tool_call_id is not None:
metadata['id'] = {call.tool_call_id}
gr_message = {
'role': 'assistant',
'content': 'Parameters: ' + call_args,
'metadata': metadata,
}
chatbot.append(gr_message)
if isinstance(call, ToolReturnPart):
for gr_message in chatbot:
if (
gr_message.get('metadata', {}).get('id', '')
== call.tool_call_id
):
gr_message['content'] += (
f'\nOutput: {json.dumps(call.content)}'
)
yield gr.skip(), chatbot, gr.skip()
chatbot.append({'role': 'assistant', 'content': ''})
async for message in result.stream_text():
chatbot[-1]['content'] = message
yield gr.skip(), chatbot, gr.skip()
past_messages = result.all_messages()
yield gr.Textbox(interactive=True), gr.skip(), past_messages
async def handle_retry(chatbot, past_messages: list, retry_data: gr.RetryData):
new_history = chatbot[: retry_data.index]
previous_prompt = chatbot[retry_data.index]['content']
past_messages = past_messages[: retry_data.index]
async for update in stream_from_agent(previous_prompt, new_history, past_messages):
yield update
def undo(chatbot, past_messages: list, undo_data: gr.UndoData):
new_history = chatbot[: undo_data.index]
past_messages = past_messages[: undo_data.index]
return chatbot[undo_data.index]['content'], new_history, past_messages
def select_data(message: gr.SelectData) -> str:
return message.value['text']
with gr.Blocks() as demo:
gr.HTML(
"""
<div style="display: flex; justify-content: center; align-items: center; gap: 2rem; padding: 1rem; width: 100%">
<img src="https://ai.pydantic.dev/img/logo-white.svg" style="max-width: 200px; height: auto">
<div>
<h1 style="margin: 0 0 1rem 0">Weather Assistant</h1>
<h3 style="margin: 0 0 0.5rem 0">
This assistant answer your weather questions.
</h3>
</div>
</div>
"""
)
past_messages = gr.State([])
chatbot = gr.Chatbot(
label='Packing Assistant',
type='messages',
avatar_images=(None, 'https://ai.pydantic.dev/img/logo-white.svg'),
examples=[
{'text': 'What is the weather like in Miami?'},
{'text': 'What is the weather like in London?'},
],
)
with gr.Row():
prompt = gr.Textbox(
lines=1,
show_label=False,
placeholder='What is the weather like in New York City?',
)
generation = prompt.submit(
stream_from_agent,
inputs=[prompt, chatbot, past_messages],
outputs=[prompt, chatbot, past_messages],
)
chatbot.example_select(select_data, None, [prompt])
chatbot.retry(
handle_retry, [chatbot, past_messages], [prompt, chatbot, past_messages]
)
chatbot.undo(undo, [chatbot, past_messages], [prompt, chatbot, past_messages])
if __name__ == '__main__':
demo.launch()
```
</doc>

<a id="examples_bank-support"></a>

<doc title="Bank support" desc="Content from https://ai.pydantic.dev/examples/bank-support">

---
title: Bank support - PydanticAI
url: https://ai.pydantic.dev/examples/bank-support/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Bank support

Small but complete example of using PydanticAI to build a support agent for a bank.

Demonstrates:

## Running the Example

With [dependencies installed and environment variables set](https://ai.pydantic.dev/#usage), run:

```
python -m pydantic_ai_examples.bank_support
```


```
uv run -m pydantic_ai_examples.bank_support
```


(or `PYDANTIC_AI_MODEL=gemini-1.5-flash ...`

)

## Example Code

bank_support.py

```
from dataclasses import dataclass
from pydantic import BaseModel, Field
from pydantic_ai import Agent, RunContext
class DatabaseConn:
"""This is a fake database for example purposes.
In reality, you'd be connecting to an external database
(e.g. PostgreSQL) to get information about customers.
"""
@classmethod
async def customer_name(cls, *, id: int) -> str | None:
if id == 123:
return 'John'
@classmethod
async def customer_balance(cls, *, id: int, include_pending: bool) -> float:
if id == 123 and include_pending:
return 123.45
else:
raise ValueError('Customer not found')
@dataclass
class SupportDependencies:
customer_id: int
db: DatabaseConn
class SupportResult(BaseModel):
support_advice: str = Field(description='Advice returned to the customer')
block_card: bool = Field(description='Whether to block their card or not')
risk: int = Field(description='Risk level of query', ge=0, le=10)
support_agent = Agent(
'openai:gpt-4o',
deps_type=SupportDependencies,
result_type=SupportResult,
system_prompt=(
'You are a support agent in our bank, give the '
'customer support and judge the risk level of their query. '
"Reply using the customer's name."
),
)
@support_agent.system_prompt
async def add_customer_name(ctx: RunContext[SupportDependencies]) -> str:
customer_name = await ctx.deps.db.customer_name(id=ctx.deps.customer_id)
return f"The customer's name is {customer_name!r}"
@support_agent.tool
async def customer_balance(
ctx: RunContext[SupportDependencies], include_pending: bool
) -> str:
"""Returns the customer's current account balance."""
balance = await ctx.deps.db.customer_balance(
id=ctx.deps.customer_id,
include_pending=include_pending,
)
return f'${balance:.2f}'
if __name__ == '__main__':
deps = SupportDependencies(customer_id=123, db=DatabaseConn())
result = support_agent.run_sync('What is my balance?', deps=deps)
print(result.data)
"""
support_advice='Hello John, your current account balance, including pending transactions, is $123.45.' block_card=False risk=1
"""
result = support_agent.run_sync('I just lost my card!', deps=deps)
print(result.data)
"""
support_advice="I'm sorry to hear that, John. We are temporarily blocking your card to prevent unauthorized transactions." block_card=True risk=8
"""
```
</doc>

<a id="examples_sql-gen"></a>

<doc title="SQL Generation" desc="Content from https://ai.pydantic.dev/examples/sql-gen">

---
title: SQL Generation - PydanticAI
url: https://ai.pydantic.dev/examples/sql-gen/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# SQL Generation

Example demonstrating how to use PydanticAI to generate SQL queries based on user input.

Demonstrates:

## Running the Example

The resulting SQL is validated by running it as an `EXPLAIN`

query on PostgreSQL. To run the example, you first need to run PostgreSQL, e.g. via Docker:

```
docker run --rm -e POSTGRES_PASSWORD=postgres -p 54320:5432 postgres
```


*(we run postgres on port*

`54320`

to avoid conflicts with any other postgres instances you may have running)With [dependencies installed and environment variables set](https://ai.pydantic.dev/#usage), run:

```
python -m pydantic_ai_examples.sql_gen
```


```
uv run -m pydantic_ai_examples.sql_gen
```


or to use a custom prompt:

```
python -m pydantic_ai_examples.sql_gen "find me errors"
```


```
uv run -m pydantic_ai_examples.sql_gen "find me errors"
```


This model uses `gemini-1.5-flash`

by default since Gemini is good at single shot queries of this kind.

## Example Code

sql_gen.py

```
import asyncio
import sys
from collections.abc import AsyncGenerator
from contextlib import asynccontextmanager
from dataclasses import dataclass
from datetime import date
from typing import Annotated, Any, Union
import asyncpg
import logfire
from annotated_types import MinLen
from devtools import debug
from pydantic import BaseModel, Field
from typing_extensions import TypeAlias
from pydantic_ai import Agent, ModelRetry, RunContext
from pydantic_ai.format_as_xml import format_as_xml
# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured
logfire.configure(send_to_logfire='if-token-present')
logfire.instrument_asyncpg()
DB_SCHEMA = """
CREATE TABLE records (
created_at timestamptz,
start_timestamp timestamptz,
end_timestamp timestamptz,
trace_id text,
span_id text,
parent_span_id text,
level log_level,
span_name text,
message text,
attributes_json_schema text,
attributes jsonb,
tags text[],
is_exception boolean,
otel_status_message text,
service_name text
);
"""
SQL_EXAMPLES = [
{
'request': 'show me records where foobar is false',
'response': "SELECT * FROM records WHERE attributes->>'foobar' = false",
},
{
'request': 'show me records where attributes include the key "foobar"',
'response': "SELECT * FROM records WHERE attributes ? 'foobar'",
},
{
'request': 'show me records from yesterday',
'response': "SELECT * FROM records WHERE start_timestamp::date > CURRENT_TIMESTAMP - INTERVAL '1 day'",
},
{
'request': 'show me error records with the tag "foobar"',
'response': "SELECT * FROM records WHERE level = 'error' and 'foobar' = ANY(tags)",
},
]
@dataclass
class Deps:
conn: asyncpg.Connection
class Success(BaseModel):
"""Response when SQL could be successfully generated."""
sql_query: Annotated[str, MinLen(1)]
explanation: str = Field(
'', description='Explanation of the SQL query, as markdown'
)
class InvalidRequest(BaseModel):
"""Response the user input didn't include enough information to generate SQL."""
error_message: str
Response: TypeAlias = Union[Success, InvalidRequest]
agent: Agent[Deps, Response] = Agent(
'google-gla:gemini-1.5-flash',
# Type ignore while we wait for PEP-0747, nonetheless unions will work fine everywhere else
result_type=Response, # type: ignore
deps_type=Deps,
instrument=True,
)
@agent.system_prompt
async def system_prompt() -> str:
return f"""\
Given the following PostgreSQL table of records, your job is to
write a SQL query that suits the user's request.
Database schema:
{DB_SCHEMA}
today's date = {date.today()}
{format_as_xml(SQL_EXAMPLES)}
"""
@agent.result_validator
async def validate_result(ctx: RunContext[Deps], result: Response) -> Response:
if isinstance(result, InvalidRequest):
return result
# gemini often adds extraneous backslashes to SQL
result.sql_query = result.sql_query.replace('\\', '')
if not result.sql_query.upper().startswith('SELECT'):
raise ModelRetry('Please create a SELECT query')
try:
await ctx.deps.conn.execute(f'EXPLAIN {result.sql_query}')
except asyncpg.exceptions.PostgresError as e:
raise ModelRetry(f'Invalid query: {e}') from e
else:
return result
async def main():
if len(sys.argv) == 1:
prompt = 'show me logs from yesterday, with level "error"'
else:
prompt = sys.argv[1]
async with database_connect(
'postgresql://postgres:postgres@localhost:54320', 'pydantic_ai_sql_gen'
) as conn:
deps = Deps(conn)
result = await agent.run(prompt, deps=deps)
debug(result.data)
# pyright: reportUnknownMemberType=false
# pyright: reportUnknownVariableType=false
@asynccontextmanager
async def database_connect(server_dsn: str, database: str) -> AsyncGenerator[Any, None]:
with logfire.span('check and create DB'):
conn = await asyncpg.connect(server_dsn)
try:
db_exists = await conn.fetchval(
'SELECT 1 FROM pg_database WHERE datname = $1', database
)
if not db_exists:
await conn.execute(f'CREATE DATABASE {database}')
finally:
await conn.close()
conn = await asyncpg.connect(f'{server_dsn}/{database}')
try:
with logfire.span('create schema'):
async with conn.transaction():
if not db_exists:
await conn.execute(
"CREATE TYPE log_level AS ENUM ('debug', 'info', 'warning', 'error', 'critical')"
)
await conn.execute(DB_SCHEMA)
yield conn
finally:
await conn.close()
if __name__ == '__main__':
asyncio.run(main())
```
</doc>

<a id="examples_flight-booking"></a>

<doc title="Flight booking" desc="Content from https://ai.pydantic.dev/examples/flight-booking">

---
title: Flight booking - PydanticAI
url: https://ai.pydantic.dev/examples/flight-booking/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2025-01-10
---
# Flight booking

Example of a multi-agent flow where one agent delegates work to another, then hands off control to a third agent.

Demonstrates:

In this scenario, a group of agents work together to find the best flight for a user.

The control flow for this example can be summarised as follows:

```
graph TD
START --> search_agent("search agent")
search_agent --> extraction_agent("extraction agent")
extraction_agent --> search_agent
search_agent --> human_confirm("human confirm")
human_confirm --> search_agent
search_agent --> FAILED
human_confirm --> find_seat_function("find seat function")
find_seat_function --> human_seat_choice("human seat choice")
human_seat_choice --> find_seat_agent("find seat agent")
find_seat_agent --> find_seat_function
find_seat_function --> buy_flights("buy flights")
buy_flights --> SUCCESS
```


## Running the Example

With [dependencies installed and environment variables set](https://ai.pydantic.dev/#usage), run:

```
python -m pydantic_ai_examples.flight_booking
```


```
uv run -m pydantic_ai_examples.flight_booking
```


## Example Code

flight_booking.py

```
import datetime
from dataclasses import dataclass
from typing import Literal
import logfire
from pydantic import BaseModel, Field
from rich.prompt import Prompt
from pydantic_ai import Agent, ModelRetry, RunContext
from pydantic_ai.messages import ModelMessage
from pydantic_ai.usage import Usage, UsageLimits
# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured
logfire.configure(send_to_logfire='if-token-present')
class FlightDetails(BaseModel):
"""Details of the most suitable flight."""
flight_number: str
price: int
origin: str = Field(description='Three-letter airport code')
destination: str = Field(description='Three-letter airport code')
date: datetime.date
class NoFlightFound(BaseModel):
"""When no valid flight is found."""
@dataclass
class Deps:
web_page_text: str
req_origin: str
req_destination: str
req_date: datetime.date
# This agent is responsible for controlling the flow of the conversation.
search_agent = Agent[Deps, FlightDetails | NoFlightFound](
'openai:gpt-4o',
result_type=FlightDetails | NoFlightFound, # type: ignore
retries=4,
system_prompt=(
'Your job is to find the cheapest flight for the user on the given date. '
),
instrument=True,
)
# This agent is responsible for extracting flight details from web page text.
extraction_agent = Agent(
'openai:gpt-4o',
result_type=list[FlightDetails],
system_prompt='Extract all the flight details from the given text.',
)
@search_agent.tool
async def extract_flights(ctx: RunContext[Deps]) -> list[FlightDetails]:
"""Get details of all flights."""
# we pass the usage to the search agent so requests within this agent are counted
result = await extraction_agent.run(ctx.deps.web_page_text, usage=ctx.usage)
logfire.info('found {flight_count} flights', flight_count=len(result.data))
return result.data
@search_agent.result_validator
async def validate_result(
ctx: RunContext[Deps], result: FlightDetails | NoFlightFound
) -> FlightDetails | NoFlightFound:
"""Procedural validation that the flight meets the constraints."""
if isinstance(result, NoFlightFound):
return result
errors: list[str] = []
if result.origin != ctx.deps.req_origin:
errors.append(
f'Flight should have origin {ctx.deps.req_origin}, not {result.origin}'
)
if result.destination != ctx.deps.req_destination:
errors.append(
f'Flight should have destination {ctx.deps.req_destination}, not {result.destination}'
)
if result.date != ctx.deps.req_date:
errors.append(f'Flight should be on {ctx.deps.req_date}, not {result.date}')
if errors:
raise ModelRetry('\n'.join(errors))
else:
return result
class SeatPreference(BaseModel):
row: int = Field(ge=1, le=30)
seat: Literal['A', 'B', 'C', 'D', 'E', 'F']
class Failed(BaseModel):
"""Unable to extract a seat selection."""
# This agent is responsible for extracting the user's seat selection
seat_preference_agent = Agent[None, SeatPreference | Failed](
'openai:gpt-4o',
result_type=SeatPreference | Failed, # type: ignore
system_prompt=(
"Extract the user's seat preference. "
'Seats A and F are window seats. '
'Row 1 is the front row and has extra leg room. '
'Rows 14, and 20 also have extra leg room. '
),
)
# in reality this would be downloaded from a booking site,
# potentially using another agent to navigate the site
flights_web_page = """
1. Flight SFO-AK123
- Price: $350
- Origin: San Francisco International Airport (SFO)
- Destination: Ted Stevens Anchorage International Airport (ANC)
- Date: January 10, 2025
2. Flight SFO-AK456
- Price: $370
- Origin: San Francisco International Airport (SFO)
- Destination: Fairbanks International Airport (FAI)
- Date: January 10, 2025
3. Flight SFO-AK789
- Price: $400
- Origin: San Francisco International Airport (SFO)
- Destination: Juneau International Airport (JNU)
- Date: January 20, 2025
4. Flight NYC-LA101
- Price: $250
- Origin: San Francisco International Airport (SFO)
- Destination: Ted Stevens Anchorage International Airport (ANC)
- Date: January 10, 2025
5. Flight CHI-MIA202
- Price: $200
- Origin: Chicago O'Hare International Airport (ORD)
- Destination: Miami International Airport (MIA)
- Date: January 12, 2025
6. Flight BOS-SEA303
- Price: $120
- Origin: Boston Logan International Airport (BOS)
- Destination: Ted Stevens Anchorage International Airport (ANC)
- Date: January 12, 2025
7. Flight DFW-DEN404
- Price: $150
- Origin: Dallas/Fort Worth International Airport (DFW)
- Destination: Denver International Airport (DEN)
- Date: January 10, 2025
8. Flight ATL-HOU505
- Price: $180
- Origin: Hartsfield-Jackson Atlanta International Airport (ATL)
- Destination: George Bush Intercontinental Airport (IAH)
- Date: January 10, 2025
"""
# restrict how many requests this app can make to the LLM
usage_limits = UsageLimits(request_limit=15)
async def main():
deps = Deps(
web_page_text=flights_web_page,
req_origin='SFO',
req_destination='ANC',
req_date=datetime.date(2025, 1, 10),
)
message_history: list[ModelMessage] | None = None
usage: Usage = Usage()
# run the agent until a satisfactory flight is found
while True:
result = await search_agent.run(
f'Find me a flight from {deps.req_origin} to {deps.req_destination} on {deps.req_date}',
deps=deps,
usage=usage,
message_history=message_history,
usage_limits=usage_limits,
)
if isinstance(result.data, NoFlightFound):
print('No flight found')
break
else:
flight = result.data
print(f'Flight found: {flight}')
answer = Prompt.ask(
'Do you want to buy this flight, or keep searching? (buy/*search)',
choices=['buy', 'search', ''],
show_choices=False,
)
if answer == 'buy':
seat = await find_seat(usage)
await buy_tickets(flight, seat)
break
else:
message_history = result.all_messages(
result_tool_return_content='Please suggest another flight'
)
async def find_seat(usage: Usage) -> SeatPreference:
message_history: list[ModelMessage] | None = None
while True:
answer = Prompt.ask('What seat would you like?')
result = await seat_preference_agent.run(
answer,
message_history=message_history,
usage=usage,
usage_limits=usage_limits,
)
if isinstance(result.data, SeatPreference):
return result.data
else:
print('Could not understand seat preference. Please try again.')
message_history = result.all_messages()
async def buy_tickets(flight_details: FlightDetails, seat: SeatPreference):
print(f'Purchasing flight {flight_details=!r} {seat=!r}...')
if __name__ == '__main__':
import asyncio
asyncio.run(main())
```
</doc>

<a id="examples_rag"></a>

<doc title="RAG" desc="Content from https://ai.pydantic.dev/examples/rag">

---
title: RAG - PydanticAI
url: https://ai.pydantic.dev/examples/rag/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# RAG

RAG search example. This demo allows you to ask question of the [logfire](https://pydantic.dev/logfire) documentation.

Demonstrates:

[tools](https://ai.pydantic.dev/tools/)[agent dependencies](https://ai.pydantic.dev/dependencies/)- RAG search

This is done by creating a database containing each section of the markdown documentation, then registering the search tool with the PydanticAI agent.

Logic for extracting sections from markdown files and a JSON file with that data is available in
[this gist](https://gist.github.com/samuelcolvin/4b5bb9bb163b1122ff17e29e48c10992).

[PostgreSQL with pgvector](https://github.com/pgvector/pgvector) is used as the search database, the easiest way to download and run pgvector is using Docker:

```
mkdir postgres-data
docker run --rm \
-e POSTGRES_PASSWORD=postgres \
-p 54320:5432 \
-v `pwd`/postgres-data:/var/lib/postgresql/data \
pgvector/pgvector:pg17
```


As with the [SQL gen](https://ai.pydantic.dev/sql-gen/) example, we run postgres on port `54320`

to avoid conflicts with any other postgres instances you may have running.
We also mount the PostgreSQL `data`

directory locally to persist the data if you need to stop and restart the container.

With that running and [dependencies installed and environment variables set](https://ai.pydantic.dev/#usage), we can build the search database with (**WARNING**: this requires the `OPENAI_API_KEY`

env variable and will calling the OpenAI embedding API around 300 times to generate embeddings for each section of the documentation):

```
python -m pydantic_ai_examples.rag build
```


```
uv run -m pydantic_ai_examples.rag build
```


(Note building the database doesn't use PydanticAI right now, instead it uses the OpenAI SDK directly.)

You can then ask the agent a question with:

```
python -m pydantic_ai_examples.rag search "How do I configure logfire to work with FastAPI?"
```


```
uv run -m pydantic_ai_examples.rag search "How do I configure logfire to work with FastAPI?"
```


## Example Code

```
from __future__ import annotations as _annotations
import asyncio
import re
import sys
import unicodedata
from contextlib import asynccontextmanager
from dataclasses import dataclass
import asyncpg
import httpx
import logfire
import pydantic_core
from openai import AsyncOpenAI
from pydantic import TypeAdapter
from typing_extensions import AsyncGenerator
from pydantic_ai import RunContext
from pydantic_ai.agent import Agent
# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured
logfire.configure(send_to_logfire='if-token-present')
logfire.instrument_asyncpg()
@dataclass
class Deps:
openai: AsyncOpenAI
pool: asyncpg.Pool
agent = Agent('openai:gpt-4o', deps_type=Deps, instrument=True)
@agent.tool
async def retrieve(context: RunContext[Deps], search_query: str) -> str:
"""Retrieve documentation sections based on a search query.
Args:
context: The call context.
search_query: The search query.
"""
with logfire.span(
'create embedding for {search_query=}', search_query=search_query
):
embedding = await context.deps.openai.embeddings.create(
input=search_query,
model='text-embedding-3-small',
)
assert len(embedding.data) == 1, (
f'Expected 1 embedding, got {len(embedding.data)}, doc query: {search_query!r}'
)
embedding = embedding.data[0].embedding
embedding_json = pydantic_core.to_json(embedding).decode()
rows = await context.deps.pool.fetch(
'SELECT url, title, content FROM doc_sections ORDER BY embedding <-> $1 LIMIT 8',
embedding_json,
)
return '\n\n'.join(
f'# {row["title"]}\nDocumentation URL:{row["url"]}\n\n{row["content"]}\n'
for row in rows
)
async def run_agent(question: str):
"""Entry point to run the agent and perform RAG based question answering."""
openai = AsyncOpenAI()
logfire.instrument_openai(openai)
logfire.info('Asking "{question}"', question=question)
async with database_connect(False) as pool:
deps = Deps(openai=openai, pool=pool)
answer = await agent.run(question, deps=deps)
print(answer.data)
#######################################################
# The rest of this file is dedicated to preparing the #
# search database, and some utilities. #
#######################################################
# JSON document from
# https://gist.github.com/samuelcolvin/4b5bb9bb163b1122ff17e29e48c10992
DOCS_JSON = (
'https://gist.githubusercontent.com/'
'samuelcolvin/4b5bb9bb163b1122ff17e29e48c10992/raw/'
'80c5925c42f1442c24963aaf5eb1a324d47afe95/logfire_docs.json'
)
async def build_search_db():
"""Build the search database."""
async with httpx.AsyncClient() as client:
response = await client.get(DOCS_JSON)
response.raise_for_status()
sections = sessions_ta.validate_json(response.content)
openai = AsyncOpenAI()
logfire.instrument_openai(openai)
async with database_connect(True) as pool:
with logfire.span('create schema'):
async with pool.acquire() as conn:
async with conn.transaction():
await conn.execute(DB_SCHEMA)
sem = asyncio.Semaphore(10)
async with asyncio.TaskGroup() as tg:
for section in sections:
tg.create_task(insert_doc_section(sem, openai, pool, section))
async def insert_doc_section(
sem: asyncio.Semaphore,
openai: AsyncOpenAI,
pool: asyncpg.Pool,
section: DocsSection,
) -> None:
async with sem:
url = section.url()
exists = await pool.fetchval('SELECT 1 FROM doc_sections WHERE url = $1', url)
if exists:
logfire.info('Skipping {url=}', url=url)
return
with logfire.span('create embedding for {url=}', url=url):
embedding = await openai.embeddings.create(
input=section.embedding_content(),
model='text-embedding-3-small',
)
assert len(embedding.data) == 1, (
f'Expected 1 embedding, got {len(embedding.data)}, doc section: {section}'
)
embedding = embedding.data[0].embedding
embedding_json = pydantic_core.to_json(embedding).decode()
await pool.execute(
'INSERT INTO doc_sections (url, title, content, embedding) VALUES ($1, $2, $3, $4)',
url,
section.title,
section.content,
embedding_json,
)
@dataclass
class DocsSection:
id: int
parent: int | None
path: str
level: int
title: str
content: str
def url(self) -> str:
url_path = re.sub(r'\.md$', '', self.path)
return (
f'https://logfire.pydantic.dev/docs/{url_path}/#{slugify(self.title, "-")}'
)
def embedding_content(self) -> str:
return '\n\n'.join((f'path: {self.path}', f'title: {self.title}', self.content))
sessions_ta = TypeAdapter(list[DocsSection])
# pyright: reportUnknownMemberType=false
# pyright: reportUnknownVariableType=false
@asynccontextmanager
async def database_connect(
create_db: bool = False,
) -> AsyncGenerator[asyncpg.Pool, None]:
server_dsn, database = (
'postgresql://postgres:postgres@localhost:54320',
'pydantic_ai_rag',
)
if create_db:
with logfire.span('check and create DB'):
conn = await asyncpg.connect(server_dsn)
try:
db_exists = await conn.fetchval(
'SELECT 1 FROM pg_database WHERE datname = $1', database
)
if not db_exists:
await conn.execute(f'CREATE DATABASE {database}')
finally:
await conn.close()
pool = await asyncpg.create_pool(f'{server_dsn}/{database}')
try:
yield pool
finally:
await pool.close()
DB_SCHEMA = """
CREATE EXTENSION IF NOT EXISTS vector;
CREATE TABLE IF NOT EXISTS doc_sections (
id serial PRIMARY KEY,
url text NOT NULL UNIQUE,
title text NOT NULL,
content text NOT NULL,
-- text-embedding-3-small returns a vector of 1536 floats
embedding vector(1536) NOT NULL
);
CREATE INDEX IF NOT EXISTS idx_doc_sections_embedding ON doc_sections USING hnsw (embedding vector_l2_ops);
"""
def slugify(value: str, separator: str, unicode: bool = False) -> str:
"""Slugify a string, to make it URL friendly."""
# Taken unchanged from https://github.com/Python-Markdown/markdown/blob/3.7/markdown/extensions/toc.py#L38
if not unicode:
# Replace Extended Latin characters with ASCII, i.e. `žlutý` => `zluty`
value = unicodedata.normalize('NFKD', value)
value = value.encode('ascii', 'ignore').decode('ascii')
value = re.sub(r'[^\w\s-]', '', value).strip().lower()
return re.sub(rf'[{separator}\s]+', separator, value)
if __name__ == '__main__':
action = sys.argv[1] if len(sys.argv) > 1 else None
if action == 'build':
asyncio.run(build_search_db())
elif action == 'search':
if len(sys.argv) == 3:
q = sys.argv[2]
else:
q = 'How do I configure logfire to work with FastAPI?'
asyncio.run(run_agent(q))
else:
print(
'uv run --extra examples -m pydantic_ai_examples.rag build|search',
file=sys.stderr,
)
sys.exit(1)
```
</doc>

<a id="examples_stream-markdown"></a>

<doc title="Stream markdown" desc="Content from https://ai.pydantic.dev/examples/stream-markdown">

---
title: Stream markdown - PydanticAI
url: https://ai.pydantic.dev/examples/stream-markdown/
hostname: pydantic.dev
description: Agent Framework / shim to use Pydantic with LLMs
sitename: ai.pydantic.dev
date: 2024-01-01
---
# Stream markdown

This example shows how to stream markdown from an agent, using the [ rich](https://github.com/Textualize/rich) library to highlight the output in the terminal.

It'll run the example with both OpenAI and Google Gemini models if the required environment variables are set.

Demonstrates:

## Running the Example

With [dependencies installed and environment variables set](https://ai.pydantic.dev/#usage), run:

```
python -m pydantic_ai_examples.stream_markdown
```


```
uv run -m pydantic_ai_examples.stream_markdown
```


## Example Code

```
import asyncio
import os
import logfire
from rich.console import Console, ConsoleOptions, RenderResult
from rich.live import Live
from rich.markdown import CodeBlock, Markdown
from rich.syntax import Syntax
from rich.text import Text
from pydantic_ai import Agent
from pydantic_ai.models import KnownModelName
# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured
logfire.configure(send_to_logfire='if-token-present')
agent = Agent(instrument=True)
# models to try, and the appropriate env var
models: list[tuple[KnownModelName, str]] = [
('google-gla:gemini-1.5-flash', 'GEMINI_API_KEY'),
('openai:gpt-4o-mini', 'OPENAI_API_KEY'),
('groq:llama-3.3-70b-versatile', 'GROQ_API_KEY'),
]
async def main():
prettier_code_blocks()
console = Console()
prompt = 'Show me a short example of using Pydantic.'
console.log(f'Asking: {prompt}...', style='cyan')
for model, env_var in models:
if env_var in os.environ:
console.log(f'Using model: {model}')
with Live('', console=console, vertical_overflow='visible') as live:
async with agent.run_stream(prompt, model=model) as result:
async for message in result.stream():
live.update(Markdown(message))
console.log(result.usage())
else:
console.log(f'{model} requires {env_var} to be set.')
def prettier_code_blocks():
"""Make rich code blocks prettier and easier to copy.
From https://github.com/samuelcolvin/aicli/blob/v0.8.0/samuelcolvin_aicli.py#L22
"""
class SimpleCodeBlock(CodeBlock):
def __rich_console__(
self, console: Console, options: ConsoleOptions
) -> RenderResult:
code = str(self.text).rstrip()
yield Text(self.lexer_name, style='dim')
yield Syntax(
code,
self.lexer_name,
theme=self.theme,
background_color='default',
word_wrap=True,
)
yield Text(f'/{self.lexer_name}', style='dim')
Markdown.elements['fence'] = SimpleCodeBlock
if __name__ == '__main__':
asyncio.run(main())
```
</doc>

</project>